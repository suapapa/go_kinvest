// Package kinvest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package oapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostOauth2ApprovalWithBody request with any body
	PostOauth2ApprovalWithBody(ctx context.Context, params *PostOauth2ApprovalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOauth2Approval(ctx context.Context, params *PostOauth2ApprovalParams, body PostOauth2ApprovalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOauth2RevokePWithBody request with any body
	PostOauth2RevokePWithBody(ctx context.Context, params *PostOauth2RevokePParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOauth2RevokeP(ctx context.Context, params *PostOauth2RevokePParams, body PostOauth2RevokePJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOauth2TokenPWithBody request with any body
	PostOauth2TokenPWithBody(ctx context.Context, params *PostOauth2TokenPParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOauth2TokenP(ctx context.Context, params *PostOauth2TokenPParams, body PostOauth2TokenPJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticBondV1QuotationsAvgUnit request
	GetUapiDomesticBondV1QuotationsAvgUnit(ctx context.Context, params *GetUapiDomesticBondV1QuotationsAvgUnitParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticBondV1QuotationsInquireAskingPrice request
	GetUapiDomesticBondV1QuotationsInquireAskingPrice(ctx context.Context, params *GetUapiDomesticBondV1QuotationsInquireAskingPriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticBondV1QuotationsInquireCcnl request
	GetUapiDomesticBondV1QuotationsInquireCcnl(ctx context.Context, params *GetUapiDomesticBondV1QuotationsInquireCcnlParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticBondV1QuotationsInquireDailyItemchartprice request
	GetUapiDomesticBondV1QuotationsInquireDailyItemchartprice(ctx context.Context, params *GetUapiDomesticBondV1QuotationsInquireDailyItemchartpriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticBondV1QuotationsInquirePrice request
	GetUapiDomesticBondV1QuotationsInquirePrice(ctx context.Context, params *GetUapiDomesticBondV1QuotationsInquirePriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticBondV1QuotationsIssueInfo request
	GetUapiDomesticBondV1QuotationsIssueInfo(ctx context.Context, params *GetUapiDomesticBondV1QuotationsIssueInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticBondV1QuotationsSearchBondInfo request
	GetUapiDomesticBondV1QuotationsSearchBondInfo(ctx context.Context, params *GetUapiDomesticBondV1QuotationsSearchBondInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUapiDomesticBondV1TradingBuyWithBody request with any body
	PostUapiDomesticBondV1TradingBuyWithBody(ctx context.Context, params *PostUapiDomesticBondV1TradingBuyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUapiDomesticBondV1TradingBuy(ctx context.Context, params *PostUapiDomesticBondV1TradingBuyParams, body PostUapiDomesticBondV1TradingBuyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticBondV1TradingInquireBalance request
	GetUapiDomesticBondV1TradingInquireBalance(ctx context.Context, params *GetUapiDomesticBondV1TradingInquireBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticBondV1TradingInquireDailyCcld request
	GetUapiDomesticBondV1TradingInquireDailyCcld(ctx context.Context, params *GetUapiDomesticBondV1TradingInquireDailyCcldParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticBondV1TradingInquirePsblOrder request
	GetUapiDomesticBondV1TradingInquirePsblOrder(ctx context.Context, params *GetUapiDomesticBondV1TradingInquirePsblOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticBondV1TradingInquirePsblRvsecncl request
	GetUapiDomesticBondV1TradingInquirePsblRvsecncl(ctx context.Context, params *GetUapiDomesticBondV1TradingInquirePsblRvsecnclParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUapiDomesticBondV1TradingOrderRvsecnclWithBody request with any body
	PostUapiDomesticBondV1TradingOrderRvsecnclWithBody(ctx context.Context, params *PostUapiDomesticBondV1TradingOrderRvsecnclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUapiDomesticBondV1TradingOrderRvsecncl(ctx context.Context, params *PostUapiDomesticBondV1TradingOrderRvsecnclParams, body PostUapiDomesticBondV1TradingOrderRvsecnclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUapiDomesticBondV1TradingSellWithBody request with any body
	PostUapiDomesticBondV1TradingSellWithBody(ctx context.Context, params *PostUapiDomesticBondV1TradingSellParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUapiDomesticBondV1TradingSell(ctx context.Context, params *PostUapiDomesticBondV1TradingSellParams, body PostUapiDomesticBondV1TradingSellJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticFutureoptionV1QuotationsDisplayBoardCallput request
	GetUapiDomesticFutureoptionV1QuotationsDisplayBoardCallput(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsDisplayBoardCallputParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticFutureoptionV1QuotationsDisplayBoardFutures request
	GetUapiDomesticFutureoptionV1QuotationsDisplayBoardFutures(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsDisplayBoardFuturesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticFutureoptionV1QuotationsDisplayBoardOptionList request
	GetUapiDomesticFutureoptionV1QuotationsDisplayBoardOptionList(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsDisplayBoardOptionListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticFutureoptionV1QuotationsDisplayBoardTop request
	GetUapiDomesticFutureoptionV1QuotationsDisplayBoardTop(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsDisplayBoardTopParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticFutureoptionV1QuotationsExpPriceTrend request
	GetUapiDomesticFutureoptionV1QuotationsExpPriceTrend(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsExpPriceTrendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticFutureoptionV1QuotationsInquireAskingPrice request
	GetUapiDomesticFutureoptionV1QuotationsInquireAskingPrice(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsInquireAskingPriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticFutureoptionV1QuotationsInquireDailyFuopchartprice request
	GetUapiDomesticFutureoptionV1QuotationsInquireDailyFuopchartprice(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsInquireDailyFuopchartpriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticFutureoptionV1QuotationsInquirePrice request
	GetUapiDomesticFutureoptionV1QuotationsInquirePrice(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsInquirePriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticFutureoptionV1QuotationsInquireTimeFuopchartprice request
	GetUapiDomesticFutureoptionV1QuotationsInquireTimeFuopchartprice(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsInquireTimeFuopchartpriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticFutureoptionV1TradingInquireBalance request
	GetUapiDomesticFutureoptionV1TradingInquireBalance(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticFutureoptionV1TradingInquireBalanceSettlementPl request
	GetUapiDomesticFutureoptionV1TradingInquireBalanceSettlementPl(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireBalanceSettlementPlParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticFutureoptionV1TradingInquireBalanceValuationPl request
	GetUapiDomesticFutureoptionV1TradingInquireBalanceValuationPl(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireBalanceValuationPlParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticFutureoptionV1TradingInquireCcnl request
	GetUapiDomesticFutureoptionV1TradingInquireCcnl(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireCcnlParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticFutureoptionV1TradingInquireCcnlBstime request
	GetUapiDomesticFutureoptionV1TradingInquireCcnlBstime(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireCcnlBstimeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticFutureoptionV1TradingInquireDailyAmountFee request
	GetUapiDomesticFutureoptionV1TradingInquireDailyAmountFee(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireDailyAmountFeeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticFutureoptionV1TradingInquireDeposit request
	GetUapiDomesticFutureoptionV1TradingInquireDeposit(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireDepositParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticFutureoptionV1TradingInquireNgtBalance request
	GetUapiDomesticFutureoptionV1TradingInquireNgtBalance(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireNgtBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticFutureoptionV1TradingInquireNgtCcnl request
	GetUapiDomesticFutureoptionV1TradingInquireNgtCcnl(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireNgtCcnlParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticFutureoptionV1TradingInquirePsblNgtOrder request
	GetUapiDomesticFutureoptionV1TradingInquirePsblNgtOrder(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquirePsblNgtOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticFutureoptionV1TradingInquirePsblOrder request
	GetUapiDomesticFutureoptionV1TradingInquirePsblOrder(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquirePsblOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticFutureoptionV1TradingNgtMarginDetail request
	GetUapiDomesticFutureoptionV1TradingNgtMarginDetail(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingNgtMarginDetailParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUapiDomesticFutureoptionV1TradingOrderWithBody request with any body
	PostUapiDomesticFutureoptionV1TradingOrderWithBody(ctx context.Context, params *PostUapiDomesticFutureoptionV1TradingOrderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUapiDomesticFutureoptionV1TradingOrder(ctx context.Context, params *PostUapiDomesticFutureoptionV1TradingOrderParams, body PostUapiDomesticFutureoptionV1TradingOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUapiDomesticFutureoptionV1TradingOrderRvsecnclWithBody request with any body
	PostUapiDomesticFutureoptionV1TradingOrderRvsecnclWithBody(ctx context.Context, params *PostUapiDomesticFutureoptionV1TradingOrderRvsecnclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUapiDomesticFutureoptionV1TradingOrderRvsecncl(ctx context.Context, params *PostUapiDomesticFutureoptionV1TradingOrderRvsecnclParams, body PostUapiDomesticFutureoptionV1TradingOrderRvsecnclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1FinanceBalanceSheet request
	GetUapiDomesticStockV1FinanceBalanceSheet(ctx context.Context, params *GetUapiDomesticStockV1FinanceBalanceSheetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1FinanceFinancialRatio request
	GetUapiDomesticStockV1FinanceFinancialRatio(ctx context.Context, params *GetUapiDomesticStockV1FinanceFinancialRatioParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1FinanceGrowthRatio request
	GetUapiDomesticStockV1FinanceGrowthRatio(ctx context.Context, params *GetUapiDomesticStockV1FinanceGrowthRatioParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1FinanceIncomeStatement request
	GetUapiDomesticStockV1FinanceIncomeStatement(ctx context.Context, params *GetUapiDomesticStockV1FinanceIncomeStatementParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1FinanceOtherMajorRatios request
	GetUapiDomesticStockV1FinanceOtherMajorRatios(ctx context.Context, params *GetUapiDomesticStockV1FinanceOtherMajorRatiosParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1FinanceProfitRatio request
	GetUapiDomesticStockV1FinanceProfitRatio(ctx context.Context, params *GetUapiDomesticStockV1FinanceProfitRatioParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1FinanceStabilityRatio request
	GetUapiDomesticStockV1FinanceStabilityRatio(ctx context.Context, params *GetUapiDomesticStockV1FinanceStabilityRatioParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1KsdinfoBonusIssue request
	GetUapiDomesticStockV1KsdinfoBonusIssue(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoBonusIssueParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1KsdinfoCapDcrs request
	GetUapiDomesticStockV1KsdinfoCapDcrs(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoCapDcrsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1KsdinfoDividend request
	GetUapiDomesticStockV1KsdinfoDividend(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoDividendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1KsdinfoListInfo request
	GetUapiDomesticStockV1KsdinfoListInfo(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoListInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1KsdinfoMergerSplit request
	GetUapiDomesticStockV1KsdinfoMergerSplit(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoMergerSplitParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1KsdinfoPaidinCapin request
	GetUapiDomesticStockV1KsdinfoPaidinCapin(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoPaidinCapinParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1KsdinfoPurreq request
	GetUapiDomesticStockV1KsdinfoPurreq(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoPurreqParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1KsdinfoRevSplit request
	GetUapiDomesticStockV1KsdinfoRevSplit(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoRevSplitParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1KsdinfoSharehldMeet request
	GetUapiDomesticStockV1KsdinfoSharehldMeet(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoSharehldMeetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsCaptureUplowprice request
	GetUapiDomesticStockV1QuotationsCaptureUplowprice(ctx context.Context, params *GetUapiDomesticStockV1QuotationsCaptureUplowpriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsChkHoliday request
	GetUapiDomesticStockV1QuotationsChkHoliday(ctx context.Context, params *GetUapiDomesticStockV1QuotationsChkHolidayParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsCompInterest request
	GetUapiDomesticStockV1QuotationsCompInterest(ctx context.Context, params *GetUapiDomesticStockV1QuotationsCompInterestParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsCompProgramTradeDaily request
	GetUapiDomesticStockV1QuotationsCompProgramTradeDaily(ctx context.Context, params *GetUapiDomesticStockV1QuotationsCompProgramTradeDailyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsCompProgramTradeToday request
	GetUapiDomesticStockV1QuotationsCompProgramTradeToday(ctx context.Context, params *GetUapiDomesticStockV1QuotationsCompProgramTradeTodayParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsCreditByCompany request
	GetUapiDomesticStockV1QuotationsCreditByCompany(ctx context.Context, params *GetUapiDomesticStockV1QuotationsCreditByCompanyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsDailyCreditBalance request
	GetUapiDomesticStockV1QuotationsDailyCreditBalance(ctx context.Context, params *GetUapiDomesticStockV1QuotationsDailyCreditBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsDailyShortSale request
	GetUapiDomesticStockV1QuotationsDailyShortSale(ctx context.Context, params *GetUapiDomesticStockV1QuotationsDailyShortSaleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsEstimatePerform request
	GetUapiDomesticStockV1QuotationsEstimatePerform(ctx context.Context, params *GetUapiDomesticStockV1QuotationsEstimatePerformParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsExpClosingPrice request
	GetUapiDomesticStockV1QuotationsExpClosingPrice(ctx context.Context, params *GetUapiDomesticStockV1QuotationsExpClosingPriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsExpIndexTrend request
	GetUapiDomesticStockV1QuotationsExpIndexTrend(ctx context.Context, params *GetUapiDomesticStockV1QuotationsExpIndexTrendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsExpPriceTrend request
	GetUapiDomesticStockV1QuotationsExpPriceTrend(ctx context.Context, params *GetUapiDomesticStockV1QuotationsExpPriceTrendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsForeignInstitutionTotal request
	GetUapiDomesticStockV1QuotationsForeignInstitutionTotal(ctx context.Context, params *GetUapiDomesticStockV1QuotationsForeignInstitutionTotalParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsFrgnmemPchsTrend request
	GetUapiDomesticStockV1QuotationsFrgnmemPchsTrend(ctx context.Context, params *GetUapiDomesticStockV1QuotationsFrgnmemPchsTrendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsFrgnmemTradeEstimate request
	GetUapiDomesticStockV1QuotationsFrgnmemTradeEstimate(ctx context.Context, params *GetUapiDomesticStockV1QuotationsFrgnmemTradeEstimateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsFrgnmemTradeTrend request
	GetUapiDomesticStockV1QuotationsFrgnmemTradeTrend(ctx context.Context, params *GetUapiDomesticStockV1QuotationsFrgnmemTradeTrendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsInquireAskingPriceExpCcn request
	GetUapiDomesticStockV1QuotationsInquireAskingPriceExpCcn(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireAskingPriceExpCcnParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsInquireCcnl request
	GetUapiDomesticStockV1QuotationsInquireCcnl(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireCcnlParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsInquireDailyIndexchartprice request
	GetUapiDomesticStockV1QuotationsInquireDailyIndexchartprice(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireDailyIndexchartpriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsInquireDailyItemchartprice request
	GetUapiDomesticStockV1QuotationsInquireDailyItemchartprice(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireDailyItemchartpriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsInquireDailyOvertimeprice request
	GetUapiDomesticStockV1QuotationsInquireDailyOvertimeprice(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireDailyOvertimepriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsInquireDailyPrice request
	GetUapiDomesticStockV1QuotationsInquireDailyPrice(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireDailyPriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsInquireDailyTradeVolume request
	GetUapiDomesticStockV1QuotationsInquireDailyTradeVolume(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireDailyTradeVolumeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsInquireElwPrice request
	GetUapiDomesticStockV1QuotationsInquireElwPrice(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireElwPriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsInquireIndexTickprice request
	GetUapiDomesticStockV1QuotationsInquireIndexTickprice(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireIndexTickpriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsInquireIndexTimeprice request
	GetUapiDomesticStockV1QuotationsInquireIndexTimeprice(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireIndexTimepriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsInquireInvestor request
	GetUapiDomesticStockV1QuotationsInquireInvestor(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireInvestorParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsInquireInvestorDailyByMarket request
	GetUapiDomesticStockV1QuotationsInquireInvestorDailyByMarket(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireInvestorDailyByMarketParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsInquireInvestorTimeByMarket request
	GetUapiDomesticStockV1QuotationsInquireInvestorTimeByMarket(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireInvestorTimeByMarketParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsInquireMember request
	GetUapiDomesticStockV1QuotationsInquireMember(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireMemberParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsInquireMemberDaily request
	GetUapiDomesticStockV1QuotationsInquireMemberDaily(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireMemberDailyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsInquireOvertimeAskingPrice request
	GetUapiDomesticStockV1QuotationsInquireOvertimeAskingPrice(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireOvertimeAskingPriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsInquireOvertimePrice request
	GetUapiDomesticStockV1QuotationsInquireOvertimePrice(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireOvertimePriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsInquirePrice request
	GetUapiDomesticStockV1QuotationsInquirePrice(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquirePriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsInquirePrice2 request
	GetUapiDomesticStockV1QuotationsInquirePrice2(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquirePrice2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsInquireTimeIndexchartprice request
	GetUapiDomesticStockV1QuotationsInquireTimeIndexchartprice(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireTimeIndexchartpriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsInquireTimeItemchartprice request
	GetUapiDomesticStockV1QuotationsInquireTimeItemchartprice(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireTimeItemchartpriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsInquireTimeItemconclusion request
	GetUapiDomesticStockV1QuotationsInquireTimeItemconclusion(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireTimeItemconclusionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsInquireTimeOvertimeconclusion request
	GetUapiDomesticStockV1QuotationsInquireTimeOvertimeconclusion(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireTimeOvertimeconclusionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsInquireViStatus request
	GetUapiDomesticStockV1QuotationsInquireViStatus(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireViStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsIntstockGrouplist request
	GetUapiDomesticStockV1QuotationsIntstockGrouplist(ctx context.Context, params *GetUapiDomesticStockV1QuotationsIntstockGrouplistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsIntstockMultprice request
	GetUapiDomesticStockV1QuotationsIntstockMultprice(ctx context.Context, params *GetUapiDomesticStockV1QuotationsIntstockMultpriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsIntstockStocklistByGroup request
	GetUapiDomesticStockV1QuotationsIntstockStocklistByGroup(ctx context.Context, params *GetUapiDomesticStockV1QuotationsIntstockStocklistByGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsInvestOpbysec request
	GetUapiDomesticStockV1QuotationsInvestOpbysec(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInvestOpbysecParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsInvestOpinion request
	GetUapiDomesticStockV1QuotationsInvestOpinion(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInvestOpinionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsInvestorProgramTradeToday request
	GetUapiDomesticStockV1QuotationsInvestorProgramTradeToday(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInvestorProgramTradeTodayParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsInvestorTrendEstimate request
	GetUapiDomesticStockV1QuotationsInvestorTrendEstimate(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInvestorTrendEstimateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsLendableByCompany request
	GetUapiDomesticStockV1QuotationsLendableByCompany(ctx context.Context, params *GetUapiDomesticStockV1QuotationsLendableByCompanyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsMktfunds request
	GetUapiDomesticStockV1QuotationsMktfunds(ctx context.Context, params *GetUapiDomesticStockV1QuotationsMktfundsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsNewsTitle request
	GetUapiDomesticStockV1QuotationsNewsTitle(ctx context.Context, params *GetUapiDomesticStockV1QuotationsNewsTitleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsPbarTratio request
	GetUapiDomesticStockV1QuotationsPbarTratio(ctx context.Context, params *GetUapiDomesticStockV1QuotationsPbarTratioParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsProgramTradeByStock request
	GetUapiDomesticStockV1QuotationsProgramTradeByStock(ctx context.Context, params *GetUapiDomesticStockV1QuotationsProgramTradeByStockParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsProgramTradeByStockDaily request
	GetUapiDomesticStockV1QuotationsProgramTradeByStockDaily(ctx context.Context, params *GetUapiDomesticStockV1QuotationsProgramTradeByStockDailyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsPsearchResult request
	GetUapiDomesticStockV1QuotationsPsearchResult(ctx context.Context, params *GetUapiDomesticStockV1QuotationsPsearchResultParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsPsearchTitle request
	GetUapiDomesticStockV1QuotationsPsearchTitle(ctx context.Context, params *GetUapiDomesticStockV1QuotationsPsearchTitleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsSearchInfo request
	GetUapiDomesticStockV1QuotationsSearchInfo(ctx context.Context, params *GetUapiDomesticStockV1QuotationsSearchInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsSearchStockInfo request
	GetUapiDomesticStockV1QuotationsSearchStockInfo(ctx context.Context, params *GetUapiDomesticStockV1QuotationsSearchStockInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsTradprtByamt request
	GetUapiDomesticStockV1QuotationsTradprtByamt(ctx context.Context, params *GetUapiDomesticStockV1QuotationsTradprtByamtParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1QuotationsVolumeRank request
	GetUapiDomesticStockV1QuotationsVolumeRank(ctx context.Context, params *GetUapiDomesticStockV1QuotationsVolumeRankParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1RankingAfterHourBalance request
	GetUapiDomesticStockV1RankingAfterHourBalance(ctx context.Context, params *GetUapiDomesticStockV1RankingAfterHourBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1RankingBulkTransNum request
	GetUapiDomesticStockV1RankingBulkTransNum(ctx context.Context, params *GetUapiDomesticStockV1RankingBulkTransNumParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1RankingCreditBalance request
	GetUapiDomesticStockV1RankingCreditBalance(ctx context.Context, params *GetUapiDomesticStockV1RankingCreditBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1RankingDisparity request
	GetUapiDomesticStockV1RankingDisparity(ctx context.Context, params *GetUapiDomesticStockV1RankingDisparityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1RankingDividendRate request
	GetUapiDomesticStockV1RankingDividendRate(ctx context.Context, params *GetUapiDomesticStockV1RankingDividendRateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1RankingExpTransUpdown request
	GetUapiDomesticStockV1RankingExpTransUpdown(ctx context.Context, params *GetUapiDomesticStockV1RankingExpTransUpdownParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1RankingFinanceRatio request
	GetUapiDomesticStockV1RankingFinanceRatio(ctx context.Context, params *GetUapiDomesticStockV1RankingFinanceRatioParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1RankingFluctuation request
	GetUapiDomesticStockV1RankingFluctuation(ctx context.Context, params *GetUapiDomesticStockV1RankingFluctuationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1RankingMarketCap request
	GetUapiDomesticStockV1RankingMarketCap(ctx context.Context, params *GetUapiDomesticStockV1RankingMarketCapParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1RankingMarketValue request
	GetUapiDomesticStockV1RankingMarketValue(ctx context.Context, params *GetUapiDomesticStockV1RankingMarketValueParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1RankingNearNewHighlow request
	GetUapiDomesticStockV1RankingNearNewHighlow(ctx context.Context, params *GetUapiDomesticStockV1RankingNearNewHighlowParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1RankingOvertimeExpTransFluct request
	GetUapiDomesticStockV1RankingOvertimeExpTransFluct(ctx context.Context, params *GetUapiDomesticStockV1RankingOvertimeExpTransFluctParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1RankingOvertimeFluctuation request
	GetUapiDomesticStockV1RankingOvertimeFluctuation(ctx context.Context, params *GetUapiDomesticStockV1RankingOvertimeFluctuationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1RankingOvertimeVolume request
	GetUapiDomesticStockV1RankingOvertimeVolume(ctx context.Context, params *GetUapiDomesticStockV1RankingOvertimeVolumeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1RankingPreferDisparateRatio request
	GetUapiDomesticStockV1RankingPreferDisparateRatio(ctx context.Context, params *GetUapiDomesticStockV1RankingPreferDisparateRatioParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1RankingProfitAssetIndex request
	GetUapiDomesticStockV1RankingProfitAssetIndex(ctx context.Context, params *GetUapiDomesticStockV1RankingProfitAssetIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1RankingQuoteBalance request
	GetUapiDomesticStockV1RankingQuoteBalance(ctx context.Context, params *GetUapiDomesticStockV1RankingQuoteBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1RankingShortSale request
	GetUapiDomesticStockV1RankingShortSale(ctx context.Context, params *GetUapiDomesticStockV1RankingShortSaleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1RankingTopInterestStock request
	GetUapiDomesticStockV1RankingTopInterestStock(ctx context.Context, params *GetUapiDomesticStockV1RankingTopInterestStockParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1RankingTradedByCompany request
	GetUapiDomesticStockV1RankingTradedByCompany(ctx context.Context, params *GetUapiDomesticStockV1RankingTradedByCompanyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1RankingVolumePower request
	GetUapiDomesticStockV1RankingVolumePower(ctx context.Context, params *GetUapiDomesticStockV1RankingVolumePowerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1TradingInquireAccountBalance request
	GetUapiDomesticStockV1TradingInquireAccountBalance(ctx context.Context, params *GetUapiDomesticStockV1TradingInquireAccountBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1TradingInquireBalance request
	GetUapiDomesticStockV1TradingInquireBalance(ctx context.Context, params *GetUapiDomesticStockV1TradingInquireBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1TradingInquireBalanceRlzPl request
	GetUapiDomesticStockV1TradingInquireBalanceRlzPl(ctx context.Context, params *GetUapiDomesticStockV1TradingInquireBalanceRlzPlParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1TradingInquireCreditPsamount request
	GetUapiDomesticStockV1TradingInquireCreditPsamount(ctx context.Context, params *GetUapiDomesticStockV1TradingInquireCreditPsamountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1TradingInquireDailyCcld request
	GetUapiDomesticStockV1TradingInquireDailyCcld(ctx context.Context, params *GetUapiDomesticStockV1TradingInquireDailyCcldParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1TradingInquirePeriodProfit request
	GetUapiDomesticStockV1TradingInquirePeriodProfit(ctx context.Context, params *GetUapiDomesticStockV1TradingInquirePeriodProfitParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1TradingInquirePeriodTradeProfit request
	GetUapiDomesticStockV1TradingInquirePeriodTradeProfit(ctx context.Context, params *GetUapiDomesticStockV1TradingInquirePeriodTradeProfitParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1TradingInquirePsblOrder request
	GetUapiDomesticStockV1TradingInquirePsblOrder(ctx context.Context, params *GetUapiDomesticStockV1TradingInquirePsblOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1TradingInquirePsblRvsecncl request
	GetUapiDomesticStockV1TradingInquirePsblRvsecncl(ctx context.Context, params *GetUapiDomesticStockV1TradingInquirePsblRvsecnclParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1TradingInquirePsblSell request
	GetUapiDomesticStockV1TradingInquirePsblSell(ctx context.Context, params *GetUapiDomesticStockV1TradingInquirePsblSellParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUapiDomesticStockV1TradingOrderCashWithBody request with any body
	PostUapiDomesticStockV1TradingOrderCashWithBody(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderCashParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUapiDomesticStockV1TradingOrderCash(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderCashParams, body PostUapiDomesticStockV1TradingOrderCashJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUapiDomesticStockV1TradingOrderCreditWithBody request with any body
	PostUapiDomesticStockV1TradingOrderCreditWithBody(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderCreditParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUapiDomesticStockV1TradingOrderCredit(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderCreditParams, body PostUapiDomesticStockV1TradingOrderCreditJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUapiDomesticStockV1TradingOrderResvWithBody request with any body
	PostUapiDomesticStockV1TradingOrderResvWithBody(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderResvParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUapiDomesticStockV1TradingOrderResv(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderResvParams, body PostUapiDomesticStockV1TradingOrderResvJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1TradingOrderResvCcnl request
	GetUapiDomesticStockV1TradingOrderResvCcnl(ctx context.Context, params *GetUapiDomesticStockV1TradingOrderResvCcnlParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUapiDomesticStockV1TradingOrderResvRvsecnclWithBody request with any body
	PostUapiDomesticStockV1TradingOrderResvRvsecnclWithBody(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderResvRvsecnclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUapiDomesticStockV1TradingOrderResvRvsecncl(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderResvRvsecnclParams, body PostUapiDomesticStockV1TradingOrderResvRvsecnclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUapiDomesticStockV1TradingOrderRvsecnclWithBody request with any body
	PostUapiDomesticStockV1TradingOrderRvsecnclWithBody(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderRvsecnclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUapiDomesticStockV1TradingOrderRvsecncl(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderRvsecnclParams, body PostUapiDomesticStockV1TradingOrderRvsecnclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1TradingPensionInquireBalance request
	GetUapiDomesticStockV1TradingPensionInquireBalance(ctx context.Context, params *GetUapiDomesticStockV1TradingPensionInquireBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1TradingPensionInquireDailyCcld request
	GetUapiDomesticStockV1TradingPensionInquireDailyCcld(ctx context.Context, params *GetUapiDomesticStockV1TradingPensionInquireDailyCcldParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1TradingPensionInquireDeposit request
	GetUapiDomesticStockV1TradingPensionInquireDeposit(ctx context.Context, params *GetUapiDomesticStockV1TradingPensionInquireDepositParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1TradingPensionInquirePresentBalance request
	GetUapiDomesticStockV1TradingPensionInquirePresentBalance(ctx context.Context, params *GetUapiDomesticStockV1TradingPensionInquirePresentBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiDomesticStockV1TradingPensionInquirePsblOrder request
	GetUapiDomesticStockV1TradingPensionInquirePsblOrder(ctx context.Context, params *GetUapiDomesticStockV1TradingPensionInquirePsblOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiElwV1QuotationsCompareStocks request
	GetUapiElwV1QuotationsCompareStocks(ctx context.Context, params *GetUapiElwV1QuotationsCompareStocksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiElwV1QuotationsCondSearch request
	GetUapiElwV1QuotationsCondSearch(ctx context.Context, params *GetUapiElwV1QuotationsCondSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiElwV1QuotationsExpirationStocks request
	GetUapiElwV1QuotationsExpirationStocks(ctx context.Context, params *GetUapiElwV1QuotationsExpirationStocksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiElwV1QuotationsIndicatorTrendCcnl request
	GetUapiElwV1QuotationsIndicatorTrendCcnl(ctx context.Context, params *GetUapiElwV1QuotationsIndicatorTrendCcnlParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiElwV1QuotationsIndicatorTrendDaily request
	GetUapiElwV1QuotationsIndicatorTrendDaily(ctx context.Context, params *GetUapiElwV1QuotationsIndicatorTrendDailyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiElwV1QuotationsIndicatorTrendMinute request
	GetUapiElwV1QuotationsIndicatorTrendMinute(ctx context.Context, params *GetUapiElwV1QuotationsIndicatorTrendMinuteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiElwV1QuotationsLpTradeTrend request
	GetUapiElwV1QuotationsLpTradeTrend(ctx context.Context, params *GetUapiElwV1QuotationsLpTradeTrendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiElwV1QuotationsNewlyListed request
	GetUapiElwV1QuotationsNewlyListed(ctx context.Context, params *GetUapiElwV1QuotationsNewlyListedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiElwV1QuotationsSensitivityTrendCcnl request
	GetUapiElwV1QuotationsSensitivityTrendCcnl(ctx context.Context, params *GetUapiElwV1QuotationsSensitivityTrendCcnlParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiElwV1QuotationsSensitivityTrendDaily request
	GetUapiElwV1QuotationsSensitivityTrendDaily(ctx context.Context, params *GetUapiElwV1QuotationsSensitivityTrendDailyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiElwV1QuotationsUdrlAssetList request
	GetUapiElwV1QuotationsUdrlAssetList(ctx context.Context, params *GetUapiElwV1QuotationsUdrlAssetListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiElwV1QuotationsVolatilityTrendCcnl request
	GetUapiElwV1QuotationsVolatilityTrendCcnl(ctx context.Context, params *GetUapiElwV1QuotationsVolatilityTrendCcnlParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiElwV1QuotationsVolatilityTrendDaily request
	GetUapiElwV1QuotationsVolatilityTrendDaily(ctx context.Context, params *GetUapiElwV1QuotationsVolatilityTrendDailyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiElwV1QuotationsVolatilityTrendMinute request
	GetUapiElwV1QuotationsVolatilityTrendMinute(ctx context.Context, params *GetUapiElwV1QuotationsVolatilityTrendMinuteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiElwV1QuotationsVolatilityTrendTick request
	GetUapiElwV1QuotationsVolatilityTrendTick(ctx context.Context, params *GetUapiElwV1QuotationsVolatilityTrendTickParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiElwV1RankingUpdownRate request
	GetUapiElwV1RankingUpdownRate(ctx context.Context, params *GetUapiElwV1RankingUpdownRateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiEtfetnV1QuotationsInquireComponentStockPrice request
	GetUapiEtfetnV1QuotationsInquireComponentStockPrice(ctx context.Context, params *GetUapiEtfetnV1QuotationsInquireComponentStockPriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiEtfetnV1QuotationsInquirePrice request
	GetUapiEtfetnV1QuotationsInquirePrice(ctx context.Context, params *GetUapiEtfetnV1QuotationsInquirePriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiEtfetnV1QuotationsNavComparisonDailyTrend request
	GetUapiEtfetnV1QuotationsNavComparisonDailyTrend(ctx context.Context, params *GetUapiEtfetnV1QuotationsNavComparisonDailyTrendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiEtfetnV1QuotationsNavComparisonTimeTrend request
	GetUapiEtfetnV1QuotationsNavComparisonTimeTrend(ctx context.Context, params *GetUapiEtfetnV1QuotationsNavComparisonTimeTrendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiEtfetnV1QuotationsNavComparisonTrend request
	GetUapiEtfetnV1QuotationsNavComparisonTrend(ctx context.Context, params *GetUapiEtfetnV1QuotationsNavComparisonTrendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUapiHashkeyWithBody request with any body
	PostUapiHashkeyWithBody(ctx context.Context, params *PostUapiHashkeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUapiHashkey(ctx context.Context, params *PostUapiHashkeyParams, body PostUapiHashkeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasFutureoptionV1QuotationsDailyCcnl request
	GetUapiOverseasFutureoptionV1QuotationsDailyCcnl(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsDailyCcnlParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasFutureoptionV1QuotationsInquireAskingPrice request
	GetUapiOverseasFutureoptionV1QuotationsInquireAskingPrice(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsInquireAskingPriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasFutureoptionV1QuotationsInquirePrice request
	GetUapiOverseasFutureoptionV1QuotationsInquirePrice(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsInquirePriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasFutureoptionV1QuotationsInquireTimeFuturechartprice request
	GetUapiOverseasFutureoptionV1QuotationsInquireTimeFuturechartprice(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsInquireTimeFuturechartpriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasFutureoptionV1QuotationsInvestorUnpdTrend request
	GetUapiOverseasFutureoptionV1QuotationsInvestorUnpdTrend(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsInvestorUnpdTrendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasFutureoptionV1QuotationsMarketTime request
	GetUapiOverseasFutureoptionV1QuotationsMarketTime(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsMarketTimeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasFutureoptionV1QuotationsMonthlyCcnl request
	GetUapiOverseasFutureoptionV1QuotationsMonthlyCcnl(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsMonthlyCcnlParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasFutureoptionV1QuotationsOptAskingPrice request
	GetUapiOverseasFutureoptionV1QuotationsOptAskingPrice(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsOptAskingPriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasFutureoptionV1QuotationsSearchContractDetail request
	GetUapiOverseasFutureoptionV1QuotationsSearchContractDetail(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsSearchContractDetailParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasFutureoptionV1QuotationsStockDetail request
	GetUapiOverseasFutureoptionV1QuotationsStockDetail(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsStockDetailParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasFutureoptionV1QuotationsTickCcnl request
	GetUapiOverseasFutureoptionV1QuotationsTickCcnl(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsTickCcnlParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasFutureoptionV1QuotationsWeeklyCcnl request
	GetUapiOverseasFutureoptionV1QuotationsWeeklyCcnl(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsWeeklyCcnlParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasFutureoptionV1TradingInquireCcld request
	GetUapiOverseasFutureoptionV1TradingInquireCcld(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingInquireCcldParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasFutureoptionV1TradingInquireDailyCcld request
	GetUapiOverseasFutureoptionV1TradingInquireDailyCcld(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingInquireDailyCcldParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasFutureoptionV1TradingInquireDailyOrder request
	GetUapiOverseasFutureoptionV1TradingInquireDailyOrder(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingInquireDailyOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasFutureoptionV1TradingInquireDeposit request
	GetUapiOverseasFutureoptionV1TradingInquireDeposit(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingInquireDepositParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasFutureoptionV1TradingInquirePeriodCcld request
	GetUapiOverseasFutureoptionV1TradingInquirePeriodCcld(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingInquirePeriodCcldParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasFutureoptionV1TradingInquirePeriodTrans request
	GetUapiOverseasFutureoptionV1TradingInquirePeriodTrans(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingInquirePeriodTransParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasFutureoptionV1TradingInquirePsamount request
	GetUapiOverseasFutureoptionV1TradingInquirePsamount(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingInquirePsamountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasFutureoptionV1TradingInquireUnpd request
	GetUapiOverseasFutureoptionV1TradingInquireUnpd(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingInquireUnpdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasFutureoptionV1TradingMarginDetail request
	GetUapiOverseasFutureoptionV1TradingMarginDetail(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingMarginDetailParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUapiOverseasFutureoptionV1TradingOrderWithBody request with any body
	PostUapiOverseasFutureoptionV1TradingOrderWithBody(ctx context.Context, params *PostUapiOverseasFutureoptionV1TradingOrderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUapiOverseasFutureoptionV1TradingOrder(ctx context.Context, params *PostUapiOverseasFutureoptionV1TradingOrderParams, body PostUapiOverseasFutureoptionV1TradingOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUapiOverseasFutureoptionV1TradingOrderRvsecnclWithBody request with any body
	PostUapiOverseasFutureoptionV1TradingOrderRvsecnclWithBody(ctx context.Context, params *PostUapiOverseasFutureoptionV1TradingOrderRvsecnclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUapiOverseasFutureoptionV1TradingOrderRvsecncl(ctx context.Context, params *PostUapiOverseasFutureoptionV1TradingOrderRvsecnclParams, body PostUapiOverseasFutureoptionV1TradingOrderRvsecnclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasPriceV1QuotationsBrknewsTitle request
	GetUapiOverseasPriceV1QuotationsBrknewsTitle(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsBrknewsTitleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasPriceV1QuotationsColableByCompany request
	GetUapiOverseasPriceV1QuotationsColableByCompany(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsColableByCompanyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasPriceV1QuotationsDailyprice request
	GetUapiOverseasPriceV1QuotationsDailyprice(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsDailypriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasPriceV1QuotationsInquireAskingPrice request
	GetUapiOverseasPriceV1QuotationsInquireAskingPrice(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsInquireAskingPriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasPriceV1QuotationsInquireDailyChartprice request
	GetUapiOverseasPriceV1QuotationsInquireDailyChartprice(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsInquireDailyChartpriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasPriceV1QuotationsInquireSearch request
	GetUapiOverseasPriceV1QuotationsInquireSearch(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsInquireSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasPriceV1QuotationsInquireTimeIndexchartprice request
	GetUapiOverseasPriceV1QuotationsInquireTimeIndexchartprice(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsInquireTimeIndexchartpriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasPriceV1QuotationsInquireTimeItemchartprice request
	GetUapiOverseasPriceV1QuotationsInquireTimeItemchartprice(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsInquireTimeItemchartpriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasPriceV1QuotationsNewsTitle request
	GetUapiOverseasPriceV1QuotationsNewsTitle(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsNewsTitleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasPriceV1QuotationsPeriodRights request
	GetUapiOverseasPriceV1QuotationsPeriodRights(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsPeriodRightsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasPriceV1QuotationsPrice request
	GetUapiOverseasPriceV1QuotationsPrice(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsPriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasPriceV1QuotationsPriceDetail request
	GetUapiOverseasPriceV1QuotationsPriceDetail(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsPriceDetailParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasPriceV1QuotationsRightsByIce request
	GetUapiOverseasPriceV1QuotationsRightsByIce(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsRightsByIceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasPriceV1QuotationsSearchInfo request
	GetUapiOverseasPriceV1QuotationsSearchInfo(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsSearchInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasStockV1QuotationsCountriesHoliday request
	GetUapiOverseasStockV1QuotationsCountriesHoliday(ctx context.Context, params *GetUapiOverseasStockV1QuotationsCountriesHolidayParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUapiOverseasStockV1TradingDaytimeOrderWithBody request with any body
	PostUapiOverseasStockV1TradingDaytimeOrderWithBody(ctx context.Context, params *PostUapiOverseasStockV1TradingDaytimeOrderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUapiOverseasStockV1TradingDaytimeOrder(ctx context.Context, params *PostUapiOverseasStockV1TradingDaytimeOrderParams, body PostUapiOverseasStockV1TradingDaytimeOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclWithBody request with any body
	PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclWithBody(ctx context.Context, params *PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUapiOverseasStockV1TradingDaytimeOrderRvsecncl(ctx context.Context, params *PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclParams, body PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasStockV1TradingForeignMargin request
	GetUapiOverseasStockV1TradingForeignMargin(ctx context.Context, params *GetUapiOverseasStockV1TradingForeignMarginParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasStockV1TradingInquireBalance request
	GetUapiOverseasStockV1TradingInquireBalance(ctx context.Context, params *GetUapiOverseasStockV1TradingInquireBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasStockV1TradingInquireCcnl request
	GetUapiOverseasStockV1TradingInquireCcnl(ctx context.Context, params *GetUapiOverseasStockV1TradingInquireCcnlParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasStockV1TradingInquireNccs request
	GetUapiOverseasStockV1TradingInquireNccs(ctx context.Context, params *GetUapiOverseasStockV1TradingInquireNccsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasStockV1TradingInquirePaymtStdrBalance request
	GetUapiOverseasStockV1TradingInquirePaymtStdrBalance(ctx context.Context, params *GetUapiOverseasStockV1TradingInquirePaymtStdrBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasStockV1TradingInquirePeriodProfit request
	GetUapiOverseasStockV1TradingInquirePeriodProfit(ctx context.Context, params *GetUapiOverseasStockV1TradingInquirePeriodProfitParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasStockV1TradingInquirePeriodTrans request
	GetUapiOverseasStockV1TradingInquirePeriodTrans(ctx context.Context, params *GetUapiOverseasStockV1TradingInquirePeriodTransParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasStockV1TradingInquirePresentBalance request
	GetUapiOverseasStockV1TradingInquirePresentBalance(ctx context.Context, params *GetUapiOverseasStockV1TradingInquirePresentBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasStockV1TradingInquirePsamount request
	GetUapiOverseasStockV1TradingInquirePsamount(ctx context.Context, params *GetUapiOverseasStockV1TradingInquirePsamountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUapiOverseasStockV1TradingOrderWithBody request with any body
	PostUapiOverseasStockV1TradingOrderWithBody(ctx context.Context, params *PostUapiOverseasStockV1TradingOrderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUapiOverseasStockV1TradingOrder(ctx context.Context, params *PostUapiOverseasStockV1TradingOrderParams, body PostUapiOverseasStockV1TradingOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUapiOverseasStockV1TradingOrderResvWithBody request with any body
	PostUapiOverseasStockV1TradingOrderResvWithBody(ctx context.Context, params *PostUapiOverseasStockV1TradingOrderResvParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUapiOverseasStockV1TradingOrderResv(ctx context.Context, params *PostUapiOverseasStockV1TradingOrderResvParams, body PostUapiOverseasStockV1TradingOrderResvJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUapiOverseasStockV1TradingOrderResvCcnlWithBody request with any body
	PostUapiOverseasStockV1TradingOrderResvCcnlWithBody(ctx context.Context, params *PostUapiOverseasStockV1TradingOrderResvCcnlParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUapiOverseasStockV1TradingOrderResvCcnl(ctx context.Context, params *PostUapiOverseasStockV1TradingOrderResvCcnlParams, body PostUapiOverseasStockV1TradingOrderResvCcnlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUapiOverseasStockV1TradingOrderResvList request
	GetUapiOverseasStockV1TradingOrderResvList(ctx context.Context, params *GetUapiOverseasStockV1TradingOrderResvListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUapiOverseasStockV1TradingOrderRvsecnclWithBody request with any body
	PostUapiOverseasStockV1TradingOrderRvsecnclWithBody(ctx context.Context, params *PostUapiOverseasStockV1TradingOrderRvsecnclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUapiOverseasStockV1TradingOrderRvsecncl(ctx context.Context, params *PostUapiOverseasStockV1TradingOrderRvsecnclParams, body PostUapiOverseasStockV1TradingOrderRvsecnclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostOauth2ApprovalWithBody(ctx context.Context, params *PostOauth2ApprovalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOauth2ApprovalRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOauth2Approval(ctx context.Context, params *PostOauth2ApprovalParams, body PostOauth2ApprovalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOauth2ApprovalRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOauth2RevokePWithBody(ctx context.Context, params *PostOauth2RevokePParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOauth2RevokePRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOauth2RevokeP(ctx context.Context, params *PostOauth2RevokePParams, body PostOauth2RevokePJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOauth2RevokePRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOauth2TokenPWithBody(ctx context.Context, params *PostOauth2TokenPParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOauth2TokenPRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOauth2TokenP(ctx context.Context, params *PostOauth2TokenPParams, body PostOauth2TokenPJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOauth2TokenPRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticBondV1QuotationsAvgUnit(ctx context.Context, params *GetUapiDomesticBondV1QuotationsAvgUnitParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticBondV1QuotationsAvgUnitRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticBondV1QuotationsInquireAskingPrice(ctx context.Context, params *GetUapiDomesticBondV1QuotationsInquireAskingPriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticBondV1QuotationsInquireAskingPriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticBondV1QuotationsInquireCcnl(ctx context.Context, params *GetUapiDomesticBondV1QuotationsInquireCcnlParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticBondV1QuotationsInquireCcnlRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticBondV1QuotationsInquireDailyItemchartprice(ctx context.Context, params *GetUapiDomesticBondV1QuotationsInquireDailyItemchartpriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticBondV1QuotationsInquireDailyItemchartpriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticBondV1QuotationsInquirePrice(ctx context.Context, params *GetUapiDomesticBondV1QuotationsInquirePriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticBondV1QuotationsInquirePriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticBondV1QuotationsIssueInfo(ctx context.Context, params *GetUapiDomesticBondV1QuotationsIssueInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticBondV1QuotationsIssueInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticBondV1QuotationsSearchBondInfo(ctx context.Context, params *GetUapiDomesticBondV1QuotationsSearchBondInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticBondV1QuotationsSearchBondInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiDomesticBondV1TradingBuyWithBody(ctx context.Context, params *PostUapiDomesticBondV1TradingBuyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiDomesticBondV1TradingBuyRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiDomesticBondV1TradingBuy(ctx context.Context, params *PostUapiDomesticBondV1TradingBuyParams, body PostUapiDomesticBondV1TradingBuyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiDomesticBondV1TradingBuyRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticBondV1TradingInquireBalance(ctx context.Context, params *GetUapiDomesticBondV1TradingInquireBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticBondV1TradingInquireBalanceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticBondV1TradingInquireDailyCcld(ctx context.Context, params *GetUapiDomesticBondV1TradingInquireDailyCcldParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticBondV1TradingInquireDailyCcldRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticBondV1TradingInquirePsblOrder(ctx context.Context, params *GetUapiDomesticBondV1TradingInquirePsblOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticBondV1TradingInquirePsblOrderRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticBondV1TradingInquirePsblRvsecncl(ctx context.Context, params *GetUapiDomesticBondV1TradingInquirePsblRvsecnclParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticBondV1TradingInquirePsblRvsecnclRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiDomesticBondV1TradingOrderRvsecnclWithBody(ctx context.Context, params *PostUapiDomesticBondV1TradingOrderRvsecnclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiDomesticBondV1TradingOrderRvsecnclRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiDomesticBondV1TradingOrderRvsecncl(ctx context.Context, params *PostUapiDomesticBondV1TradingOrderRvsecnclParams, body PostUapiDomesticBondV1TradingOrderRvsecnclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiDomesticBondV1TradingOrderRvsecnclRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiDomesticBondV1TradingSellWithBody(ctx context.Context, params *PostUapiDomesticBondV1TradingSellParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiDomesticBondV1TradingSellRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiDomesticBondV1TradingSell(ctx context.Context, params *PostUapiDomesticBondV1TradingSellParams, body PostUapiDomesticBondV1TradingSellJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiDomesticBondV1TradingSellRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticFutureoptionV1QuotationsDisplayBoardCallput(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsDisplayBoardCallputParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticFutureoptionV1QuotationsDisplayBoardCallputRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticFutureoptionV1QuotationsDisplayBoardFutures(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsDisplayBoardFuturesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticFutureoptionV1QuotationsDisplayBoardFuturesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticFutureoptionV1QuotationsDisplayBoardOptionList(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsDisplayBoardOptionListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticFutureoptionV1QuotationsDisplayBoardOptionListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticFutureoptionV1QuotationsDisplayBoardTop(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsDisplayBoardTopParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticFutureoptionV1QuotationsDisplayBoardTopRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticFutureoptionV1QuotationsExpPriceTrend(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsExpPriceTrendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticFutureoptionV1QuotationsExpPriceTrendRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticFutureoptionV1QuotationsInquireAskingPrice(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsInquireAskingPriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticFutureoptionV1QuotationsInquireAskingPriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticFutureoptionV1QuotationsInquireDailyFuopchartprice(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsInquireDailyFuopchartpriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticFutureoptionV1QuotationsInquireDailyFuopchartpriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticFutureoptionV1QuotationsInquirePrice(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsInquirePriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticFutureoptionV1QuotationsInquirePriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticFutureoptionV1QuotationsInquireTimeFuopchartprice(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsInquireTimeFuopchartpriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticFutureoptionV1QuotationsInquireTimeFuopchartpriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticFutureoptionV1TradingInquireBalance(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticFutureoptionV1TradingInquireBalanceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticFutureoptionV1TradingInquireBalanceSettlementPl(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireBalanceSettlementPlParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticFutureoptionV1TradingInquireBalanceSettlementPlRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticFutureoptionV1TradingInquireBalanceValuationPl(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireBalanceValuationPlParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticFutureoptionV1TradingInquireBalanceValuationPlRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticFutureoptionV1TradingInquireCcnl(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireCcnlParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticFutureoptionV1TradingInquireCcnlRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticFutureoptionV1TradingInquireCcnlBstime(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireCcnlBstimeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticFutureoptionV1TradingInquireCcnlBstimeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticFutureoptionV1TradingInquireDailyAmountFee(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireDailyAmountFeeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticFutureoptionV1TradingInquireDailyAmountFeeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticFutureoptionV1TradingInquireDeposit(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireDepositParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticFutureoptionV1TradingInquireDepositRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticFutureoptionV1TradingInquireNgtBalance(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireNgtBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticFutureoptionV1TradingInquireNgtBalanceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticFutureoptionV1TradingInquireNgtCcnl(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireNgtCcnlParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticFutureoptionV1TradingInquireNgtCcnlRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticFutureoptionV1TradingInquirePsblNgtOrder(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquirePsblNgtOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticFutureoptionV1TradingInquirePsblNgtOrderRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticFutureoptionV1TradingInquirePsblOrder(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquirePsblOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticFutureoptionV1TradingInquirePsblOrderRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticFutureoptionV1TradingNgtMarginDetail(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingNgtMarginDetailParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticFutureoptionV1TradingNgtMarginDetailRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiDomesticFutureoptionV1TradingOrderWithBody(ctx context.Context, params *PostUapiDomesticFutureoptionV1TradingOrderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiDomesticFutureoptionV1TradingOrderRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiDomesticFutureoptionV1TradingOrder(ctx context.Context, params *PostUapiDomesticFutureoptionV1TradingOrderParams, body PostUapiDomesticFutureoptionV1TradingOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiDomesticFutureoptionV1TradingOrderRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiDomesticFutureoptionV1TradingOrderRvsecnclWithBody(ctx context.Context, params *PostUapiDomesticFutureoptionV1TradingOrderRvsecnclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiDomesticFutureoptionV1TradingOrderRvsecnclRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiDomesticFutureoptionV1TradingOrderRvsecncl(ctx context.Context, params *PostUapiDomesticFutureoptionV1TradingOrderRvsecnclParams, body PostUapiDomesticFutureoptionV1TradingOrderRvsecnclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiDomesticFutureoptionV1TradingOrderRvsecnclRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1FinanceBalanceSheet(ctx context.Context, params *GetUapiDomesticStockV1FinanceBalanceSheetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1FinanceBalanceSheetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1FinanceFinancialRatio(ctx context.Context, params *GetUapiDomesticStockV1FinanceFinancialRatioParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1FinanceFinancialRatioRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1FinanceGrowthRatio(ctx context.Context, params *GetUapiDomesticStockV1FinanceGrowthRatioParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1FinanceGrowthRatioRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1FinanceIncomeStatement(ctx context.Context, params *GetUapiDomesticStockV1FinanceIncomeStatementParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1FinanceIncomeStatementRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1FinanceOtherMajorRatios(ctx context.Context, params *GetUapiDomesticStockV1FinanceOtherMajorRatiosParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1FinanceOtherMajorRatiosRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1FinanceProfitRatio(ctx context.Context, params *GetUapiDomesticStockV1FinanceProfitRatioParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1FinanceProfitRatioRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1FinanceStabilityRatio(ctx context.Context, params *GetUapiDomesticStockV1FinanceStabilityRatioParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1FinanceStabilityRatioRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1KsdinfoBonusIssue(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoBonusIssueParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1KsdinfoBonusIssueRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1KsdinfoCapDcrs(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoCapDcrsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1KsdinfoCapDcrsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1KsdinfoDividend(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoDividendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1KsdinfoDividendRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1KsdinfoListInfo(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoListInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1KsdinfoListInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1KsdinfoMergerSplit(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoMergerSplitParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1KsdinfoMergerSplitRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1KsdinfoPaidinCapin(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoPaidinCapinParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1KsdinfoPaidinCapinRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1KsdinfoPurreq(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoPurreqParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1KsdinfoPurreqRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1KsdinfoRevSplit(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoRevSplitParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1KsdinfoRevSplitRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1KsdinfoSharehldMeet(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoSharehldMeetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1KsdinfoSharehldMeetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsCaptureUplowprice(ctx context.Context, params *GetUapiDomesticStockV1QuotationsCaptureUplowpriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsCaptureUplowpriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsChkHoliday(ctx context.Context, params *GetUapiDomesticStockV1QuotationsChkHolidayParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsChkHolidayRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsCompInterest(ctx context.Context, params *GetUapiDomesticStockV1QuotationsCompInterestParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsCompInterestRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsCompProgramTradeDaily(ctx context.Context, params *GetUapiDomesticStockV1QuotationsCompProgramTradeDailyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsCompProgramTradeDailyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsCompProgramTradeToday(ctx context.Context, params *GetUapiDomesticStockV1QuotationsCompProgramTradeTodayParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsCompProgramTradeTodayRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsCreditByCompany(ctx context.Context, params *GetUapiDomesticStockV1QuotationsCreditByCompanyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsCreditByCompanyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsDailyCreditBalance(ctx context.Context, params *GetUapiDomesticStockV1QuotationsDailyCreditBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsDailyCreditBalanceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsDailyShortSale(ctx context.Context, params *GetUapiDomesticStockV1QuotationsDailyShortSaleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsDailyShortSaleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsEstimatePerform(ctx context.Context, params *GetUapiDomesticStockV1QuotationsEstimatePerformParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsEstimatePerformRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsExpClosingPrice(ctx context.Context, params *GetUapiDomesticStockV1QuotationsExpClosingPriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsExpClosingPriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsExpIndexTrend(ctx context.Context, params *GetUapiDomesticStockV1QuotationsExpIndexTrendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsExpIndexTrendRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsExpPriceTrend(ctx context.Context, params *GetUapiDomesticStockV1QuotationsExpPriceTrendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsExpPriceTrendRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsForeignInstitutionTotal(ctx context.Context, params *GetUapiDomesticStockV1QuotationsForeignInstitutionTotalParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsForeignInstitutionTotalRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsFrgnmemPchsTrend(ctx context.Context, params *GetUapiDomesticStockV1QuotationsFrgnmemPchsTrendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsFrgnmemPchsTrendRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsFrgnmemTradeEstimate(ctx context.Context, params *GetUapiDomesticStockV1QuotationsFrgnmemTradeEstimateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsFrgnmemTradeEstimateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsFrgnmemTradeTrend(ctx context.Context, params *GetUapiDomesticStockV1QuotationsFrgnmemTradeTrendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsFrgnmemTradeTrendRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsInquireAskingPriceExpCcn(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireAskingPriceExpCcnParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsInquireAskingPriceExpCcnRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsInquireCcnl(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireCcnlParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsInquireCcnlRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsInquireDailyIndexchartprice(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireDailyIndexchartpriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsInquireDailyIndexchartpriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsInquireDailyItemchartprice(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireDailyItemchartpriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsInquireDailyItemchartpriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsInquireDailyOvertimeprice(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireDailyOvertimepriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsInquireDailyOvertimepriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsInquireDailyPrice(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireDailyPriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsInquireDailyPriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsInquireDailyTradeVolume(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireDailyTradeVolumeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsInquireDailyTradeVolumeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsInquireElwPrice(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireElwPriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsInquireElwPriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsInquireIndexTickprice(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireIndexTickpriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsInquireIndexTickpriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsInquireIndexTimeprice(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireIndexTimepriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsInquireIndexTimepriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsInquireInvestor(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireInvestorParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsInquireInvestorRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsInquireInvestorDailyByMarket(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireInvestorDailyByMarketParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsInquireInvestorDailyByMarketRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsInquireInvestorTimeByMarket(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireInvestorTimeByMarketParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsInquireInvestorTimeByMarketRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsInquireMember(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireMemberParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsInquireMemberRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsInquireMemberDaily(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireMemberDailyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsInquireMemberDailyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsInquireOvertimeAskingPrice(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireOvertimeAskingPriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsInquireOvertimeAskingPriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsInquireOvertimePrice(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireOvertimePriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsInquireOvertimePriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsInquirePrice(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquirePriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsInquirePriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsInquirePrice2(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquirePrice2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsInquirePrice2Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsInquireTimeIndexchartprice(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireTimeIndexchartpriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsInquireTimeIndexchartpriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsInquireTimeItemchartprice(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireTimeItemchartpriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsInquireTimeItemchartpriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsInquireTimeItemconclusion(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireTimeItemconclusionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsInquireTimeItemconclusionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsInquireTimeOvertimeconclusion(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireTimeOvertimeconclusionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsInquireTimeOvertimeconclusionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsInquireViStatus(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireViStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsInquireViStatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsIntstockGrouplist(ctx context.Context, params *GetUapiDomesticStockV1QuotationsIntstockGrouplistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsIntstockGrouplistRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsIntstockMultprice(ctx context.Context, params *GetUapiDomesticStockV1QuotationsIntstockMultpriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsIntstockMultpriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsIntstockStocklistByGroup(ctx context.Context, params *GetUapiDomesticStockV1QuotationsIntstockStocklistByGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsIntstockStocklistByGroupRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsInvestOpbysec(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInvestOpbysecParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsInvestOpbysecRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsInvestOpinion(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInvestOpinionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsInvestOpinionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsInvestorProgramTradeToday(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInvestorProgramTradeTodayParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsInvestorProgramTradeTodayRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsInvestorTrendEstimate(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInvestorTrendEstimateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsInvestorTrendEstimateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsLendableByCompany(ctx context.Context, params *GetUapiDomesticStockV1QuotationsLendableByCompanyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsLendableByCompanyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsMktfunds(ctx context.Context, params *GetUapiDomesticStockV1QuotationsMktfundsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsMktfundsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsNewsTitle(ctx context.Context, params *GetUapiDomesticStockV1QuotationsNewsTitleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsNewsTitleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsPbarTratio(ctx context.Context, params *GetUapiDomesticStockV1QuotationsPbarTratioParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsPbarTratioRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsProgramTradeByStock(ctx context.Context, params *GetUapiDomesticStockV1QuotationsProgramTradeByStockParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsProgramTradeByStockRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsProgramTradeByStockDaily(ctx context.Context, params *GetUapiDomesticStockV1QuotationsProgramTradeByStockDailyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsProgramTradeByStockDailyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsPsearchResult(ctx context.Context, params *GetUapiDomesticStockV1QuotationsPsearchResultParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsPsearchResultRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsPsearchTitle(ctx context.Context, params *GetUapiDomesticStockV1QuotationsPsearchTitleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsPsearchTitleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsSearchInfo(ctx context.Context, params *GetUapiDomesticStockV1QuotationsSearchInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsSearchInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsSearchStockInfo(ctx context.Context, params *GetUapiDomesticStockV1QuotationsSearchStockInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsSearchStockInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsTradprtByamt(ctx context.Context, params *GetUapiDomesticStockV1QuotationsTradprtByamtParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsTradprtByamtRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1QuotationsVolumeRank(ctx context.Context, params *GetUapiDomesticStockV1QuotationsVolumeRankParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1QuotationsVolumeRankRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1RankingAfterHourBalance(ctx context.Context, params *GetUapiDomesticStockV1RankingAfterHourBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1RankingAfterHourBalanceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1RankingBulkTransNum(ctx context.Context, params *GetUapiDomesticStockV1RankingBulkTransNumParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1RankingBulkTransNumRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1RankingCreditBalance(ctx context.Context, params *GetUapiDomesticStockV1RankingCreditBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1RankingCreditBalanceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1RankingDisparity(ctx context.Context, params *GetUapiDomesticStockV1RankingDisparityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1RankingDisparityRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1RankingDividendRate(ctx context.Context, params *GetUapiDomesticStockV1RankingDividendRateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1RankingDividendRateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1RankingExpTransUpdown(ctx context.Context, params *GetUapiDomesticStockV1RankingExpTransUpdownParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1RankingExpTransUpdownRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1RankingFinanceRatio(ctx context.Context, params *GetUapiDomesticStockV1RankingFinanceRatioParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1RankingFinanceRatioRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1RankingFluctuation(ctx context.Context, params *GetUapiDomesticStockV1RankingFluctuationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1RankingFluctuationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1RankingMarketCap(ctx context.Context, params *GetUapiDomesticStockV1RankingMarketCapParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1RankingMarketCapRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1RankingMarketValue(ctx context.Context, params *GetUapiDomesticStockV1RankingMarketValueParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1RankingMarketValueRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1RankingNearNewHighlow(ctx context.Context, params *GetUapiDomesticStockV1RankingNearNewHighlowParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1RankingNearNewHighlowRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1RankingOvertimeExpTransFluct(ctx context.Context, params *GetUapiDomesticStockV1RankingOvertimeExpTransFluctParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1RankingOvertimeExpTransFluctRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1RankingOvertimeFluctuation(ctx context.Context, params *GetUapiDomesticStockV1RankingOvertimeFluctuationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1RankingOvertimeFluctuationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1RankingOvertimeVolume(ctx context.Context, params *GetUapiDomesticStockV1RankingOvertimeVolumeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1RankingOvertimeVolumeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1RankingPreferDisparateRatio(ctx context.Context, params *GetUapiDomesticStockV1RankingPreferDisparateRatioParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1RankingPreferDisparateRatioRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1RankingProfitAssetIndex(ctx context.Context, params *GetUapiDomesticStockV1RankingProfitAssetIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1RankingProfitAssetIndexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1RankingQuoteBalance(ctx context.Context, params *GetUapiDomesticStockV1RankingQuoteBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1RankingQuoteBalanceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1RankingShortSale(ctx context.Context, params *GetUapiDomesticStockV1RankingShortSaleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1RankingShortSaleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1RankingTopInterestStock(ctx context.Context, params *GetUapiDomesticStockV1RankingTopInterestStockParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1RankingTopInterestStockRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1RankingTradedByCompany(ctx context.Context, params *GetUapiDomesticStockV1RankingTradedByCompanyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1RankingTradedByCompanyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1RankingVolumePower(ctx context.Context, params *GetUapiDomesticStockV1RankingVolumePowerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1RankingVolumePowerRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1TradingInquireAccountBalance(ctx context.Context, params *GetUapiDomesticStockV1TradingInquireAccountBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1TradingInquireAccountBalanceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1TradingInquireBalance(ctx context.Context, params *GetUapiDomesticStockV1TradingInquireBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1TradingInquireBalanceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1TradingInquireBalanceRlzPl(ctx context.Context, params *GetUapiDomesticStockV1TradingInquireBalanceRlzPlParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1TradingInquireBalanceRlzPlRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1TradingInquireCreditPsamount(ctx context.Context, params *GetUapiDomesticStockV1TradingInquireCreditPsamountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1TradingInquireCreditPsamountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1TradingInquireDailyCcld(ctx context.Context, params *GetUapiDomesticStockV1TradingInquireDailyCcldParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1TradingInquireDailyCcldRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1TradingInquirePeriodProfit(ctx context.Context, params *GetUapiDomesticStockV1TradingInquirePeriodProfitParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1TradingInquirePeriodProfitRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1TradingInquirePeriodTradeProfit(ctx context.Context, params *GetUapiDomesticStockV1TradingInquirePeriodTradeProfitParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1TradingInquirePeriodTradeProfitRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1TradingInquirePsblOrder(ctx context.Context, params *GetUapiDomesticStockV1TradingInquirePsblOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1TradingInquirePsblOrderRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1TradingInquirePsblRvsecncl(ctx context.Context, params *GetUapiDomesticStockV1TradingInquirePsblRvsecnclParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1TradingInquirePsblRvsecnclRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1TradingInquirePsblSell(ctx context.Context, params *GetUapiDomesticStockV1TradingInquirePsblSellParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1TradingInquirePsblSellRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiDomesticStockV1TradingOrderCashWithBody(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderCashParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiDomesticStockV1TradingOrderCashRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiDomesticStockV1TradingOrderCash(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderCashParams, body PostUapiDomesticStockV1TradingOrderCashJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiDomesticStockV1TradingOrderCashRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiDomesticStockV1TradingOrderCreditWithBody(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderCreditParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiDomesticStockV1TradingOrderCreditRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiDomesticStockV1TradingOrderCredit(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderCreditParams, body PostUapiDomesticStockV1TradingOrderCreditJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiDomesticStockV1TradingOrderCreditRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiDomesticStockV1TradingOrderResvWithBody(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderResvParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiDomesticStockV1TradingOrderResvRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiDomesticStockV1TradingOrderResv(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderResvParams, body PostUapiDomesticStockV1TradingOrderResvJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiDomesticStockV1TradingOrderResvRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1TradingOrderResvCcnl(ctx context.Context, params *GetUapiDomesticStockV1TradingOrderResvCcnlParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1TradingOrderResvCcnlRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiDomesticStockV1TradingOrderResvRvsecnclWithBody(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderResvRvsecnclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiDomesticStockV1TradingOrderResvRvsecnclRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiDomesticStockV1TradingOrderResvRvsecncl(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderResvRvsecnclParams, body PostUapiDomesticStockV1TradingOrderResvRvsecnclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiDomesticStockV1TradingOrderResvRvsecnclRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiDomesticStockV1TradingOrderRvsecnclWithBody(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderRvsecnclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiDomesticStockV1TradingOrderRvsecnclRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiDomesticStockV1TradingOrderRvsecncl(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderRvsecnclParams, body PostUapiDomesticStockV1TradingOrderRvsecnclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiDomesticStockV1TradingOrderRvsecnclRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1TradingPensionInquireBalance(ctx context.Context, params *GetUapiDomesticStockV1TradingPensionInquireBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1TradingPensionInquireBalanceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1TradingPensionInquireDailyCcld(ctx context.Context, params *GetUapiDomesticStockV1TradingPensionInquireDailyCcldParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1TradingPensionInquireDailyCcldRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1TradingPensionInquireDeposit(ctx context.Context, params *GetUapiDomesticStockV1TradingPensionInquireDepositParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1TradingPensionInquireDepositRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1TradingPensionInquirePresentBalance(ctx context.Context, params *GetUapiDomesticStockV1TradingPensionInquirePresentBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1TradingPensionInquirePresentBalanceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiDomesticStockV1TradingPensionInquirePsblOrder(ctx context.Context, params *GetUapiDomesticStockV1TradingPensionInquirePsblOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiDomesticStockV1TradingPensionInquirePsblOrderRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiElwV1QuotationsCompareStocks(ctx context.Context, params *GetUapiElwV1QuotationsCompareStocksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiElwV1QuotationsCompareStocksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiElwV1QuotationsCondSearch(ctx context.Context, params *GetUapiElwV1QuotationsCondSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiElwV1QuotationsCondSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiElwV1QuotationsExpirationStocks(ctx context.Context, params *GetUapiElwV1QuotationsExpirationStocksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiElwV1QuotationsExpirationStocksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiElwV1QuotationsIndicatorTrendCcnl(ctx context.Context, params *GetUapiElwV1QuotationsIndicatorTrendCcnlParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiElwV1QuotationsIndicatorTrendCcnlRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiElwV1QuotationsIndicatorTrendDaily(ctx context.Context, params *GetUapiElwV1QuotationsIndicatorTrendDailyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiElwV1QuotationsIndicatorTrendDailyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiElwV1QuotationsIndicatorTrendMinute(ctx context.Context, params *GetUapiElwV1QuotationsIndicatorTrendMinuteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiElwV1QuotationsIndicatorTrendMinuteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiElwV1QuotationsLpTradeTrend(ctx context.Context, params *GetUapiElwV1QuotationsLpTradeTrendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiElwV1QuotationsLpTradeTrendRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiElwV1QuotationsNewlyListed(ctx context.Context, params *GetUapiElwV1QuotationsNewlyListedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiElwV1QuotationsNewlyListedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiElwV1QuotationsSensitivityTrendCcnl(ctx context.Context, params *GetUapiElwV1QuotationsSensitivityTrendCcnlParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiElwV1QuotationsSensitivityTrendCcnlRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiElwV1QuotationsSensitivityTrendDaily(ctx context.Context, params *GetUapiElwV1QuotationsSensitivityTrendDailyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiElwV1QuotationsSensitivityTrendDailyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiElwV1QuotationsUdrlAssetList(ctx context.Context, params *GetUapiElwV1QuotationsUdrlAssetListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiElwV1QuotationsUdrlAssetListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiElwV1QuotationsVolatilityTrendCcnl(ctx context.Context, params *GetUapiElwV1QuotationsVolatilityTrendCcnlParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiElwV1QuotationsVolatilityTrendCcnlRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiElwV1QuotationsVolatilityTrendDaily(ctx context.Context, params *GetUapiElwV1QuotationsVolatilityTrendDailyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiElwV1QuotationsVolatilityTrendDailyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiElwV1QuotationsVolatilityTrendMinute(ctx context.Context, params *GetUapiElwV1QuotationsVolatilityTrendMinuteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiElwV1QuotationsVolatilityTrendMinuteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiElwV1QuotationsVolatilityTrendTick(ctx context.Context, params *GetUapiElwV1QuotationsVolatilityTrendTickParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiElwV1QuotationsVolatilityTrendTickRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiElwV1RankingUpdownRate(ctx context.Context, params *GetUapiElwV1RankingUpdownRateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiElwV1RankingUpdownRateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiEtfetnV1QuotationsInquireComponentStockPrice(ctx context.Context, params *GetUapiEtfetnV1QuotationsInquireComponentStockPriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiEtfetnV1QuotationsInquireComponentStockPriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiEtfetnV1QuotationsInquirePrice(ctx context.Context, params *GetUapiEtfetnV1QuotationsInquirePriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiEtfetnV1QuotationsInquirePriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiEtfetnV1QuotationsNavComparisonDailyTrend(ctx context.Context, params *GetUapiEtfetnV1QuotationsNavComparisonDailyTrendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiEtfetnV1QuotationsNavComparisonDailyTrendRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiEtfetnV1QuotationsNavComparisonTimeTrend(ctx context.Context, params *GetUapiEtfetnV1QuotationsNavComparisonTimeTrendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiEtfetnV1QuotationsNavComparisonTimeTrendRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiEtfetnV1QuotationsNavComparisonTrend(ctx context.Context, params *GetUapiEtfetnV1QuotationsNavComparisonTrendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiEtfetnV1QuotationsNavComparisonTrendRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiHashkeyWithBody(ctx context.Context, params *PostUapiHashkeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiHashkeyRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiHashkey(ctx context.Context, params *PostUapiHashkeyParams, body PostUapiHashkeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiHashkeyRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasFutureoptionV1QuotationsDailyCcnl(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsDailyCcnlParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasFutureoptionV1QuotationsDailyCcnlRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasFutureoptionV1QuotationsInquireAskingPrice(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsInquireAskingPriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasFutureoptionV1QuotationsInquireAskingPriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasFutureoptionV1QuotationsInquirePrice(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsInquirePriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasFutureoptionV1QuotationsInquirePriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasFutureoptionV1QuotationsInquireTimeFuturechartprice(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsInquireTimeFuturechartpriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasFutureoptionV1QuotationsInquireTimeFuturechartpriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasFutureoptionV1QuotationsInvestorUnpdTrend(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsInvestorUnpdTrendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasFutureoptionV1QuotationsInvestorUnpdTrendRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasFutureoptionV1QuotationsMarketTime(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsMarketTimeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasFutureoptionV1QuotationsMarketTimeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasFutureoptionV1QuotationsMonthlyCcnl(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsMonthlyCcnlParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasFutureoptionV1QuotationsMonthlyCcnlRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasFutureoptionV1QuotationsOptAskingPrice(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsOptAskingPriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasFutureoptionV1QuotationsOptAskingPriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasFutureoptionV1QuotationsSearchContractDetail(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsSearchContractDetailParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasFutureoptionV1QuotationsSearchContractDetailRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasFutureoptionV1QuotationsStockDetail(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsStockDetailParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasFutureoptionV1QuotationsStockDetailRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasFutureoptionV1QuotationsTickCcnl(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsTickCcnlParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasFutureoptionV1QuotationsTickCcnlRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasFutureoptionV1QuotationsWeeklyCcnl(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsWeeklyCcnlParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasFutureoptionV1QuotationsWeeklyCcnlRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasFutureoptionV1TradingInquireCcld(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingInquireCcldParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasFutureoptionV1TradingInquireCcldRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasFutureoptionV1TradingInquireDailyCcld(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingInquireDailyCcldParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasFutureoptionV1TradingInquireDailyCcldRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasFutureoptionV1TradingInquireDailyOrder(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingInquireDailyOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasFutureoptionV1TradingInquireDailyOrderRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasFutureoptionV1TradingInquireDeposit(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingInquireDepositParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasFutureoptionV1TradingInquireDepositRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasFutureoptionV1TradingInquirePeriodCcld(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingInquirePeriodCcldParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasFutureoptionV1TradingInquirePeriodCcldRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasFutureoptionV1TradingInquirePeriodTrans(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingInquirePeriodTransParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasFutureoptionV1TradingInquirePeriodTransRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasFutureoptionV1TradingInquirePsamount(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingInquirePsamountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasFutureoptionV1TradingInquirePsamountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasFutureoptionV1TradingInquireUnpd(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingInquireUnpdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasFutureoptionV1TradingInquireUnpdRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasFutureoptionV1TradingMarginDetail(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingMarginDetailParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasFutureoptionV1TradingMarginDetailRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiOverseasFutureoptionV1TradingOrderWithBody(ctx context.Context, params *PostUapiOverseasFutureoptionV1TradingOrderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiOverseasFutureoptionV1TradingOrderRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiOverseasFutureoptionV1TradingOrder(ctx context.Context, params *PostUapiOverseasFutureoptionV1TradingOrderParams, body PostUapiOverseasFutureoptionV1TradingOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiOverseasFutureoptionV1TradingOrderRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiOverseasFutureoptionV1TradingOrderRvsecnclWithBody(ctx context.Context, params *PostUapiOverseasFutureoptionV1TradingOrderRvsecnclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiOverseasFutureoptionV1TradingOrderRvsecnclRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiOverseasFutureoptionV1TradingOrderRvsecncl(ctx context.Context, params *PostUapiOverseasFutureoptionV1TradingOrderRvsecnclParams, body PostUapiOverseasFutureoptionV1TradingOrderRvsecnclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiOverseasFutureoptionV1TradingOrderRvsecnclRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasPriceV1QuotationsBrknewsTitle(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsBrknewsTitleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasPriceV1QuotationsBrknewsTitleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasPriceV1QuotationsColableByCompany(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsColableByCompanyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasPriceV1QuotationsColableByCompanyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasPriceV1QuotationsDailyprice(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsDailypriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasPriceV1QuotationsDailypriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasPriceV1QuotationsInquireAskingPrice(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsInquireAskingPriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasPriceV1QuotationsInquireAskingPriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasPriceV1QuotationsInquireDailyChartprice(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsInquireDailyChartpriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasPriceV1QuotationsInquireDailyChartpriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasPriceV1QuotationsInquireSearch(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsInquireSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasPriceV1QuotationsInquireSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasPriceV1QuotationsInquireTimeIndexchartprice(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsInquireTimeIndexchartpriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasPriceV1QuotationsInquireTimeIndexchartpriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasPriceV1QuotationsInquireTimeItemchartprice(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsInquireTimeItemchartpriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasPriceV1QuotationsInquireTimeItemchartpriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasPriceV1QuotationsNewsTitle(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsNewsTitleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasPriceV1QuotationsNewsTitleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasPriceV1QuotationsPeriodRights(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsPeriodRightsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasPriceV1QuotationsPeriodRightsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasPriceV1QuotationsPrice(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsPriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasPriceV1QuotationsPriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasPriceV1QuotationsPriceDetail(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsPriceDetailParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasPriceV1QuotationsPriceDetailRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasPriceV1QuotationsRightsByIce(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsRightsByIceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasPriceV1QuotationsRightsByIceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasPriceV1QuotationsSearchInfo(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsSearchInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasPriceV1QuotationsSearchInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasStockV1QuotationsCountriesHoliday(ctx context.Context, params *GetUapiOverseasStockV1QuotationsCountriesHolidayParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasStockV1QuotationsCountriesHolidayRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiOverseasStockV1TradingDaytimeOrderWithBody(ctx context.Context, params *PostUapiOverseasStockV1TradingDaytimeOrderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiOverseasStockV1TradingDaytimeOrderRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiOverseasStockV1TradingDaytimeOrder(ctx context.Context, params *PostUapiOverseasStockV1TradingDaytimeOrderParams, body PostUapiOverseasStockV1TradingDaytimeOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiOverseasStockV1TradingDaytimeOrderRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclWithBody(ctx context.Context, params *PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiOverseasStockV1TradingDaytimeOrderRvsecnclRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiOverseasStockV1TradingDaytimeOrderRvsecncl(ctx context.Context, params *PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclParams, body PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiOverseasStockV1TradingDaytimeOrderRvsecnclRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasStockV1TradingForeignMargin(ctx context.Context, params *GetUapiOverseasStockV1TradingForeignMarginParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasStockV1TradingForeignMarginRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasStockV1TradingInquireBalance(ctx context.Context, params *GetUapiOverseasStockV1TradingInquireBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasStockV1TradingInquireBalanceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasStockV1TradingInquireCcnl(ctx context.Context, params *GetUapiOverseasStockV1TradingInquireCcnlParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasStockV1TradingInquireCcnlRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasStockV1TradingInquireNccs(ctx context.Context, params *GetUapiOverseasStockV1TradingInquireNccsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasStockV1TradingInquireNccsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasStockV1TradingInquirePaymtStdrBalance(ctx context.Context, params *GetUapiOverseasStockV1TradingInquirePaymtStdrBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasStockV1TradingInquirePaymtStdrBalanceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasStockV1TradingInquirePeriodProfit(ctx context.Context, params *GetUapiOverseasStockV1TradingInquirePeriodProfitParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasStockV1TradingInquirePeriodProfitRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasStockV1TradingInquirePeriodTrans(ctx context.Context, params *GetUapiOverseasStockV1TradingInquirePeriodTransParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasStockV1TradingInquirePeriodTransRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasStockV1TradingInquirePresentBalance(ctx context.Context, params *GetUapiOverseasStockV1TradingInquirePresentBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasStockV1TradingInquirePresentBalanceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasStockV1TradingInquirePsamount(ctx context.Context, params *GetUapiOverseasStockV1TradingInquirePsamountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasStockV1TradingInquirePsamountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiOverseasStockV1TradingOrderWithBody(ctx context.Context, params *PostUapiOverseasStockV1TradingOrderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiOverseasStockV1TradingOrderRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiOverseasStockV1TradingOrder(ctx context.Context, params *PostUapiOverseasStockV1TradingOrderParams, body PostUapiOverseasStockV1TradingOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiOverseasStockV1TradingOrderRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiOverseasStockV1TradingOrderResvWithBody(ctx context.Context, params *PostUapiOverseasStockV1TradingOrderResvParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiOverseasStockV1TradingOrderResvRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiOverseasStockV1TradingOrderResv(ctx context.Context, params *PostUapiOverseasStockV1TradingOrderResvParams, body PostUapiOverseasStockV1TradingOrderResvJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiOverseasStockV1TradingOrderResvRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiOverseasStockV1TradingOrderResvCcnlWithBody(ctx context.Context, params *PostUapiOverseasStockV1TradingOrderResvCcnlParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiOverseasStockV1TradingOrderResvCcnlRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiOverseasStockV1TradingOrderResvCcnl(ctx context.Context, params *PostUapiOverseasStockV1TradingOrderResvCcnlParams, body PostUapiOverseasStockV1TradingOrderResvCcnlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiOverseasStockV1TradingOrderResvCcnlRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUapiOverseasStockV1TradingOrderResvList(ctx context.Context, params *GetUapiOverseasStockV1TradingOrderResvListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUapiOverseasStockV1TradingOrderResvListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiOverseasStockV1TradingOrderRvsecnclWithBody(ctx context.Context, params *PostUapiOverseasStockV1TradingOrderRvsecnclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiOverseasStockV1TradingOrderRvsecnclRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUapiOverseasStockV1TradingOrderRvsecncl(ctx context.Context, params *PostUapiOverseasStockV1TradingOrderRvsecnclParams, body PostUapiOverseasStockV1TradingOrderRvsecnclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUapiOverseasStockV1TradingOrderRvsecnclRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostOauth2ApprovalRequest calls the generic PostOauth2Approval builder with application/json body
func NewPostOauth2ApprovalRequest(server string, params *PostOauth2ApprovalParams, body PostOauth2ApprovalJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOauth2ApprovalRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostOauth2ApprovalRequestWithBody generates requests for PostOauth2Approval with any type of body
func NewPostOauth2ApprovalRequestWithBody(server string, params *PostOauth2ApprovalParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth2/Approval")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

	}

	return req, nil
}

// NewPostOauth2RevokePRequest calls the generic PostOauth2RevokeP builder with application/json body
func NewPostOauth2RevokePRequest(server string, params *PostOauth2RevokePParams, body PostOauth2RevokePJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOauth2RevokePRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostOauth2RevokePRequestWithBody generates requests for PostOauth2RevokeP with any type of body
func NewPostOauth2RevokePRequestWithBody(server string, params *PostOauth2RevokePParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth2/revokeP")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

	}

	return req, nil
}

// NewPostOauth2TokenPRequest calls the generic PostOauth2TokenP builder with application/json body
func NewPostOauth2TokenPRequest(server string, params *PostOauth2TokenPParams, body PostOauth2TokenPJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOauth2TokenPRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostOauth2TokenPRequestWithBody generates requests for PostOauth2TokenP with any type of body
func NewPostOauth2TokenPRequestWithBody(server string, params *PostOauth2TokenPParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth2/tokenP")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

	}

	return req, nil
}

// NewGetUapiDomesticBondV1QuotationsAvgUnitRequest generates requests for GetUapiDomesticBondV1QuotationsAvgUnit
func NewGetUapiDomesticBondV1QuotationsAvgUnitRequest(server string, params *GetUapiDomesticBondV1QuotationsAvgUnitParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-bond/v1/quotations/avg-unit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.INQRSTRTDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_STRT_DT", runtime.ParamLocationQuery, *params.INQRSTRTDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRENDDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_END_DT", runtime.ParamLocationQuery, *params.INQRENDDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PDNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PDNO", runtime.ParamLocationQuery, *params.PDNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PRDTTYPECD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PRDT_TYPE_CD", runtime.ParamLocationQuery, *params.PRDTTYPECD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VRFCKINDCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "VRFC_KIND_CD", runtime.ParamLocationQuery, *params.VRFCKINDCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK30 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK30", runtime.ParamLocationQuery, *params.CTXAREANK30); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK100 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK100", runtime.ParamLocationQuery, *params.CTXAREAFK100); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

		if params.TrCont != nil {
			var headerParam6 string

			headerParam6, err = runtime.StyleParamWithLocation("simple", false, "tr_cont", runtime.ParamLocationHeader, *params.TrCont)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_cont", headerParam6)
		}

	}

	return req, nil
}

// NewGetUapiDomesticBondV1QuotationsInquireAskingPriceRequest generates requests for GetUapiDomesticBondV1QuotationsInquireAskingPrice
func NewGetUapiDomesticBondV1QuotationsInquireAskingPriceRequest(server string, params *GetUapiDomesticBondV1QuotationsInquireAskingPriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-bond/v1/quotations/inquire-asking-price")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

		if params.TrCont != nil {
			var headerParam6 string

			headerParam6, err = runtime.StyleParamWithLocation("simple", false, "tr_cont", runtime.ParamLocationHeader, *params.TrCont)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_cont", headerParam6)
		}

	}

	return req, nil
}

// NewGetUapiDomesticBondV1QuotationsInquireCcnlRequest generates requests for GetUapiDomesticBondV1QuotationsInquireCcnl
func NewGetUapiDomesticBondV1QuotationsInquireCcnlRequest(server string, params *GetUapiDomesticBondV1QuotationsInquireCcnlParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-bond/v1/quotations/inquire-ccnl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticBondV1QuotationsInquireDailyItemchartpriceRequest generates requests for GetUapiDomesticBondV1QuotationsInquireDailyItemchartprice
func NewGetUapiDomesticBondV1QuotationsInquireDailyItemchartpriceRequest(server string, params *GetUapiDomesticBondV1QuotationsInquireDailyItemchartpriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-bond/v1/quotations/inquire-daily-itemchartprice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

		if params.TrCont != nil {
			var headerParam6 string

			headerParam6, err = runtime.StyleParamWithLocation("simple", false, "tr_cont", runtime.ParamLocationHeader, *params.TrCont)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_cont", headerParam6)
		}

	}

	return req, nil
}

// NewGetUapiDomesticBondV1QuotationsInquirePriceRequest generates requests for GetUapiDomesticBondV1QuotationsInquirePrice
func NewGetUapiDomesticBondV1QuotationsInquirePriceRequest(server string, params *GetUapiDomesticBondV1QuotationsInquirePriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-bond/v1/quotations/inquire-price")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticBondV1QuotationsIssueInfoRequest generates requests for GetUapiDomesticBondV1QuotationsIssueInfo
func NewGetUapiDomesticBondV1QuotationsIssueInfoRequest(server string, params *GetUapiDomesticBondV1QuotationsIssueInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-bond/v1/quotations/issue-info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PDNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PDNO", runtime.ParamLocationQuery, *params.PDNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PRDTTYPECD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PRDT_TYPE_CD", runtime.ParamLocationQuery, *params.PRDTTYPECD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticBondV1QuotationsSearchBondInfoRequest generates requests for GetUapiDomesticBondV1QuotationsSearchBondInfo
func NewGetUapiDomesticBondV1QuotationsSearchBondInfoRequest(server string, params *GetUapiDomesticBondV1QuotationsSearchBondInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-bond/v1/quotations/search-bond-info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PDNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PDNO", runtime.ParamLocationQuery, *params.PDNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PRDTTYPECD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PRDT_TYPE_CD", runtime.ParamLocationQuery, *params.PRDTTYPECD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

		if params.TrCont != nil {
			var headerParam6 string

			headerParam6, err = runtime.StyleParamWithLocation("simple", false, "tr_cont", runtime.ParamLocationHeader, *params.TrCont)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_cont", headerParam6)
		}

	}

	return req, nil
}

// NewPostUapiDomesticBondV1TradingBuyRequest calls the generic PostUapiDomesticBondV1TradingBuy builder with application/json body
func NewPostUapiDomesticBondV1TradingBuyRequest(server string, params *PostUapiDomesticBondV1TradingBuyParams, body PostUapiDomesticBondV1TradingBuyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUapiDomesticBondV1TradingBuyRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostUapiDomesticBondV1TradingBuyRequestWithBody generates requests for PostUapiDomesticBondV1TradingBuy with any type of body
func NewPostUapiDomesticBondV1TradingBuyRequestWithBody(server string, params *PostUapiDomesticBondV1TradingBuyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-bond/v1/trading/buy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticBondV1TradingInquireBalanceRequest generates requests for GetUapiDomesticBondV1TradingInquireBalance
func NewGetUapiDomesticBondV1TradingInquireBalanceRequest(server string, params *GetUapiDomesticBondV1TradingInquireBalanceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-bond/v1/trading/inquire-balance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRCNDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_CNDT", runtime.ParamLocationQuery, *params.INQRCNDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PDNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PDNO", runtime.ParamLocationQuery, *params.PDNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BUYDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "BUY_DT", runtime.ParamLocationQuery, *params.BUYDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK200", runtime.ParamLocationQuery, *params.CTXAREAFK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK200", runtime.ParamLocationQuery, *params.CTXAREANK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

		if params.TrCont != nil {
			var headerParam6 string

			headerParam6, err = runtime.StyleParamWithLocation("simple", false, "tr_cont", runtime.ParamLocationHeader, *params.TrCont)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_cont", headerParam6)
		}

	}

	return req, nil
}

// NewGetUapiDomesticBondV1TradingInquireDailyCcldRequest generates requests for GetUapiDomesticBondV1TradingInquireDailyCcld
func NewGetUapiDomesticBondV1TradingInquireDailyCcldRequest(server string, params *GetUapiDomesticBondV1TradingInquireDailyCcldParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-bond/v1/trading/inquire-daily-ccld")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRSTRTDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_STRT_DT", runtime.ParamLocationQuery, *params.INQRSTRTDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRENDDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_END_DT", runtime.ParamLocationQuery, *params.INQRENDDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SLLBUYDVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SLL_BUY_DVSN_CD", runtime.ParamLocationQuery, *params.SLLBUYDVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SORTSQNDVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SORT_SQN_DVSN", runtime.ParamLocationQuery, *params.SORTSQNDVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PDNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PDNO", runtime.ParamLocationQuery, *params.PDNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NCCSYN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NCCS_YN", runtime.ParamLocationQuery, *params.NCCSYN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK200", runtime.ParamLocationQuery, *params.CTXAREAFK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK200", runtime.ParamLocationQuery, *params.CTXAREANK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

		if params.TrCont != nil {
			var headerParam6 string

			headerParam6, err = runtime.StyleParamWithLocation("simple", false, "tr_cont", runtime.ParamLocationHeader, *params.TrCont)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_cont", headerParam6)
		}

	}

	return req, nil
}

// NewGetUapiDomesticBondV1TradingInquirePsblOrderRequest generates requests for GetUapiDomesticBondV1TradingInquirePsblOrder
func NewGetUapiDomesticBondV1TradingInquirePsblOrderRequest(server string, params *GetUapiDomesticBondV1TradingInquirePsblOrderParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-bond/v1/trading/inquire-psbl-order")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PDNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PDNO", runtime.ParamLocationQuery, *params.PDNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BONDORDUNPR != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "BOND_ORD_UNPR", runtime.ParamLocationQuery, *params.BONDORDUNPR); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticBondV1TradingInquirePsblRvsecnclRequest generates requests for GetUapiDomesticBondV1TradingInquirePsblRvsecncl
func NewGetUapiDomesticBondV1TradingInquirePsblRvsecnclRequest(server string, params *GetUapiDomesticBondV1TradingInquirePsblRvsecnclParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-bond/v1/trading/inquire-psbl-rvsecncl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ORDDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ORD_DT", runtime.ParamLocationQuery, *params.ORDDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ODNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ODNO", runtime.ParamLocationQuery, *params.ODNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK200", runtime.ParamLocationQuery, *params.CTXAREAFK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK200", runtime.ParamLocationQuery, *params.CTXAREANK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

		if params.TrCont != nil {
			var headerParam6 string

			headerParam6, err = runtime.StyleParamWithLocation("simple", false, "tr_cont", runtime.ParamLocationHeader, *params.TrCont)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_cont", headerParam6)
		}

	}

	return req, nil
}

// NewPostUapiDomesticBondV1TradingOrderRvsecnclRequest calls the generic PostUapiDomesticBondV1TradingOrderRvsecncl builder with application/json body
func NewPostUapiDomesticBondV1TradingOrderRvsecnclRequest(server string, params *PostUapiDomesticBondV1TradingOrderRvsecnclParams, body PostUapiDomesticBondV1TradingOrderRvsecnclJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUapiDomesticBondV1TradingOrderRvsecnclRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostUapiDomesticBondV1TradingOrderRvsecnclRequestWithBody generates requests for PostUapiDomesticBondV1TradingOrderRvsecncl with any type of body
func NewPostUapiDomesticBondV1TradingOrderRvsecnclRequestWithBody(server string, params *PostUapiDomesticBondV1TradingOrderRvsecnclParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-bond/v1/trading/order-rvsecncl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewPostUapiDomesticBondV1TradingSellRequest calls the generic PostUapiDomesticBondV1TradingSell builder with application/json body
func NewPostUapiDomesticBondV1TradingSellRequest(server string, params *PostUapiDomesticBondV1TradingSellParams, body PostUapiDomesticBondV1TradingSellJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUapiDomesticBondV1TradingSellRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostUapiDomesticBondV1TradingSellRequestWithBody generates requests for PostUapiDomesticBondV1TradingSell with any type of body
func NewPostUapiDomesticBondV1TradingSellRequestWithBody(server string, params *PostUapiDomesticBondV1TradingSellParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-bond/v1/trading/sell")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticFutureoptionV1QuotationsDisplayBoardCallputRequest generates requests for GetUapiDomesticFutureoptionV1QuotationsDisplayBoardCallput
func NewGetUapiDomesticFutureoptionV1QuotationsDisplayBoardCallputRequest(server string, params *GetUapiDomesticFutureoptionV1QuotationsDisplayBoardCallputParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-futureoption/v1/quotations/display-board-callput")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidCondScrDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_scr_div_code", runtime.ParamLocationQuery, *params.FidCondScrDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidMrktClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_mrkt_cls_code", runtime.ParamLocationQuery, *params.FidMrktClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidMtrtCnt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_mtrt_cnt", runtime.ParamLocationQuery, *params.FidMtrtCnt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidCondMrktClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_cls_code", runtime.ParamLocationQuery, *params.FidCondMrktClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidMrktClsCode1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_mrkt_cls_code1", runtime.ParamLocationQuery, *params.FidMrktClsCode1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticFutureoptionV1QuotationsDisplayBoardFuturesRequest generates requests for GetUapiDomesticFutureoptionV1QuotationsDisplayBoardFutures
func NewGetUapiDomesticFutureoptionV1QuotationsDisplayBoardFuturesRequest(server string, params *GetUapiDomesticFutureoptionV1QuotationsDisplayBoardFuturesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-futureoption/v1/quotations/display-board-futures")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDSCRDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_SCR_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDSCRDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_CLS_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticFutureoptionV1QuotationsDisplayBoardOptionListRequest generates requests for GetUapiDomesticFutureoptionV1QuotationsDisplayBoardOptionList
func NewGetUapiDomesticFutureoptionV1QuotationsDisplayBoardOptionListRequest(server string, params *GetUapiDomesticFutureoptionV1QuotationsDisplayBoardOptionListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-futureoption/v1/quotations/display-board-option-list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondScrDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_scr_div_code", runtime.ParamLocationQuery, *params.FidCondScrDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidCondMrktClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_cls_code", runtime.ParamLocationQuery, *params.FidCondMrktClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticFutureoptionV1QuotationsDisplayBoardTopRequest generates requests for GetUapiDomesticFutureoptionV1QuotationsDisplayBoardTop
func NewGetUapiDomesticFutureoptionV1QuotationsDisplayBoardTopRequest(server string, params *GetUapiDomesticFutureoptionV1QuotationsDisplayBoardTopParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-futureoption/v1/quotations/display-board-top")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidCondMrktDivCode1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code1", runtime.ParamLocationQuery, *params.FidCondMrktDivCode1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidCondScrDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_scr_div_code", runtime.ParamLocationQuery, *params.FidCondScrDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidMtrtCnt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_mtrt_cnt", runtime.ParamLocationQuery, *params.FidMtrtCnt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidCondMrktClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_cls_code", runtime.ParamLocationQuery, *params.FidCondMrktClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticFutureoptionV1QuotationsExpPriceTrendRequest generates requests for GetUapiDomesticFutureoptionV1QuotationsExpPriceTrend
func NewGetUapiDomesticFutureoptionV1QuotationsExpPriceTrendRequest(server string, params *GetUapiDomesticFutureoptionV1QuotationsExpPriceTrendParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-futureoption/v1/quotations/exp-price-trend")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticFutureoptionV1QuotationsInquireAskingPriceRequest generates requests for GetUapiDomesticFutureoptionV1QuotationsInquireAskingPrice
func NewGetUapiDomesticFutureoptionV1QuotationsInquireAskingPriceRequest(server string, params *GetUapiDomesticFutureoptionV1QuotationsInquireAskingPriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-futureoption/v1/quotations/inquire-asking-price")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiDomesticFutureoptionV1QuotationsInquireDailyFuopchartpriceRequest generates requests for GetUapiDomesticFutureoptionV1QuotationsInquireDailyFuopchartprice
func NewGetUapiDomesticFutureoptionV1QuotationsInquireDailyFuopchartpriceRequest(server string, params *GetUapiDomesticFutureoptionV1QuotationsInquireDailyFuopchartpriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-futureoption/v1/quotations/inquire-daily-fuopchartprice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputDate1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_date_1", runtime.ParamLocationQuery, *params.FidInputDate1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputDate2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_date_2", runtime.ParamLocationQuery, *params.FidInputDate2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidPeriodDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_period_div_code", runtime.ParamLocationQuery, *params.FidPeriodDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiDomesticFutureoptionV1QuotationsInquirePriceRequest generates requests for GetUapiDomesticFutureoptionV1QuotationsInquirePrice
func NewGetUapiDomesticFutureoptionV1QuotationsInquirePriceRequest(server string, params *GetUapiDomesticFutureoptionV1QuotationsInquirePriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-futureoption/v1/quotations/inquire-price")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiDomesticFutureoptionV1QuotationsInquireTimeFuopchartpriceRequest generates requests for GetUapiDomesticFutureoptionV1QuotationsInquireTimeFuopchartprice
func NewGetUapiDomesticFutureoptionV1QuotationsInquireTimeFuopchartpriceRequest(server string, params *GetUapiDomesticFutureoptionV1QuotationsInquireTimeFuopchartpriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-futureoption/v1/quotations/inquire-time-fuopchartprice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidHourClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_hour_cls_code", runtime.ParamLocationQuery, *params.FidHourClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidPwDataIncuYn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_pw_data_incu_yn", runtime.ParamLocationQuery, *params.FidPwDataIncuYn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidFakeTickIncuYn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_fake_tick_incu_yn", runtime.ParamLocationQuery, *params.FidFakeTickIncuYn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputDate1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_date_1", runtime.ParamLocationQuery, *params.FidInputDate1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputHour1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_hour_1", runtime.ParamLocationQuery, *params.FidInputHour1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticFutureoptionV1TradingInquireBalanceRequest generates requests for GetUapiDomesticFutureoptionV1TradingInquireBalance
func NewGetUapiDomesticFutureoptionV1TradingInquireBalanceRequest(server string, params *GetUapiDomesticFutureoptionV1TradingInquireBalanceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-futureoption/v1/trading/inquire-balance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MGNADVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "MGNA_DVSN", runtime.ParamLocationQuery, *params.MGNADVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EXCCSTATCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EXCC_STAT_CD", runtime.ParamLocationQuery, *params.EXCCSTATCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK200", runtime.ParamLocationQuery, *params.CTXAREAFK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK200", runtime.ParamLocationQuery, *params.CTXAREANK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiDomesticFutureoptionV1TradingInquireBalanceSettlementPlRequest generates requests for GetUapiDomesticFutureoptionV1TradingInquireBalanceSettlementPl
func NewGetUapiDomesticFutureoptionV1TradingInquireBalanceSettlementPlRequest(server string, params *GetUapiDomesticFutureoptionV1TradingInquireBalanceSettlementPlParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-futureoption/v1/trading/inquire-balance-settlement-pl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_DT", runtime.ParamLocationQuery, *params.INQRDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK200", runtime.ParamLocationQuery, *params.CTXAREAFK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK200", runtime.ParamLocationQuery, *params.CTXAREANK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticFutureoptionV1TradingInquireBalanceValuationPlRequest generates requests for GetUapiDomesticFutureoptionV1TradingInquireBalanceValuationPl
func NewGetUapiDomesticFutureoptionV1TradingInquireBalanceValuationPlRequest(server string, params *GetUapiDomesticFutureoptionV1TradingInquireBalanceValuationPlParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-futureoption/v1/trading/inquire-balance-valuation-pl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MGNADVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "MGNA_DVSN", runtime.ParamLocationQuery, *params.MGNADVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EXCCSTATCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EXCC_STAT_CD", runtime.ParamLocationQuery, *params.EXCCSTATCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK200", runtime.ParamLocationQuery, *params.CTXAREAFK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK200", runtime.ParamLocationQuery, *params.CTXAREANK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticFutureoptionV1TradingInquireCcnlRequest generates requests for GetUapiDomesticFutureoptionV1TradingInquireCcnl
func NewGetUapiDomesticFutureoptionV1TradingInquireCcnlRequest(server string, params *GetUapiDomesticFutureoptionV1TradingInquireCcnlParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-futureoption/v1/trading/inquire-ccnl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.STRTORDDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "STRT_ORD_DT", runtime.ParamLocationQuery, *params.STRTORDDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ENDORDDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "END_ORD_DT", runtime.ParamLocationQuery, *params.ENDORDDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SLLBUYDVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SLL_BUY_DVSN_CD", runtime.ParamLocationQuery, *params.SLLBUYDVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CCLDNCCSDVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CCLD_NCCS_DVSN", runtime.ParamLocationQuery, *params.CCLDNCCSDVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SORTSQN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SORT_SQN", runtime.ParamLocationQuery, *params.SORTSQN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.STRTODNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "STRT_ODNO", runtime.ParamLocationQuery, *params.STRTODNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PDNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PDNO", runtime.ParamLocationQuery, *params.PDNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MKETIDCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "MKET_ID_CD", runtime.ParamLocationQuery, *params.MKETIDCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK200", runtime.ParamLocationQuery, *params.CTXAREAFK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK200", runtime.ParamLocationQuery, *params.CTXAREANK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiDomesticFutureoptionV1TradingInquireCcnlBstimeRequest generates requests for GetUapiDomesticFutureoptionV1TradingInquireCcnlBstime
func NewGetUapiDomesticFutureoptionV1TradingInquireCcnlBstimeRequest(server string, params *GetUapiDomesticFutureoptionV1TradingInquireCcnlBstimeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-futureoption/v1/trading/inquire-ccnl-bstime")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ORDDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ORD_DT", runtime.ParamLocationQuery, *params.ORDDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FUOPTRSTRTTMD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FUOP_TR_STRT_TMD", runtime.ParamLocationQuery, *params.FUOPTRSTRTTMD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FUOPTRENDTMD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FUOP_TR_END_TMD", runtime.ParamLocationQuery, *params.FUOPTRENDTMD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK200", runtime.ParamLocationQuery, *params.CTXAREAFK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK200", runtime.ParamLocationQuery, *params.CTXAREANK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticFutureoptionV1TradingInquireDailyAmountFeeRequest generates requests for GetUapiDomesticFutureoptionV1TradingInquireDailyAmountFee
func NewGetUapiDomesticFutureoptionV1TradingInquireDailyAmountFeeRequest(server string, params *GetUapiDomesticFutureoptionV1TradingInquireDailyAmountFeeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-futureoption/v1/trading/inquire-daily-amount-fee")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRSTRTDAY != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_STRT_DAY", runtime.ParamLocationQuery, *params.INQRSTRTDAY); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRENDDAY != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_END_DAY", runtime.ParamLocationQuery, *params.INQRENDDAY); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK200", runtime.ParamLocationQuery, *params.CTXAREAFK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK200", runtime.ParamLocationQuery, *params.CTXAREANK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticFutureoptionV1TradingInquireDepositRequest generates requests for GetUapiDomesticFutureoptionV1TradingInquireDeposit
func NewGetUapiDomesticFutureoptionV1TradingInquireDepositRequest(server string, params *GetUapiDomesticFutureoptionV1TradingInquireDepositParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-futureoption/v1/trading/inquire-deposit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticFutureoptionV1TradingInquireNgtBalanceRequest generates requests for GetUapiDomesticFutureoptionV1TradingInquireNgtBalance
func NewGetUapiDomesticFutureoptionV1TradingInquireNgtBalanceRequest(server string, params *GetUapiDomesticFutureoptionV1TradingInquireNgtBalanceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-futureoption/v1/trading/inquire-ngt-balance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPWD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PWD", runtime.ParamLocationQuery, *params.ACNTPWD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MGNADVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "MGNA_DVSN", runtime.ParamLocationQuery, *params.MGNADVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EXCCSTATCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EXCC_STAT_CD", runtime.ParamLocationQuery, *params.EXCCSTATCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK200", runtime.ParamLocationQuery, *params.CTXAREAFK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK200", runtime.ParamLocationQuery, *params.CTXAREANK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticFutureoptionV1TradingInquireNgtCcnlRequest generates requests for GetUapiDomesticFutureoptionV1TradingInquireNgtCcnl
func NewGetUapiDomesticFutureoptionV1TradingInquireNgtCcnlRequest(server string, params *GetUapiDomesticFutureoptionV1TradingInquireNgtCcnlParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-futureoption/v1/trading/inquire-ngt-ccnl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.STRTORDDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "STRT_ORD_DT", runtime.ParamLocationQuery, *params.STRTORDDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ENDORDDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "END_ORD_DT", runtime.ParamLocationQuery, *params.ENDORDDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SLLBUYDVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SLL_BUY_DVSN_CD", runtime.ParamLocationQuery, *params.SLLBUYDVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CCLDNCCSDVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CCLD_NCCS_DVSN", runtime.ParamLocationQuery, *params.CCLDNCCSDVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SORTSQN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SORT_SQN", runtime.ParamLocationQuery, *params.SORTSQN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.STRTODNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "STRT_ODNO", runtime.ParamLocationQuery, *params.STRTODNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PDNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PDNO", runtime.ParamLocationQuery, *params.PDNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MKETIDCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "MKET_ID_CD", runtime.ParamLocationQuery, *params.MKETIDCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FUOPDVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FUOP_DVSN_CD", runtime.ParamLocationQuery, *params.FUOPDVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SCRNDVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SCRN_DVSN", runtime.ParamLocationQuery, *params.SCRNDVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK200", runtime.ParamLocationQuery, *params.CTXAREAFK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK200", runtime.ParamLocationQuery, *params.CTXAREANK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticFutureoptionV1TradingInquirePsblNgtOrderRequest generates requests for GetUapiDomesticFutureoptionV1TradingInquirePsblNgtOrder
func NewGetUapiDomesticFutureoptionV1TradingInquirePsblNgtOrderRequest(server string, params *GetUapiDomesticFutureoptionV1TradingInquirePsblNgtOrderParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-futureoption/v1/trading/inquire-psbl-ngt-order")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PDNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PDNO", runtime.ParamLocationQuery, *params.PDNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PRDTTYPECD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PRDT_TYPE_CD", runtime.ParamLocationQuery, *params.PRDTTYPECD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SLLBUYDVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SLL_BUY_DVSN_CD", runtime.ParamLocationQuery, *params.SLLBUYDVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UNITPRICE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UNIT_PRICE", runtime.ParamLocationQuery, *params.UNITPRICE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ORDDVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ORD_DVSN_CD", runtime.ParamLocationQuery, *params.ORDDVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticFutureoptionV1TradingInquirePsblOrderRequest generates requests for GetUapiDomesticFutureoptionV1TradingInquirePsblOrder
func NewGetUapiDomesticFutureoptionV1TradingInquirePsblOrderRequest(server string, params *GetUapiDomesticFutureoptionV1TradingInquirePsblOrderParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-futureoption/v1/trading/inquire-psbl-order")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PDNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PDNO", runtime.ParamLocationQuery, *params.PDNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SLLBUYDVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SLL_BUY_DVSN_CD", runtime.ParamLocationQuery, *params.SLLBUYDVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UNITPRICE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UNIT_PRICE", runtime.ParamLocationQuery, *params.UNITPRICE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ORDDVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ORD_DVSN_CD", runtime.ParamLocationQuery, *params.ORDDVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiDomesticFutureoptionV1TradingNgtMarginDetailRequest generates requests for GetUapiDomesticFutureoptionV1TradingNgtMarginDetail
func NewGetUapiDomesticFutureoptionV1TradingNgtMarginDetailRequest(server string, params *GetUapiDomesticFutureoptionV1TradingNgtMarginDetailParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-futureoption/v1/trading/ngt-margin-detail")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MGNADVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "MGNA_DVSN_CD", runtime.ParamLocationQuery, *params.MGNADVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewPostUapiDomesticFutureoptionV1TradingOrderRequest calls the generic PostUapiDomesticFutureoptionV1TradingOrder builder with application/json body
func NewPostUapiDomesticFutureoptionV1TradingOrderRequest(server string, params *PostUapiDomesticFutureoptionV1TradingOrderParams, body PostUapiDomesticFutureoptionV1TradingOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUapiDomesticFutureoptionV1TradingOrderRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostUapiDomesticFutureoptionV1TradingOrderRequestWithBody generates requests for PostUapiDomesticFutureoptionV1TradingOrder with any type of body
func NewPostUapiDomesticFutureoptionV1TradingOrderRequestWithBody(server string, params *PostUapiDomesticFutureoptionV1TradingOrderParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-futureoption/v1/trading/order")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Hashkey != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "hashkey", runtime.ParamLocationHeader, *params.Hashkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("hashkey", headerParam5)
		}

	}

	return req, nil
}

// NewPostUapiDomesticFutureoptionV1TradingOrderRvsecnclRequest calls the generic PostUapiDomesticFutureoptionV1TradingOrderRvsecncl builder with application/json body
func NewPostUapiDomesticFutureoptionV1TradingOrderRvsecnclRequest(server string, params *PostUapiDomesticFutureoptionV1TradingOrderRvsecnclParams, body PostUapiDomesticFutureoptionV1TradingOrderRvsecnclJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUapiDomesticFutureoptionV1TradingOrderRvsecnclRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostUapiDomesticFutureoptionV1TradingOrderRvsecnclRequestWithBody generates requests for PostUapiDomesticFutureoptionV1TradingOrderRvsecncl with any type of body
func NewPostUapiDomesticFutureoptionV1TradingOrderRvsecnclRequestWithBody(server string, params *PostUapiDomesticFutureoptionV1TradingOrderRvsecnclParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-futureoption/v1/trading/order-rvsecncl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Content-Type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.AppKey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appKey", runtime.ParamLocationHeader, *params.AppKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appKey", headerParam2)
		}

		if params.AppSecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appSecret", runtime.ParamLocationHeader, *params.AppSecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appSecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Hashkey != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "hashkey", runtime.ParamLocationHeader, *params.Hashkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("hashkey", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1FinanceBalanceSheetRequest generates requests for GetUapiDomesticStockV1FinanceBalanceSheet
func NewGetUapiDomesticStockV1FinanceBalanceSheetRequest(server string, params *GetUapiDomesticStockV1FinanceBalanceSheetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/finance/balance-sheet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidDivClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_div_cls_code", runtime.ParamLocationQuery, *params.FidDivClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1FinanceFinancialRatioRequest generates requests for GetUapiDomesticStockV1FinanceFinancialRatio
func NewGetUapiDomesticStockV1FinanceFinancialRatioRequest(server string, params *GetUapiDomesticStockV1FinanceFinancialRatioParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/finance/financial-ratio")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidDivClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_div_cls_code", runtime.ParamLocationQuery, *params.FidDivClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1FinanceGrowthRatioRequest generates requests for GetUapiDomesticStockV1FinanceGrowthRatio
func NewGetUapiDomesticStockV1FinanceGrowthRatioRequest(server string, params *GetUapiDomesticStockV1FinanceGrowthRatioParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/finance/growth-ratio")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidDivClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_div_cls_code", runtime.ParamLocationQuery, *params.FidDivClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1FinanceIncomeStatementRequest generates requests for GetUapiDomesticStockV1FinanceIncomeStatement
func NewGetUapiDomesticStockV1FinanceIncomeStatementRequest(server string, params *GetUapiDomesticStockV1FinanceIncomeStatementParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/finance/income-statement")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidDivClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_div_cls_code", runtime.ParamLocationQuery, *params.FidDivClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1FinanceOtherMajorRatiosRequest generates requests for GetUapiDomesticStockV1FinanceOtherMajorRatios
func NewGetUapiDomesticStockV1FinanceOtherMajorRatiosRequest(server string, params *GetUapiDomesticStockV1FinanceOtherMajorRatiosParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/finance/other-major-ratios")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidDivClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_div_cls_code", runtime.ParamLocationQuery, *params.FidDivClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1FinanceProfitRatioRequest generates requests for GetUapiDomesticStockV1FinanceProfitRatio
func NewGetUapiDomesticStockV1FinanceProfitRatioRequest(server string, params *GetUapiDomesticStockV1FinanceProfitRatioParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/finance/profit-ratio")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidDivClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_div_cls_code", runtime.ParamLocationQuery, *params.FidDivClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1FinanceStabilityRatioRequest generates requests for GetUapiDomesticStockV1FinanceStabilityRatio
func NewGetUapiDomesticStockV1FinanceStabilityRatioRequest(server string, params *GetUapiDomesticStockV1FinanceStabilityRatioParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/finance/stability-ratio")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidDivClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_div_cls_code", runtime.ParamLocationQuery, *params.FidDivClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1KsdinfoBonusIssueRequest generates requests for GetUapiDomesticStockV1KsdinfoBonusIssue
func NewGetUapiDomesticStockV1KsdinfoBonusIssueRequest(server string, params *GetUapiDomesticStockV1KsdinfoBonusIssueParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/ksdinfo/bonus-issue")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cts", runtime.ParamLocationQuery, *params.Cts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FDt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "f_dt", runtime.ParamLocationQuery, *params.FDt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TDt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "t_dt", runtime.ParamLocationQuery, *params.TDt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShtCd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sht_cd", runtime.ParamLocationQuery, *params.ShtCd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1KsdinfoCapDcrsRequest generates requests for GetUapiDomesticStockV1KsdinfoCapDcrs
func NewGetUapiDomesticStockV1KsdinfoCapDcrsRequest(server string, params *GetUapiDomesticStockV1KsdinfoCapDcrsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/ksdinfo/cap-dcrs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cts", runtime.ParamLocationQuery, *params.Cts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FDt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "f_dt", runtime.ParamLocationQuery, *params.FDt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TDt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "t_dt", runtime.ParamLocationQuery, *params.TDt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShtCd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sht_cd", runtime.ParamLocationQuery, *params.ShtCd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1KsdinfoDividendRequest generates requests for GetUapiDomesticStockV1KsdinfoDividend
func NewGetUapiDomesticStockV1KsdinfoDividendRequest(server string, params *GetUapiDomesticStockV1KsdinfoDividendParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/ksdinfo/dividend")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cts", runtime.ParamLocationQuery, *params.Cts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Gb1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gb1", runtime.ParamLocationQuery, *params.Gb1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FDt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "f_dt", runtime.ParamLocationQuery, *params.FDt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TDt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "t_dt", runtime.ParamLocationQuery, *params.TDt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShtCd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sht_cd", runtime.ParamLocationQuery, *params.ShtCd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HighGb != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "high_gb", runtime.ParamLocationQuery, *params.HighGb); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1KsdinfoListInfoRequest generates requests for GetUapiDomesticStockV1KsdinfoListInfo
func NewGetUapiDomesticStockV1KsdinfoListInfoRequest(server string, params *GetUapiDomesticStockV1KsdinfoListInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/ksdinfo/list-info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cts", runtime.ParamLocationQuery, *params.Cts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FDt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "f_dt", runtime.ParamLocationQuery, *params.FDt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TDt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "t_dt", runtime.ParamLocationQuery, *params.TDt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShtCd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sht_cd", runtime.ParamLocationQuery, *params.ShtCd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1KsdinfoMergerSplitRequest generates requests for GetUapiDomesticStockV1KsdinfoMergerSplit
func NewGetUapiDomesticStockV1KsdinfoMergerSplitRequest(server string, params *GetUapiDomesticStockV1KsdinfoMergerSplitParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/ksdinfo/merger-split")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cts", runtime.ParamLocationQuery, *params.Cts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FDt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "f_dt", runtime.ParamLocationQuery, *params.FDt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TDt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "t_dt", runtime.ParamLocationQuery, *params.TDt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShtCd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sht_cd", runtime.ParamLocationQuery, *params.ShtCd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1KsdinfoPaidinCapinRequest generates requests for GetUapiDomesticStockV1KsdinfoPaidinCapin
func NewGetUapiDomesticStockV1KsdinfoPaidinCapinRequest(server string, params *GetUapiDomesticStockV1KsdinfoPaidinCapinParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/ksdinfo/paidin-capin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cts", runtime.ParamLocationQuery, *params.Cts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Gb1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gb1", runtime.ParamLocationQuery, *params.Gb1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FDt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "f_dt", runtime.ParamLocationQuery, *params.FDt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TDt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "t_dt", runtime.ParamLocationQuery, *params.TDt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShtCd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sht_cd", runtime.ParamLocationQuery, *params.ShtCd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1KsdinfoPurreqRequest generates requests for GetUapiDomesticStockV1KsdinfoPurreq
func NewGetUapiDomesticStockV1KsdinfoPurreqRequest(server string, params *GetUapiDomesticStockV1KsdinfoPurreqParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/ksdinfo/purreq")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cts", runtime.ParamLocationQuery, *params.Cts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FDt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "f_dt", runtime.ParamLocationQuery, *params.FDt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TDt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "t_dt", runtime.ParamLocationQuery, *params.TDt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShtCd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sht_cd", runtime.ParamLocationQuery, *params.ShtCd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1KsdinfoRevSplitRequest generates requests for GetUapiDomesticStockV1KsdinfoRevSplit
func NewGetUapiDomesticStockV1KsdinfoRevSplitRequest(server string, params *GetUapiDomesticStockV1KsdinfoRevSplitParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/ksdinfo/rev-split")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cts", runtime.ParamLocationQuery, *params.Cts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FDt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "f_dt", runtime.ParamLocationQuery, *params.FDt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TDt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "t_dt", runtime.ParamLocationQuery, *params.TDt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShtCd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sht_cd", runtime.ParamLocationQuery, *params.ShtCd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MarketGb != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "market_gb", runtime.ParamLocationQuery, *params.MarketGb); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1KsdinfoSharehldMeetRequest generates requests for GetUapiDomesticStockV1KsdinfoSharehldMeet
func NewGetUapiDomesticStockV1KsdinfoSharehldMeetRequest(server string, params *GetUapiDomesticStockV1KsdinfoSharehldMeetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/ksdinfo/sharehld-meet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cts", runtime.ParamLocationQuery, *params.Cts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FDt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "f_dt", runtime.ParamLocationQuery, *params.FDt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TDt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "t_dt", runtime.ParamLocationQuery, *params.TDt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShtCd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sht_cd", runtime.ParamLocationQuery, *params.ShtCd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsCaptureUplowpriceRequest generates requests for GetUapiDomesticStockV1QuotationsCaptureUplowprice
func NewGetUapiDomesticStockV1QuotationsCaptureUplowpriceRequest(server string, params *GetUapiDomesticStockV1QuotationsCaptureUplowpriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/capture-uplowprice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDSCRDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_SCR_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDSCRDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDPRCCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_PRC_CLS_CODE", runtime.ParamLocationQuery, *params.FIDPRCCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDDIVCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_DIV_CLS_CODE", runtime.ParamLocationQuery, *params.FIDDIVCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDTRGTCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_TRGT_CLS_CODE", runtime.ParamLocationQuery, *params.FIDTRGTCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDTRGTEXLSCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_TRGT_EXLS_CLS_CODE", runtime.ParamLocationQuery, *params.FIDTRGTEXLSCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTPRICE1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_PRICE_1", runtime.ParamLocationQuery, *params.FIDINPUTPRICE1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTPRICE2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_PRICE_2", runtime.ParamLocationQuery, *params.FIDINPUTPRICE2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDVOLCNT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_VOL_CNT", runtime.ParamLocationQuery, *params.FIDVOLCNT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsChkHolidayRequest generates requests for GetUapiDomesticStockV1QuotationsChkHoliday
func NewGetUapiDomesticStockV1QuotationsChkHolidayRequest(server string, params *GetUapiDomesticStockV1QuotationsChkHolidayParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/chk-holiday")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BASSDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "BASS_DT", runtime.ParamLocationQuery, *params.BASSDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK", runtime.ParamLocationQuery, *params.CTXAREANK); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK", runtime.ParamLocationQuery, *params.CTXAREAFK); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsCompInterestRequest generates requests for GetUapiDomesticStockV1QuotationsCompInterest
func NewGetUapiDomesticStockV1QuotationsCompInterestRequest(server string, params *GetUapiDomesticStockV1QuotationsCompInterestParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/comp-interest")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDSCRDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_SCR_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDSCRDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDDIVCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_DIV_CLS_CODE", runtime.ParamLocationQuery, *params.FIDDIVCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDDIVCLSCODE1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_DIV_CLS_CODE1", runtime.ParamLocationQuery, *params.FIDDIVCLSCODE1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsCompProgramTradeDailyRequest generates requests for GetUapiDomesticStockV1QuotationsCompProgramTradeDaily
func NewGetUapiDomesticStockV1QuotationsCompProgramTradeDailyRequest(server string, params *GetUapiDomesticStockV1QuotationsCompProgramTradeDailyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/comp-program-trade-daily")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDMRKTCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_MRKT_CLS_CODE", runtime.ParamLocationQuery, *params.FIDMRKTCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTDATE1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_DATE_1", runtime.ParamLocationQuery, *params.FIDINPUTDATE1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTDATE2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_DATE_2", runtime.ParamLocationQuery, *params.FIDINPUTDATE2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsCompProgramTradeTodayRequest generates requests for GetUapiDomesticStockV1QuotationsCompProgramTradeToday
func NewGetUapiDomesticStockV1QuotationsCompProgramTradeTodayRequest(server string, params *GetUapiDomesticStockV1QuotationsCompProgramTradeTodayParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/comp-program-trade-today")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDMRKTCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_MRKT_CLS_CODE", runtime.ParamLocationQuery, *params.FIDMRKTCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDSCTNCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_SCTN_CLS_CODE", runtime.ParamLocationQuery, *params.FIDSCTNCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsCreditByCompanyRequest generates requests for GetUapiDomesticStockV1QuotationsCreditByCompany
func NewGetUapiDomesticStockV1QuotationsCreditByCompanyRequest(server string, params *GetUapiDomesticStockV1QuotationsCreditByCompanyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/credit-by-company")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidCondScrDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_scr_div_code", runtime.ParamLocationQuery, *params.FidCondScrDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidSlctYn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_slct_yn", runtime.ParamLocationQuery, *params.FidSlctYn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidRankSortClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_rank_sort_cls_code", runtime.ParamLocationQuery, *params.FidRankSortClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsDailyCreditBalanceRequest generates requests for GetUapiDomesticStockV1QuotationsDailyCreditBalance
func NewGetUapiDomesticStockV1QuotationsDailyCreditBalanceRequest(server string, params *GetUapiDomesticStockV1QuotationsDailyCreditBalanceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/daily-credit-balance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidCondScrDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_scr_div_code", runtime.ParamLocationQuery, *params.FidCondScrDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputDate1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_date_1", runtime.ParamLocationQuery, *params.FidInputDate1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsDailyShortSaleRequest generates requests for GetUapiDomesticStockV1QuotationsDailyShortSale
func NewGetUapiDomesticStockV1QuotationsDailyShortSaleRequest(server string, params *GetUapiDomesticStockV1QuotationsDailyShortSaleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/daily-short-sale")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTDATE1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_DATE_1", runtime.ParamLocationQuery, *params.FIDINPUTDATE1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTDATE2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_DATE_2", runtime.ParamLocationQuery, *params.FIDINPUTDATE2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsEstimatePerformRequest generates requests for GetUapiDomesticStockV1QuotationsEstimatePerform
func NewGetUapiDomesticStockV1QuotationsEstimatePerformRequest(server string, params *GetUapiDomesticStockV1QuotationsEstimatePerformParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/estimate-perform")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SHTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SHT_CD", runtime.ParamLocationQuery, *params.SHTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsExpClosingPriceRequest generates requests for GetUapiDomesticStockV1QuotationsExpClosingPrice
func NewGetUapiDomesticStockV1QuotationsExpClosingPriceRequest(server string, params *GetUapiDomesticStockV1QuotationsExpClosingPriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/exp-closing-price")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidCondScrDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_scr_div_code", runtime.ParamLocationQuery, *params.FidCondScrDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidBlngClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_blng_cls_code", runtime.ParamLocationQuery, *params.FidBlngClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidRankSortClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_rank_sort_cls_code", runtime.ParamLocationQuery, *params.FidRankSortClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsExpIndexTrendRequest generates requests for GetUapiDomesticStockV1QuotationsExpIndexTrend
func NewGetUapiDomesticStockV1QuotationsExpIndexTrendRequest(server string, params *GetUapiDomesticStockV1QuotationsExpIndexTrendParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/exp-index-trend")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputHour1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_hour_1", runtime.ParamLocationQuery, *params.FidInputHour1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidMkopClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_mkop_cls_code", runtime.ParamLocationQuery, *params.FidMkopClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsExpPriceTrendRequest generates requests for GetUapiDomesticStockV1QuotationsExpPriceTrend
func NewGetUapiDomesticStockV1QuotationsExpPriceTrendRequest(server string, params *GetUapiDomesticStockV1QuotationsExpPriceTrendParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/exp-price-trend")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidMkopClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_mkop_cls_code", runtime.ParamLocationQuery, *params.FidMkopClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsForeignInstitutionTotalRequest generates requests for GetUapiDomesticStockV1QuotationsForeignInstitutionTotal
func NewGetUapiDomesticStockV1QuotationsForeignInstitutionTotalRequest(server string, params *GetUapiDomesticStockV1QuotationsForeignInstitutionTotalParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/foreign-institution-total")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDSCRDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_SCR_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDSCRDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDDIVCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_DIV_CLS_CODE", runtime.ParamLocationQuery, *params.FIDDIVCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDRANKSORTCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_RANK_SORT_CLS_CODE", runtime.ParamLocationQuery, *params.FIDRANKSORTCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDETCCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_ETC_CLS_CODE", runtime.ParamLocationQuery, *params.FIDETCCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsFrgnmemPchsTrendRequest generates requests for GetUapiDomesticStockV1QuotationsFrgnmemPchsTrend
func NewGetUapiDomesticStockV1QuotationsFrgnmemPchsTrendRequest(server string, params *GetUapiDomesticStockV1QuotationsFrgnmemPchsTrendParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/frgnmem-pchs-trend")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_2", runtime.ParamLocationQuery, *params.FIDINPUTISCD2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsFrgnmemTradeEstimateRequest generates requests for GetUapiDomesticStockV1QuotationsFrgnmemTradeEstimate
func NewGetUapiDomesticStockV1QuotationsFrgnmemTradeEstimateRequest(server string, params *GetUapiDomesticStockV1QuotationsFrgnmemTradeEstimateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/frgnmem-trade-estimate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDSCRDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_SCR_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDSCRDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDRANKSORTCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_RANK_SORT_CLS_CODE", runtime.ParamLocationQuery, *params.FIDRANKSORTCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDRANKSORTCLSCODE2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_RANK_SORT_CLS_CODE_2", runtime.ParamLocationQuery, *params.FIDRANKSORTCLSCODE2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsFrgnmemTradeTrendRequest generates requests for GetUapiDomesticStockV1QuotationsFrgnmemTradeTrend
func NewGetUapiDomesticStockV1QuotationsFrgnmemTradeTrendRequest(server string, params *GetUapiDomesticStockV1QuotationsFrgnmemTradeTrendParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/frgnmem-trade-trend")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDSCRDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_SCR_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDSCRDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_2", runtime.ParamLocationQuery, *params.FIDINPUTISCD2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDMRKTCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_MRKT_CLS_CODE", runtime.ParamLocationQuery, *params.FIDMRKTCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDVOLCNT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_VOL_CNT", runtime.ParamLocationQuery, *params.FIDVOLCNT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsInquireAskingPriceExpCcnRequest generates requests for GetUapiDomesticStockV1QuotationsInquireAskingPriceExpCcn
func NewGetUapiDomesticStockV1QuotationsInquireAskingPriceExpCcnRequest(server string, params *GetUapiDomesticStockV1QuotationsInquireAskingPriceExpCcnParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/inquire-asking-price-exp-ccn")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsInquireCcnlRequest generates requests for GetUapiDomesticStockV1QuotationsInquireCcnl
func NewGetUapiDomesticStockV1QuotationsInquireCcnlRequest(server string, params *GetUapiDomesticStockV1QuotationsInquireCcnlParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/inquire-ccnl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsInquireDailyIndexchartpriceRequest generates requests for GetUapiDomesticStockV1QuotationsInquireDailyIndexchartprice
func NewGetUapiDomesticStockV1QuotationsInquireDailyIndexchartpriceRequest(server string, params *GetUapiDomesticStockV1QuotationsInquireDailyIndexchartpriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/inquire-daily-indexchartprice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputDate1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_date_1", runtime.ParamLocationQuery, *params.FidInputDate1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputDate2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_date_2", runtime.ParamLocationQuery, *params.FidInputDate2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidPeriodDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_period_div_code", runtime.ParamLocationQuery, *params.FidPeriodDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsInquireDailyItemchartpriceRequest generates requests for GetUapiDomesticStockV1QuotationsInquireDailyItemchartprice
func NewGetUapiDomesticStockV1QuotationsInquireDailyItemchartpriceRequest(server string, params *GetUapiDomesticStockV1QuotationsInquireDailyItemchartpriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/inquire-daily-itemchartprice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputDate1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_date_1", runtime.ParamLocationQuery, *params.FidInputDate1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputDate2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_date_2", runtime.ParamLocationQuery, *params.FidInputDate2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidPeriodDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_period_div_code", runtime.ParamLocationQuery, *params.FidPeriodDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidOrgAdjPrc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_org_adj_prc", runtime.ParamLocationQuery, *params.FidOrgAdjPrc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsInquireDailyOvertimepriceRequest generates requests for GetUapiDomesticStockV1QuotationsInquireDailyOvertimeprice
func NewGetUapiDomesticStockV1QuotationsInquireDailyOvertimepriceRequest(server string, params *GetUapiDomesticStockV1QuotationsInquireDailyOvertimepriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/inquire-daily-overtimeprice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsInquireDailyPriceRequest generates requests for GetUapiDomesticStockV1QuotationsInquireDailyPrice
func NewGetUapiDomesticStockV1QuotationsInquireDailyPriceRequest(server string, params *GetUapiDomesticStockV1QuotationsInquireDailyPriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/inquire-daily-price")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDSCRDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_SCR_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDSCRDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDUNASINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_UNAS_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDUNASINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDMRKTCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_MRKT_CLS_CODE", runtime.ParamLocationQuery, *params.FIDMRKTCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTPRICE1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_PRICE_1", runtime.ParamLocationQuery, *params.FIDINPUTPRICE1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTPRICE2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_PRICE_2", runtime.ParamLocationQuery, *params.FIDINPUTPRICE2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTVOL1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_VOL_1", runtime.ParamLocationQuery, *params.FIDINPUTVOL1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTVOL2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_VOL_2", runtime.ParamLocationQuery, *params.FIDINPUTVOL2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDHOURCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_HOUR_CLS_CODE", runtime.ParamLocationQuery, *params.FIDHOURCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTHOUR1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_HOUR_1", runtime.ParamLocationQuery, *params.FIDINPUTHOUR1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTHOUR2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_HOUR_2", runtime.ParamLocationQuery, *params.FIDINPUTHOUR2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDRANKSORTCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_RANK_SORT_CLS_CODE", runtime.ParamLocationQuery, *params.FIDRANKSORTCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDBLNGCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_BLNG_CLS_CODE", runtime.ParamLocationQuery, *params.FIDBLNGCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsInquireDailyTradeVolumeRequest generates requests for GetUapiDomesticStockV1QuotationsInquireDailyTradeVolume
func NewGetUapiDomesticStockV1QuotationsInquireDailyTradeVolumeRequest(server string, params *GetUapiDomesticStockV1QuotationsInquireDailyTradeVolumeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/inquire-daily-trade-volume")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputDate1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_date_1", runtime.ParamLocationQuery, *params.FidInputDate1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputDate2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_date_2", runtime.ParamLocationQuery, *params.FidInputDate2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidPeriodDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_period_div_code", runtime.ParamLocationQuery, *params.FidPeriodDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsInquireElwPriceRequest generates requests for GetUapiDomesticStockV1QuotationsInquireElwPrice
func NewGetUapiDomesticStockV1QuotationsInquireElwPriceRequest(server string, params *GetUapiDomesticStockV1QuotationsInquireElwPriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/inquire-elw-price")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsInquireIndexTickpriceRequest generates requests for GetUapiDomesticStockV1QuotationsInquireIndexTickprice
func NewGetUapiDomesticStockV1QuotationsInquireIndexTickpriceRequest(server string, params *GetUapiDomesticStockV1QuotationsInquireIndexTickpriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/inquire-index-tickprice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsInquireIndexTimepriceRequest generates requests for GetUapiDomesticStockV1QuotationsInquireIndexTimeprice
func NewGetUapiDomesticStockV1QuotationsInquireIndexTimepriceRequest(server string, params *GetUapiDomesticStockV1QuotationsInquireIndexTimepriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/inquire-index-timeprice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputHour1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_hour_1", runtime.ParamLocationQuery, *params.FidInputHour1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsInquireInvestorRequest generates requests for GetUapiDomesticStockV1QuotationsInquireInvestor
func NewGetUapiDomesticStockV1QuotationsInquireInvestorRequest(server string, params *GetUapiDomesticStockV1QuotationsInquireInvestorParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/inquire-investor")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsInquireInvestorDailyByMarketRequest generates requests for GetUapiDomesticStockV1QuotationsInquireInvestorDailyByMarket
func NewGetUapiDomesticStockV1QuotationsInquireInvestorDailyByMarketRequest(server string, params *GetUapiDomesticStockV1QuotationsInquireInvestorDailyByMarketParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/inquire-investor-daily-by-market")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTDATE1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_DATE_1", runtime.ParamLocationQuery, *params.FIDINPUTDATE1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_1", runtime.ParamLocationQuery, *params.FIDINPUTISCD1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsInquireInvestorTimeByMarketRequest generates requests for GetUapiDomesticStockV1QuotationsInquireInvestorTimeByMarket
func NewGetUapiDomesticStockV1QuotationsInquireInvestorTimeByMarketRequest(server string, params *GetUapiDomesticStockV1QuotationsInquireInvestorTimeByMarketParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/inquire-investor-time-by-market")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_2", runtime.ParamLocationQuery, *params.FIDINPUTISCD2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsInquireMemberRequest generates requests for GetUapiDomesticStockV1QuotationsInquireMember
func NewGetUapiDomesticStockV1QuotationsInquireMemberRequest(server string, params *GetUapiDomesticStockV1QuotationsInquireMemberParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/inquire-member")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsInquireMemberDailyRequest generates requests for GetUapiDomesticStockV1QuotationsInquireMemberDaily
func NewGetUapiDomesticStockV1QuotationsInquireMemberDailyRequest(server string, params *GetUapiDomesticStockV1QuotationsInquireMemberDailyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/inquire-member-daily")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_2", runtime.ParamLocationQuery, *params.FIDINPUTISCD2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTDATE1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_DATE_1", runtime.ParamLocationQuery, *params.FIDINPUTDATE1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTDATE2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_DATE_2", runtime.ParamLocationQuery, *params.FIDINPUTDATE2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDSCTNCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_SCTN_CLS_CODE", runtime.ParamLocationQuery, *params.FIDSCTNCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsInquireOvertimeAskingPriceRequest generates requests for GetUapiDomesticStockV1QuotationsInquireOvertimeAskingPrice
func NewGetUapiDomesticStockV1QuotationsInquireOvertimeAskingPriceRequest(server string, params *GetUapiDomesticStockV1QuotationsInquireOvertimeAskingPriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/inquire-overtime-asking-price")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsInquireOvertimePriceRequest generates requests for GetUapiDomesticStockV1QuotationsInquireOvertimePrice
func NewGetUapiDomesticStockV1QuotationsInquireOvertimePriceRequest(server string, params *GetUapiDomesticStockV1QuotationsInquireOvertimePriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/inquire-overtime-price")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsInquirePriceRequest generates requests for GetUapiDomesticStockV1QuotationsInquirePrice
func NewGetUapiDomesticStockV1QuotationsInquirePriceRequest(server string, params *GetUapiDomesticStockV1QuotationsInquirePriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/inquire-price")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsInquirePrice2Request generates requests for GetUapiDomesticStockV1QuotationsInquirePrice2
func NewGetUapiDomesticStockV1QuotationsInquirePrice2Request(server string, params *GetUapiDomesticStockV1QuotationsInquirePrice2Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/inquire-price-2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsInquireTimeIndexchartpriceRequest generates requests for GetUapiDomesticStockV1QuotationsInquireTimeIndexchartprice
func NewGetUapiDomesticStockV1QuotationsInquireTimeIndexchartpriceRequest(server string, params *GetUapiDomesticStockV1QuotationsInquireTimeIndexchartpriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/inquire-time-indexchartprice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTHOUR1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_HOUR_1", runtime.ParamLocationQuery, *params.FIDINPUTHOUR1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDPWDATAINCUYN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_PW_DATA_INCU_YN", runtime.ParamLocationQuery, *params.FIDPWDATAINCUYN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDETCCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_ETC_CLS_CODE", runtime.ParamLocationQuery, *params.FIDETCCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsInquireTimeItemchartpriceRequest generates requests for GetUapiDomesticStockV1QuotationsInquireTimeItemchartprice
func NewGetUapiDomesticStockV1QuotationsInquireTimeItemchartpriceRequest(server string, params *GetUapiDomesticStockV1QuotationsInquireTimeItemchartpriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/inquire-time-itemchartprice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDETCCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_ETC_CLS_CODE", runtime.ParamLocationQuery, *params.FIDETCCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTHOUR1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_HOUR_1", runtime.ParamLocationQuery, *params.FIDINPUTHOUR1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDPWDATAINCUYN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_PW_DATA_INCU_YN", runtime.ParamLocationQuery, *params.FIDPWDATAINCUYN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsInquireTimeItemconclusionRequest generates requests for GetUapiDomesticStockV1QuotationsInquireTimeItemconclusion
func NewGetUapiDomesticStockV1QuotationsInquireTimeItemconclusionRequest(server string, params *GetUapiDomesticStockV1QuotationsInquireTimeItemconclusionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/inquire-time-itemconclusion")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputHour1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_hour_1", runtime.ParamLocationQuery, *params.FidInputHour1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsInquireTimeOvertimeconclusionRequest generates requests for GetUapiDomesticStockV1QuotationsInquireTimeOvertimeconclusion
func NewGetUapiDomesticStockV1QuotationsInquireTimeOvertimeconclusionRequest(server string, params *GetUapiDomesticStockV1QuotationsInquireTimeOvertimeconclusionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/inquire-time-overtimeconclusion")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidHourClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_hour_cls_code", runtime.ParamLocationQuery, *params.FidHourClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsInquireViStatusRequest generates requests for GetUapiDomesticStockV1QuotationsInquireViStatus
func NewGetUapiDomesticStockV1QuotationsInquireViStatusRequest(server string, params *GetUapiDomesticStockV1QuotationsInquireViStatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/inquire-vi-status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondScrDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_scr_div_code", runtime.ParamLocationQuery, *params.FidCondScrDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidMrktClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_mrkt_cls_code", runtime.ParamLocationQuery, *params.FidMrktClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidRankSortClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_rank_sort_cls_code", runtime.ParamLocationQuery, *params.FidRankSortClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputDate1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_date_1", runtime.ParamLocationQuery, *params.FidInputDate1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_cls_code", runtime.ParamLocationQuery, *params.FidTrgtClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtExlsClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_exls_cls_code", runtime.ParamLocationQuery, *params.FidTrgtExlsClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidDivClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_div_cls_code", runtime.ParamLocationQuery, *params.FidDivClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsIntstockGrouplistRequest generates requests for GetUapiDomesticStockV1QuotationsIntstockGrouplist
func NewGetUapiDomesticStockV1QuotationsIntstockGrouplistRequest(server string, params *GetUapiDomesticStockV1QuotationsIntstockGrouplistParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/intstock-grouplist")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TYPE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "TYPE", runtime.ParamLocationQuery, *params.TYPE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDETCCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_ETC_CLS_CODE", runtime.ParamLocationQuery, *params.FIDETCCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.USERID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "USER_ID", runtime.ParamLocationQuery, *params.USERID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsIntstockMultpriceRequest generates requests for GetUapiDomesticStockV1QuotationsIntstockMultprice
func NewGetUapiDomesticStockV1QuotationsIntstockMultpriceRequest(server string, params *GetUapiDomesticStockV1QuotationsIntstockMultpriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/intstock-multprice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE_1", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_1", runtime.ParamLocationQuery, *params.FIDINPUTISCD1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTDIVCODE2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE_2", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_2", runtime.ParamLocationQuery, *params.FIDINPUTISCD2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTDIVCODE3 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE_3", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE3); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD3 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_3", runtime.ParamLocationQuery, *params.FIDINPUTISCD3); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTDIVCODE4 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE_4", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE4); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD4 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_4", runtime.ParamLocationQuery, *params.FIDINPUTISCD4); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTDIVCODE5 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE_5", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE5); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD5 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_5", runtime.ParamLocationQuery, *params.FIDINPUTISCD5); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTDIVCODE6 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE_6", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE6); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD6 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_6", runtime.ParamLocationQuery, *params.FIDINPUTISCD6); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTDIVCODE7 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE_7", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE7); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD7 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_7", runtime.ParamLocationQuery, *params.FIDINPUTISCD7); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTDIVCODE8 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE_8", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE8); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD8 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_8", runtime.ParamLocationQuery, *params.FIDINPUTISCD8); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTDIVCODE9 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE_9", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE9); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD9 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_9", runtime.ParamLocationQuery, *params.FIDINPUTISCD9); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTDIVCODE10 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE_10", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE10); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD10 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_10", runtime.ParamLocationQuery, *params.FIDINPUTISCD10); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTDIVCODE11 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE_11", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE11); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD11 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_11", runtime.ParamLocationQuery, *params.FIDINPUTISCD11); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTDIVCODE12 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE_12", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE12); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD12 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_12", runtime.ParamLocationQuery, *params.FIDINPUTISCD12); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTDIVCODE13 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE_13", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE13); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD13 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_13", runtime.ParamLocationQuery, *params.FIDINPUTISCD13); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTDIVCODE14 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE_14", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE14); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD14 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_14", runtime.ParamLocationQuery, *params.FIDINPUTISCD14); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTDIVCODE15 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE_15", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE15); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD15 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_15", runtime.ParamLocationQuery, *params.FIDINPUTISCD15); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTDIVCODE16 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE_16", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE16); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD16 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_16", runtime.ParamLocationQuery, *params.FIDINPUTISCD16); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTDIVCODE17 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE_17", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE17); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD17 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_17", runtime.ParamLocationQuery, *params.FIDINPUTISCD17); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTDIVCODE18 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE_18", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE18); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD18 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_18", runtime.ParamLocationQuery, *params.FIDINPUTISCD18); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTDIVCODE19 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE_19", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE19); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD19 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_19", runtime.ParamLocationQuery, *params.FIDINPUTISCD19); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTDIVCODE20 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE_20", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE20); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD20 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_20", runtime.ParamLocationQuery, *params.FIDINPUTISCD20); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTDIVCODE21 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE_21", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE21); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD21 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_21", runtime.ParamLocationQuery, *params.FIDINPUTISCD21); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTDIVCODE22 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE_22", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE22); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD22 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_22", runtime.ParamLocationQuery, *params.FIDINPUTISCD22); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTDIVCODE23 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE_23", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE23); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD23 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_23", runtime.ParamLocationQuery, *params.FIDINPUTISCD23); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTDIVCODE24 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE_24", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE24); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD24 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_24", runtime.ParamLocationQuery, *params.FIDINPUTISCD24); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTDIVCODE25 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE_25", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE25); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD25 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_25", runtime.ParamLocationQuery, *params.FIDINPUTISCD25); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTDIVCODE26 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE_26", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE26); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD26 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_26", runtime.ParamLocationQuery, *params.FIDINPUTISCD26); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTDIVCODE27 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE_27", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE27); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD27 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_27", runtime.ParamLocationQuery, *params.FIDINPUTISCD27); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTDIVCODE28 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE_28", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE28); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD28 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_28", runtime.ParamLocationQuery, *params.FIDINPUTISCD28); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTDIVCODE29 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE_29", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE29); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD29 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_29", runtime.ParamLocationQuery, *params.FIDINPUTISCD29); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTDIVCODE30 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE_30", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE30); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD30 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_30", runtime.ParamLocationQuery, *params.FIDINPUTISCD30); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsIntstockStocklistByGroupRequest generates requests for GetUapiDomesticStockV1QuotationsIntstockStocklistByGroup
func NewGetUapiDomesticStockV1QuotationsIntstockStocklistByGroupRequest(server string, params *GetUapiDomesticStockV1QuotationsIntstockStocklistByGroupParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/intstock-stocklist-by-group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TYPE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "TYPE", runtime.ParamLocationQuery, *params.TYPE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.USERID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "USER_ID", runtime.ParamLocationQuery, *params.USERID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DATARANK != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DATA_RANK", runtime.ParamLocationQuery, *params.DATARANK); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INTERGRPCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INTER_GRP_CODE", runtime.ParamLocationQuery, *params.INTERGRPCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INTERGRPNAME != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INTER_GRP_NAME", runtime.ParamLocationQuery, *params.INTERGRPNAME); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HTSKORISNM != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "HTS_KOR_ISNM", runtime.ParamLocationQuery, *params.HTSKORISNM); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CNTGCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CNTG_CLS_CODE", runtime.ParamLocationQuery, *params.CNTGCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDETCCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_ETC_CLS_CODE", runtime.ParamLocationQuery, *params.FIDETCCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsInvestOpbysecRequest generates requests for GetUapiDomesticStockV1QuotationsInvestOpbysec
func NewGetUapiDomesticStockV1QuotationsInvestOpbysecRequest(server string, params *GetUapiDomesticStockV1QuotationsInvestOpbysecParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/invest-opbysec")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDSCRDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_SCR_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDSCRDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDDIVCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_DIV_CLS_CODE", runtime.ParamLocationQuery, *params.FIDDIVCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTDATE1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_DATE_1", runtime.ParamLocationQuery, *params.FIDINPUTDATE1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTDATE2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_DATE_2", runtime.ParamLocationQuery, *params.FIDINPUTDATE2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsInvestOpinionRequest generates requests for GetUapiDomesticStockV1QuotationsInvestOpinion
func NewGetUapiDomesticStockV1QuotationsInvestOpinionRequest(server string, params *GetUapiDomesticStockV1QuotationsInvestOpinionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/invest-opinion")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDSCRDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_SCR_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDSCRDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTDATE1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_DATE_1", runtime.ParamLocationQuery, *params.FIDINPUTDATE1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTDATE2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_DATE_2", runtime.ParamLocationQuery, *params.FIDINPUTDATE2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsInvestorProgramTradeTodayRequest generates requests for GetUapiDomesticStockV1QuotationsInvestorProgramTradeToday
func NewGetUapiDomesticStockV1QuotationsInvestorProgramTradeTodayRequest(server string, params *GetUapiDomesticStockV1QuotationsInvestorProgramTradeTodayParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/investor-program-trade-today")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MRKTDIVCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "MRKT_DIV_CLS_CODE", runtime.ParamLocationQuery, *params.MRKTDIVCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsInvestorTrendEstimateRequest generates requests for GetUapiDomesticStockV1QuotationsInvestorTrendEstimate
func NewGetUapiDomesticStockV1QuotationsInvestorTrendEstimateRequest(server string, params *GetUapiDomesticStockV1QuotationsInvestorTrendEstimateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/investor-trend-estimate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MKSCSHRNISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "MKSC_SHRN_ISCD", runtime.ParamLocationQuery, *params.MKSCSHRNISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsLendableByCompanyRequest generates requests for GetUapiDomesticStockV1QuotationsLendableByCompany
func NewGetUapiDomesticStockV1QuotationsLendableByCompanyRequest(server string, params *GetUapiDomesticStockV1QuotationsLendableByCompanyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/lendable-by-company")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.EXCGDVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EXCG_DVSN_CD", runtime.ParamLocationQuery, *params.EXCGDVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PDNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PDNO", runtime.ParamLocationQuery, *params.PDNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.THCOSTLNPSBLYN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "THCO_STLN_PSBL_YN", runtime.ParamLocationQuery, *params.THCOSTLNPSBLYN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRDVSN1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_DVSN_1", runtime.ParamLocationQuery, *params.INQRDVSN1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK200", runtime.ParamLocationQuery, *params.CTXAREAFK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK100 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK100", runtime.ParamLocationQuery, *params.CTXAREANK100); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsMktfundsRequest generates requests for GetUapiDomesticStockV1QuotationsMktfunds
func NewGetUapiDomesticStockV1QuotationsMktfundsRequest(server string, params *GetUapiDomesticStockV1QuotationsMktfundsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/mktfunds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDINPUTDATE1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_DATE_1", runtime.ParamLocationQuery, *params.FIDINPUTDATE1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsNewsTitleRequest generates requests for GetUapiDomesticStockV1QuotationsNewsTitle
func NewGetUapiDomesticStockV1QuotationsNewsTitleRequest(server string, params *GetUapiDomesticStockV1QuotationsNewsTitleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/news-title")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDNEWSOFERENTPCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_NEWS_OFER_ENTP_CODE", runtime.ParamLocationQuery, *params.FIDNEWSOFERENTPCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_CLS_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDTITLCNTT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_TITL_CNTT", runtime.ParamLocationQuery, *params.FIDTITLCNTT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTDATE1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_DATE_1", runtime.ParamLocationQuery, *params.FIDINPUTDATE1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTHOUR1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_HOUR_1", runtime.ParamLocationQuery, *params.FIDINPUTHOUR1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDRANKSORTCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_RANK_SORT_CLS_CODE", runtime.ParamLocationQuery, *params.FIDRANKSORTCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTSRNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_SRNO", runtime.ParamLocationQuery, *params.FIDINPUTSRNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsPbarTratioRequest generates requests for GetUapiDomesticStockV1QuotationsPbarTratio
func NewGetUapiDomesticStockV1QuotationsPbarTratioRequest(server string, params *GetUapiDomesticStockV1QuotationsPbarTratioParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/pbar-tratio")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDSCRDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_SCR_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDSCRDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTHOUR1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_HOUR_1", runtime.ParamLocationQuery, *params.FIDINPUTHOUR1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsProgramTradeByStockRequest generates requests for GetUapiDomesticStockV1QuotationsProgramTradeByStock
func NewGetUapiDomesticStockV1QuotationsProgramTradeByStockRequest(server string, params *GetUapiDomesticStockV1QuotationsProgramTradeByStockParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/program-trade-by-stock")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsProgramTradeByStockDailyRequest generates requests for GetUapiDomesticStockV1QuotationsProgramTradeByStockDaily
func NewGetUapiDomesticStockV1QuotationsProgramTradeByStockDailyRequest(server string, params *GetUapiDomesticStockV1QuotationsProgramTradeByStockDailyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/program-trade-by-stock-daily")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTDATE1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_DATE_1", runtime.ParamLocationQuery, *params.FIDINPUTDATE1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsPsearchResultRequest generates requests for GetUapiDomesticStockV1QuotationsPsearchResult
func NewGetUapiDomesticStockV1QuotationsPsearchResultRequest(server string, params *GetUapiDomesticStockV1QuotationsPsearchResultParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/psearch-result")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Seq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "seq", runtime.ParamLocationQuery, *params.Seq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsPsearchTitleRequest generates requests for GetUapiDomesticStockV1QuotationsPsearchTitle
func NewGetUapiDomesticStockV1QuotationsPsearchTitleRequest(server string, params *GetUapiDomesticStockV1QuotationsPsearchTitleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/psearch-title")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsSearchInfoRequest generates requests for GetUapiDomesticStockV1QuotationsSearchInfo
func NewGetUapiDomesticStockV1QuotationsSearchInfoRequest(server string, params *GetUapiDomesticStockV1QuotationsSearchInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/search-info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PDNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PDNO", runtime.ParamLocationQuery, *params.PDNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PRDTTYPECD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PRDT_TYPE_CD", runtime.ParamLocationQuery, *params.PRDTTYPECD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsSearchStockInfoRequest generates requests for GetUapiDomesticStockV1QuotationsSearchStockInfo
func NewGetUapiDomesticStockV1QuotationsSearchStockInfoRequest(server string, params *GetUapiDomesticStockV1QuotationsSearchStockInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/search-stock-info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PDNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PDNO", runtime.ParamLocationQuery, *params.PDNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PRDTTYPECD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PRDT_TYPE_CD", runtime.ParamLocationQuery, *params.PRDTTYPECD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsTradprtByamtRequest generates requests for GetUapiDomesticStockV1QuotationsTradprtByamt
func NewGetUapiDomesticStockV1QuotationsTradprtByamtRequest(server string, params *GetUapiDomesticStockV1QuotationsTradprtByamtParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/tradprt-byamt")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDSCRDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_SCR_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDSCRDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1QuotationsVolumeRankRequest generates requests for GetUapiDomesticStockV1QuotationsVolumeRank
func NewGetUapiDomesticStockV1QuotationsVolumeRankRequest(server string, params *GetUapiDomesticStockV1QuotationsVolumeRankParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/quotations/volume-rank")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDSCRDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_SCR_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDSCRDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDDIVCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_DIV_CLS_CODE", runtime.ParamLocationQuery, *params.FIDDIVCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDBLNGCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_BLNG_CLS_CODE", runtime.ParamLocationQuery, *params.FIDBLNGCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDTRGTCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_TRGT_CLS_CODE", runtime.ParamLocationQuery, *params.FIDTRGTCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDTRGTEXLSCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_TRGT_EXLS_CLS_CODE", runtime.ParamLocationQuery, *params.FIDTRGTEXLSCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTPRICE1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_PRICE_1", runtime.ParamLocationQuery, *params.FIDINPUTPRICE1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTPRICE2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_PRICE_2", runtime.ParamLocationQuery, *params.FIDINPUTPRICE2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDVOLCNT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_VOL_CNT", runtime.ParamLocationQuery, *params.FIDVOLCNT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTDATE1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_DATE_1", runtime.ParamLocationQuery, *params.FIDINPUTDATE1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1RankingAfterHourBalanceRequest generates requests for GetUapiDomesticStockV1RankingAfterHourBalance
func NewGetUapiDomesticStockV1RankingAfterHourBalanceRequest(server string, params *GetUapiDomesticStockV1RankingAfterHourBalanceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/ranking/after-hour-balance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidCondScrDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_scr_div_code", runtime.ParamLocationQuery, *params.FidCondScrDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidRankSortClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_rank_sort_cls_code", runtime.ParamLocationQuery, *params.FidRankSortClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidDivClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_div_cls_code", runtime.ParamLocationQuery, *params.FidDivClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_cls_code", runtime.ParamLocationQuery, *params.FidTrgtClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtExlsClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_exls_cls_code", runtime.ParamLocationQuery, *params.FidTrgtExlsClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputPrice1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_price_1", runtime.ParamLocationQuery, *params.FidInputPrice1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputPrice2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_price_2", runtime.ParamLocationQuery, *params.FidInputPrice2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidVolCnt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_vol_cnt", runtime.ParamLocationQuery, *params.FidVolCnt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1RankingBulkTransNumRequest generates requests for GetUapiDomesticStockV1RankingBulkTransNum
func NewGetUapiDomesticStockV1RankingBulkTransNumRequest(server string, params *GetUapiDomesticStockV1RankingBulkTransNumParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/ranking/bulk-trans-num")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidCondScrDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_scr_div_code", runtime.ParamLocationQuery, *params.FidCondScrDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidRankSortClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_rank_sort_cls_code", runtime.ParamLocationQuery, *params.FidRankSortClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidDivClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_div_cls_code", runtime.ParamLocationQuery, *params.FidDivClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputPrice1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_price_1", runtime.ParamLocationQuery, *params.FidInputPrice1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidAplyRangPrc1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_aply_rang_prc_1", runtime.ParamLocationQuery, *params.FidAplyRangPrc1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidAplyRangPrc2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_aply_rang_prc_2", runtime.ParamLocationQuery, *params.FidAplyRangPrc2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidVolCnt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_vol_cnt", runtime.ParamLocationQuery, *params.FidVolCnt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_cls_code", runtime.ParamLocationQuery, *params.FidTrgtClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtExlsClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_exls_cls_code", runtime.ParamLocationQuery, *params.FidTrgtExlsClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd_2", runtime.ParamLocationQuery, *params.FidInputIscd2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1RankingCreditBalanceRequest generates requests for GetUapiDomesticStockV1RankingCreditBalance
func NewGetUapiDomesticStockV1RankingCreditBalanceRequest(server string, params *GetUapiDomesticStockV1RankingCreditBalanceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/ranking/credit-balance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondScrDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_scr_div_code", runtime.ParamLocationQuery, *params.FidCondScrDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidOption != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_option", runtime.ParamLocationQuery, *params.FidOption); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidRankSortClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_rank_sort_cls_code", runtime.ParamLocationQuery, *params.FidRankSortClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1RankingDisparityRequest generates requests for GetUapiDomesticStockV1RankingDisparity
func NewGetUapiDomesticStockV1RankingDisparityRequest(server string, params *GetUapiDomesticStockV1RankingDisparityParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/ranking/disparity")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidCondScrDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_scr_div_code", runtime.ParamLocationQuery, *params.FidCondScrDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidDivClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_div_cls_code", runtime.ParamLocationQuery, *params.FidDivClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidRankSortClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_rank_sort_cls_code", runtime.ParamLocationQuery, *params.FidRankSortClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidHourClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_hour_cls_code", runtime.ParamLocationQuery, *params.FidHourClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_cls_code", runtime.ParamLocationQuery, *params.FidTrgtClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtExlsClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_exls_cls_code", runtime.ParamLocationQuery, *params.FidTrgtExlsClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputPrice1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_price_1", runtime.ParamLocationQuery, *params.FidInputPrice1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputPrice2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_price_2", runtime.ParamLocationQuery, *params.FidInputPrice2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidVolCnt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_vol_cnt", runtime.ParamLocationQuery, *params.FidVolCnt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1RankingDividendRateRequest generates requests for GetUapiDomesticStockV1RankingDividendRate
func NewGetUapiDomesticStockV1RankingDividendRateRequest(server string, params *GetUapiDomesticStockV1RankingDividendRateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/ranking/dividend-rate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CTSAREA != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTS_AREA", runtime.ParamLocationQuery, *params.CTSAREA); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GB1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "GB1", runtime.ParamLocationQuery, *params.GB1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UPJONG != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UPJONG", runtime.ParamLocationQuery, *params.UPJONG); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GB2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "GB2", runtime.ParamLocationQuery, *params.GB2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GB3 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "GB3", runtime.ParamLocationQuery, *params.GB3); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "F_DT", runtime.ParamLocationQuery, *params.FDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "T_DT", runtime.ParamLocationQuery, *params.TDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GB4 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "GB4", runtime.ParamLocationQuery, *params.GB4); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1RankingExpTransUpdownRequest generates requests for GetUapiDomesticStockV1RankingExpTransUpdown
func NewGetUapiDomesticStockV1RankingExpTransUpdownRequest(server string, params *GetUapiDomesticStockV1RankingExpTransUpdownParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/ranking/exp-trans-updown")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidCondScrDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_scr_div_code", runtime.ParamLocationQuery, *params.FidCondScrDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidDivClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_div_cls_code", runtime.ParamLocationQuery, *params.FidDivClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidAplyRangPrc1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_aply_rang_prc_1", runtime.ParamLocationQuery, *params.FidAplyRangPrc1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidVolCnt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_vol_cnt", runtime.ParamLocationQuery, *params.FidVolCnt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidPbmn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_pbmn", runtime.ParamLocationQuery, *params.FidPbmn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidBlngClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_blng_cls_code", runtime.ParamLocationQuery, *params.FidBlngClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidMkopClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_mkop_cls_code", runtime.ParamLocationQuery, *params.FidMkopClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidRankSortClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_rank_sort_cls_code", runtime.ParamLocationQuery, *params.FidRankSortClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1RankingFinanceRatioRequest generates requests for GetUapiDomesticStockV1RankingFinanceRatio
func NewGetUapiDomesticStockV1RankingFinanceRatioRequest(server string, params *GetUapiDomesticStockV1RankingFinanceRatioParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/ranking/finance-ratio")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidCondScrDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_scr_div_code", runtime.ParamLocationQuery, *params.FidCondScrDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidDivClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_div_cls_code", runtime.ParamLocationQuery, *params.FidDivClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputPrice1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_price_1", runtime.ParamLocationQuery, *params.FidInputPrice1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputPrice2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_price_2", runtime.ParamLocationQuery, *params.FidInputPrice2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidVolCnt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_vol_cnt", runtime.ParamLocationQuery, *params.FidVolCnt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputOption1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_option_1", runtime.ParamLocationQuery, *params.FidInputOption1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputOption2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_option_2", runtime.ParamLocationQuery, *params.FidInputOption2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidRankSortClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_rank_sort_cls_code", runtime.ParamLocationQuery, *params.FidRankSortClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidBlngClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_blng_cls_code", runtime.ParamLocationQuery, *params.FidBlngClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtExlsClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_exls_cls_code", runtime.ParamLocationQuery, *params.FidTrgtExlsClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_cls_code", runtime.ParamLocationQuery, *params.FidTrgtClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1RankingFluctuationRequest generates requests for GetUapiDomesticStockV1RankingFluctuation
func NewGetUapiDomesticStockV1RankingFluctuationRequest(server string, params *GetUapiDomesticStockV1RankingFluctuationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/ranking/fluctuation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidCondScrDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_scr_div_code", runtime.ParamLocationQuery, *params.FidCondScrDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidRankSortClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_rank_sort_cls_code", runtime.ParamLocationQuery, *params.FidRankSortClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputCnt1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_cnt_1", runtime.ParamLocationQuery, *params.FidInputCnt1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidPrcClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_prc_cls_code", runtime.ParamLocationQuery, *params.FidPrcClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputPrice1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_price_1", runtime.ParamLocationQuery, *params.FidInputPrice1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputPrice2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_price_2", runtime.ParamLocationQuery, *params.FidInputPrice2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidVolCnt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_vol_cnt", runtime.ParamLocationQuery, *params.FidVolCnt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_cls_code", runtime.ParamLocationQuery, *params.FidTrgtClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtExlsClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_exls_cls_code", runtime.ParamLocationQuery, *params.FidTrgtExlsClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidDivClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_div_cls_code", runtime.ParamLocationQuery, *params.FidDivClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidRsflRate1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_rsfl_rate1", runtime.ParamLocationQuery, *params.FidRsflRate1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidRsflRate2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_rsfl_rate2", runtime.ParamLocationQuery, *params.FidRsflRate2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1RankingMarketCapRequest generates requests for GetUapiDomesticStockV1RankingMarketCap
func NewGetUapiDomesticStockV1RankingMarketCapRequest(server string, params *GetUapiDomesticStockV1RankingMarketCapParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/ranking/market-cap")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidCondScrDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_scr_div_code", runtime.ParamLocationQuery, *params.FidCondScrDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidDivClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_div_cls_code", runtime.ParamLocationQuery, *params.FidDivClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_cls_code", runtime.ParamLocationQuery, *params.FidTrgtClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtExlsClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_exls_cls_code", runtime.ParamLocationQuery, *params.FidTrgtExlsClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputPrice1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_price_1", runtime.ParamLocationQuery, *params.FidInputPrice1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputPrice2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_price_2", runtime.ParamLocationQuery, *params.FidInputPrice2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidVolCnt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_vol_cnt", runtime.ParamLocationQuery, *params.FidVolCnt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1RankingMarketValueRequest generates requests for GetUapiDomesticStockV1RankingMarketValue
func NewGetUapiDomesticStockV1RankingMarketValueRequest(server string, params *GetUapiDomesticStockV1RankingMarketValueParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/ranking/market-value")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidCondScrDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_scr_div_code", runtime.ParamLocationQuery, *params.FidCondScrDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidDivClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_div_cls_code", runtime.ParamLocationQuery, *params.FidDivClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputPrice1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_price_1", runtime.ParamLocationQuery, *params.FidInputPrice1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputPrice2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_price_2", runtime.ParamLocationQuery, *params.FidInputPrice2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidVolCnt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_vol_cnt", runtime.ParamLocationQuery, *params.FidVolCnt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputOption1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_option_1", runtime.ParamLocationQuery, *params.FidInputOption1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputOption2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_option_2", runtime.ParamLocationQuery, *params.FidInputOption2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidRankSortClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_rank_sort_cls_code", runtime.ParamLocationQuery, *params.FidRankSortClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidBlngClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_blng_cls_code", runtime.ParamLocationQuery, *params.FidBlngClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtExlsClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_exls_cls_code", runtime.ParamLocationQuery, *params.FidTrgtExlsClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_cls_code", runtime.ParamLocationQuery, *params.FidTrgtClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1RankingNearNewHighlowRequest generates requests for GetUapiDomesticStockV1RankingNearNewHighlow
func NewGetUapiDomesticStockV1RankingNearNewHighlowRequest(server string, params *GetUapiDomesticStockV1RankingNearNewHighlowParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/ranking/near-new-highlow")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidCondScrDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_scr_div_code", runtime.ParamLocationQuery, *params.FidCondScrDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidDivClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_div_cls_code", runtime.ParamLocationQuery, *params.FidDivClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputCnt1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_cnt_1", runtime.ParamLocationQuery, *params.FidInputCnt1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputCnt2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_cnt_2", runtime.ParamLocationQuery, *params.FidInputCnt2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidPrcClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_prc_cls_code", runtime.ParamLocationQuery, *params.FidPrcClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_cls_code", runtime.ParamLocationQuery, *params.FidTrgtClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtExlsClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_exls_cls_code", runtime.ParamLocationQuery, *params.FidTrgtExlsClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidAplyRangPrc1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_aply_rang_prc_1", runtime.ParamLocationQuery, *params.FidAplyRangPrc1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidAplyRangPrc2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_aply_rang_prc_2", runtime.ParamLocationQuery, *params.FidAplyRangPrc2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidAplyRangVol != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_aply_rang_vol", runtime.ParamLocationQuery, *params.FidAplyRangVol); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1RankingOvertimeExpTransFluctRequest generates requests for GetUapiDomesticStockV1RankingOvertimeExpTransFluct
func NewGetUapiDomesticStockV1RankingOvertimeExpTransFluctRequest(server string, params *GetUapiDomesticStockV1RankingOvertimeExpTransFluctParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/ranking/overtime-exp-trans-fluct")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDSCRDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_SCR_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDSCRDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDRANKSORTCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_RANK_SORT_CLS_CODE", runtime.ParamLocationQuery, *params.FIDRANKSORTCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDDIVCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_DIV_CLS_CODE", runtime.ParamLocationQuery, *params.FIDDIVCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTPRICE1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_PRICE_1", runtime.ParamLocationQuery, *params.FIDINPUTPRICE1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTPRICE2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_PRICE_2", runtime.ParamLocationQuery, *params.FIDINPUTPRICE2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTVOL1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_VOL_1", runtime.ParamLocationQuery, *params.FIDINPUTVOL1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1RankingOvertimeFluctuationRequest generates requests for GetUapiDomesticStockV1RankingOvertimeFluctuation
func NewGetUapiDomesticStockV1RankingOvertimeFluctuationRequest(server string, params *GetUapiDomesticStockV1RankingOvertimeFluctuationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/ranking/overtime-fluctuation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidMrktClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_mrkt_cls_code", runtime.ParamLocationQuery, *params.FidMrktClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidCondScrDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_scr_div_code", runtime.ParamLocationQuery, *params.FidCondScrDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidDivClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_div_cls_code", runtime.ParamLocationQuery, *params.FidDivClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputPrice1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_price_1", runtime.ParamLocationQuery, *params.FidInputPrice1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputPrice2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_price_2", runtime.ParamLocationQuery, *params.FidInputPrice2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidVolCnt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_vol_cnt", runtime.ParamLocationQuery, *params.FidVolCnt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_cls_code", runtime.ParamLocationQuery, *params.FidTrgtClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtExlsClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_exls_cls_code", runtime.ParamLocationQuery, *params.FidTrgtExlsClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1RankingOvertimeVolumeRequest generates requests for GetUapiDomesticStockV1RankingOvertimeVolume
func NewGetUapiDomesticStockV1RankingOvertimeVolumeRequest(server string, params *GetUapiDomesticStockV1RankingOvertimeVolumeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/ranking/overtime-volume")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDSCRDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_SCR_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDSCRDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDRANKSORTCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_RANK_SORT_CLS_CODE", runtime.ParamLocationQuery, *params.FIDRANKSORTCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTPRICE1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_PRICE_1", runtime.ParamLocationQuery, *params.FIDINPUTPRICE1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTPRICE2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_PRICE_2", runtime.ParamLocationQuery, *params.FIDINPUTPRICE2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDVOLCNT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_VOL_CNT", runtime.ParamLocationQuery, *params.FIDVOLCNT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDTRGTCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_TRGT_CLS_CODE", runtime.ParamLocationQuery, *params.FIDTRGTCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDTRGTEXLSCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_TRGT_EXLS_CLS_CODE", runtime.ParamLocationQuery, *params.FIDTRGTEXLSCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1RankingPreferDisparateRatioRequest generates requests for GetUapiDomesticStockV1RankingPreferDisparateRatio
func NewGetUapiDomesticStockV1RankingPreferDisparateRatioRequest(server string, params *GetUapiDomesticStockV1RankingPreferDisparateRatioParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/ranking/prefer-disparate-ratio")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidCondScrDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_scr_div_code", runtime.ParamLocationQuery, *params.FidCondScrDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidDivClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_div_cls_code", runtime.ParamLocationQuery, *params.FidDivClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_cls_code", runtime.ParamLocationQuery, *params.FidTrgtClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtExlsClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_exls_cls_code", runtime.ParamLocationQuery, *params.FidTrgtExlsClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputPrice1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_price_1", runtime.ParamLocationQuery, *params.FidInputPrice1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputPrice2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_price_2", runtime.ParamLocationQuery, *params.FidInputPrice2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidVolCnt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_vol_cnt", runtime.ParamLocationQuery, *params.FidVolCnt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1RankingProfitAssetIndexRequest generates requests for GetUapiDomesticStockV1RankingProfitAssetIndex
func NewGetUapiDomesticStockV1RankingProfitAssetIndexRequest(server string, params *GetUapiDomesticStockV1RankingProfitAssetIndexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/ranking/profit-asset-index")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidCondScrDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_scr_div_code", runtime.ParamLocationQuery, *params.FidCondScrDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidDivClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_div_cls_code", runtime.ParamLocationQuery, *params.FidDivClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputPrice1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_price_1", runtime.ParamLocationQuery, *params.FidInputPrice1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputPrice2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_price_2", runtime.ParamLocationQuery, *params.FidInputPrice2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidVolCnt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_vol_cnt", runtime.ParamLocationQuery, *params.FidVolCnt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputOption1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_option_1", runtime.ParamLocationQuery, *params.FidInputOption1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputOption2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_option_2", runtime.ParamLocationQuery, *params.FidInputOption2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidRankSortClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_rank_sort_cls_code", runtime.ParamLocationQuery, *params.FidRankSortClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidBlngClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_blng_cls_code", runtime.ParamLocationQuery, *params.FidBlngClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtExlsClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_exls_cls_code", runtime.ParamLocationQuery, *params.FidTrgtExlsClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_cls_code", runtime.ParamLocationQuery, *params.FidTrgtClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1RankingQuoteBalanceRequest generates requests for GetUapiDomesticStockV1RankingQuoteBalance
func NewGetUapiDomesticStockV1RankingQuoteBalanceRequest(server string, params *GetUapiDomesticStockV1RankingQuoteBalanceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/ranking/quote-balance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidCondScrDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_scr_div_code", runtime.ParamLocationQuery, *params.FidCondScrDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidRankSortClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_rank_sort_cls_code", runtime.ParamLocationQuery, *params.FidRankSortClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidDivClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_div_cls_code", runtime.ParamLocationQuery, *params.FidDivClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_cls_code", runtime.ParamLocationQuery, *params.FidTrgtClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtExlsClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_exls_cls_code", runtime.ParamLocationQuery, *params.FidTrgtExlsClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputPrice1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_price_1", runtime.ParamLocationQuery, *params.FidInputPrice1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputPrice2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_price_2", runtime.ParamLocationQuery, *params.FidInputPrice2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidVolCnt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_vol_cnt", runtime.ParamLocationQuery, *params.FidVolCnt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1RankingShortSaleRequest generates requests for GetUapiDomesticStockV1RankingShortSale
func NewGetUapiDomesticStockV1RankingShortSaleRequest(server string, params *GetUapiDomesticStockV1RankingShortSaleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/ranking/short-sale")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidCondScrDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_scr_div_code", runtime.ParamLocationQuery, *params.FidCondScrDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidPeriodDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_period_div_code", runtime.ParamLocationQuery, *params.FidPeriodDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputCnt1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_cnt_1", runtime.ParamLocationQuery, *params.FidInputCnt1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtExlsClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_exls_cls_code", runtime.ParamLocationQuery, *params.FidTrgtExlsClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_cls_code", runtime.ParamLocationQuery, *params.FidTrgtClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidAplyRangPrc1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_aply_rang_prc_1", runtime.ParamLocationQuery, *params.FidAplyRangPrc1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidAplyRangPrc2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_aply_rang_prc_2", runtime.ParamLocationQuery, *params.FidAplyRangPrc2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidAplyRangVol != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_aply_rang_vol", runtime.ParamLocationQuery, *params.FidAplyRangVol); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1RankingTopInterestStockRequest generates requests for GetUapiDomesticStockV1RankingTopInterestStock
func NewGetUapiDomesticStockV1RankingTopInterestStockRequest(server string, params *GetUapiDomesticStockV1RankingTopInterestStockParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/ranking/top-interest-stock")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidCondScrDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_scr_div_code", runtime.ParamLocationQuery, *params.FidCondScrDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtExlsClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_exls_cls_code", runtime.ParamLocationQuery, *params.FidTrgtExlsClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_cls_code", runtime.ParamLocationQuery, *params.FidTrgtClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputPrice1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_price_1", runtime.ParamLocationQuery, *params.FidInputPrice1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputPrice2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_price_2", runtime.ParamLocationQuery, *params.FidInputPrice2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidVolCnt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_vol_cnt", runtime.ParamLocationQuery, *params.FidVolCnt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidDivClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_div_cls_code", runtime.ParamLocationQuery, *params.FidDivClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd_2", runtime.ParamLocationQuery, *params.FidInputIscd2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputCnt1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_cnt_1", runtime.ParamLocationQuery, *params.FidInputCnt1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1RankingTradedByCompanyRequest generates requests for GetUapiDomesticStockV1RankingTradedByCompany
func NewGetUapiDomesticStockV1RankingTradedByCompanyRequest(server string, params *GetUapiDomesticStockV1RankingTradedByCompanyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/ranking/traded-by-company")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidCondScrDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_scr_div_code", runtime.ParamLocationQuery, *params.FidCondScrDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidDivClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_div_cls_code", runtime.ParamLocationQuery, *params.FidDivClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidRankSortClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_rank_sort_cls_code", runtime.ParamLocationQuery, *params.FidRankSortClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputDate1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_date_1", runtime.ParamLocationQuery, *params.FidInputDate1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputDate2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_date_2", runtime.ParamLocationQuery, *params.FidInputDate2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_cls_code", runtime.ParamLocationQuery, *params.FidTrgtClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtExlsClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_exls_cls_code", runtime.ParamLocationQuery, *params.FidTrgtExlsClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidAplyRangPrc1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_aply_rang_prc_1", runtime.ParamLocationQuery, *params.FidAplyRangPrc1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidAplyRangPrc2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_aply_rang_prc_2", runtime.ParamLocationQuery, *params.FidAplyRangPrc2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidAplyRangVol != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_aply_rang_vol", runtime.ParamLocationQuery, *params.FidAplyRangVol); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1RankingVolumePowerRequest generates requests for GetUapiDomesticStockV1RankingVolumePower
func NewGetUapiDomesticStockV1RankingVolumePowerRequest(server string, params *GetUapiDomesticStockV1RankingVolumePowerParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/ranking/volume-power")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidCondScrDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_scr_div_code", runtime.ParamLocationQuery, *params.FidCondScrDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidDivClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_div_cls_code", runtime.ParamLocationQuery, *params.FidDivClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputPrice1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_price_1", runtime.ParamLocationQuery, *params.FidInputPrice1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputPrice2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_price_2", runtime.ParamLocationQuery, *params.FidInputPrice2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidVolCnt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_vol_cnt", runtime.ParamLocationQuery, *params.FidVolCnt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtExlsClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_exls_cls_code", runtime.ParamLocationQuery, *params.FidTrgtExlsClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidTrgtClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_trgt_cls_code", runtime.ParamLocationQuery, *params.FidTrgtClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1TradingInquireAccountBalanceRequest generates requests for GetUapiDomesticStockV1TradingInquireAccountBalance
func NewGetUapiDomesticStockV1TradingInquireAccountBalanceRequest(server string, params *GetUapiDomesticStockV1TradingInquireAccountBalanceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/trading/inquire-account-balance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRDVSN1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_DVSN_1", runtime.ParamLocationQuery, *params.INQRDVSN1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BSPRBFDTAPLYYN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "BSPR_BF_DT_APLY_YN", runtime.ParamLocationQuery, *params.BSPRBFDTAPLYYN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1TradingInquireBalanceRequest generates requests for GetUapiDomesticStockV1TradingInquireBalance
func NewGetUapiDomesticStockV1TradingInquireBalanceRequest(server string, params *GetUapiDomesticStockV1TradingInquireBalanceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/trading/inquire-balance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AFHRFLPRYN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "AFHR_FLPR_YN", runtime.ParamLocationQuery, *params.AFHRFLPRYN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OFLYN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OFL_YN", runtime.ParamLocationQuery, *params.OFLYN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRDVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_DVSN", runtime.ParamLocationQuery, *params.INQRDVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UNPRDVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UNPR_DVSN", runtime.ParamLocationQuery, *params.UNPRDVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FUNDSTTLICLDYN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FUND_STTL_ICLD_YN", runtime.ParamLocationQuery, *params.FUNDSTTLICLDYN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FNCGAMTAUTORDPTYN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FNCG_AMT_AUTO_RDPT_YN", runtime.ParamLocationQuery, *params.FNCGAMTAUTORDPTYN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PRCSDVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PRCS_DVSN", runtime.ParamLocationQuery, *params.PRCSDVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK100 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK100", runtime.ParamLocationQuery, *params.CTXAREAFK100); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK100 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK100", runtime.ParamLocationQuery, *params.CTXAREANK100); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1TradingInquireBalanceRlzPlRequest generates requests for GetUapiDomesticStockV1TradingInquireBalanceRlzPl
func NewGetUapiDomesticStockV1TradingInquireBalanceRlzPlRequest(server string, params *GetUapiDomesticStockV1TradingInquireBalanceRlzPlParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/trading/inquire-balance-rlz-pl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AFHRFLPRYN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "AFHR_FLPR_YN", runtime.ParamLocationQuery, *params.AFHRFLPRYN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OFLYN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OFL_YN", runtime.ParamLocationQuery, *params.OFLYN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRDVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_DVSN", runtime.ParamLocationQuery, *params.INQRDVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UNPRDVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UNPR_DVSN", runtime.ParamLocationQuery, *params.UNPRDVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FUNDSTTLICLDYN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FUND_STTL_ICLD_YN", runtime.ParamLocationQuery, *params.FUNDSTTLICLDYN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FNCGAMTAUTORDPTYN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FNCG_AMT_AUTO_RDPT_YN", runtime.ParamLocationQuery, *params.FNCGAMTAUTORDPTYN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PRCSDVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PRCS_DVSN", runtime.ParamLocationQuery, *params.PRCSDVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.COSTICLDYN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "COST_ICLD_YN", runtime.ParamLocationQuery, *params.COSTICLDYN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK100 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK100", runtime.ParamLocationQuery, *params.CTXAREAFK100); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK100 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK100", runtime.ParamLocationQuery, *params.CTXAREANK100); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1TradingInquireCreditPsamountRequest generates requests for GetUapiDomesticStockV1TradingInquireCreditPsamount
func NewGetUapiDomesticStockV1TradingInquireCreditPsamountRequest(server string, params *GetUapiDomesticStockV1TradingInquireCreditPsamountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/trading/inquire-credit-psamount")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PDNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PDNO", runtime.ParamLocationQuery, *params.PDNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ORDUNPR != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ORD_UNPR", runtime.ParamLocationQuery, *params.ORDUNPR); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ORDDVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ORD_DVSN", runtime.ParamLocationQuery, *params.ORDDVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CRDTTYPE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CRDT_TYPE", runtime.ParamLocationQuery, *params.CRDTTYPE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OVRSICLDYN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OVRS_ICLD_YN", runtime.ParamLocationQuery, *params.OVRSICLDYN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CMAEVLUAMTICLDYN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CMA_EVLU_AMT_ICLD_YN", runtime.ParamLocationQuery, *params.CMAEVLUAMTICLDYN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1TradingInquireDailyCcldRequest generates requests for GetUapiDomesticStockV1TradingInquireDailyCcld
func NewGetUapiDomesticStockV1TradingInquireDailyCcldRequest(server string, params *GetUapiDomesticStockV1TradingInquireDailyCcldParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/trading/inquire-daily-ccld")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRSTRTDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_STRT_DT", runtime.ParamLocationQuery, *params.INQRSTRTDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRENDDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_END_DT", runtime.ParamLocationQuery, *params.INQRENDDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SLLBUYDVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SLL_BUY_DVSN_CD", runtime.ParamLocationQuery, *params.SLLBUYDVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRDVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_DVSN", runtime.ParamLocationQuery, *params.INQRDVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PDNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PDNO", runtime.ParamLocationQuery, *params.PDNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CCLDDVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CCLD_DVSN", runtime.ParamLocationQuery, *params.CCLDDVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ORDGNOBRNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ORD_GNO_BRNO", runtime.ParamLocationQuery, *params.ORDGNOBRNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ODNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ODNO", runtime.ParamLocationQuery, *params.ODNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRDVSN3 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_DVSN_3", runtime.ParamLocationQuery, *params.INQRDVSN3); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRDVSN1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_DVSN_1", runtime.ParamLocationQuery, *params.INQRDVSN1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK100 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK100", runtime.ParamLocationQuery, *params.CTXAREAFK100); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK100 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK100", runtime.ParamLocationQuery, *params.CTXAREANK100); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1TradingInquirePeriodProfitRequest generates requests for GetUapiDomesticStockV1TradingInquirePeriodProfit
func NewGetUapiDomesticStockV1TradingInquirePeriodProfitRequest(server string, params *GetUapiDomesticStockV1TradingInquirePeriodProfitParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/trading/inquire-period-profit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PDNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PDNO", runtime.ParamLocationQuery, *params.PDNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRSTRTDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_STRT_DT", runtime.ParamLocationQuery, *params.INQRSTRTDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRENDDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_END_DT", runtime.ParamLocationQuery, *params.INQRENDDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SORTDVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SORT_DVSN", runtime.ParamLocationQuery, *params.SORTDVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRDVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_DVSN", runtime.ParamLocationQuery, *params.INQRDVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CBLCDVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CBLC_DVSN", runtime.ParamLocationQuery, *params.CBLCDVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK100 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK100", runtime.ParamLocationQuery, *params.CTXAREAFK100); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK100 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK100", runtime.ParamLocationQuery, *params.CTXAREANK100); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.TrCont != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "tr_cont", runtime.ParamLocationHeader, *params.TrCont)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_cont", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1TradingInquirePeriodTradeProfitRequest generates requests for GetUapiDomesticStockV1TradingInquirePeriodTradeProfit
func NewGetUapiDomesticStockV1TradingInquirePeriodTradeProfitRequest(server string, params *GetUapiDomesticStockV1TradingInquirePeriodTradeProfitParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/trading/inquire-period-trade-profit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PDNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PDNO", runtime.ParamLocationQuery, *params.PDNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRSTRTDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_STRT_DT", runtime.ParamLocationQuery, *params.INQRSTRTDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRENDDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_END_DT", runtime.ParamLocationQuery, *params.INQRENDDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SORTDVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SORT_DVSN", runtime.ParamLocationQuery, *params.SORTDVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CBLCDVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CBLC_DVSN", runtime.ParamLocationQuery, *params.CBLCDVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK100 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK100", runtime.ParamLocationQuery, *params.CTXAREAFK100); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK100 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK100", runtime.ParamLocationQuery, *params.CTXAREANK100); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.TrCont != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "tr_cont", runtime.ParamLocationHeader, *params.TrCont)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_cont", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1TradingInquirePsblOrderRequest generates requests for GetUapiDomesticStockV1TradingInquirePsblOrder
func NewGetUapiDomesticStockV1TradingInquirePsblOrderRequest(server string, params *GetUapiDomesticStockV1TradingInquirePsblOrderParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/trading/inquire-psbl-order")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PDNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PDNO", runtime.ParamLocationQuery, *params.PDNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ORDUNPR != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ORD_UNPR", runtime.ParamLocationQuery, *params.ORDUNPR); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ORDDVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ORD_DVSN", runtime.ParamLocationQuery, *params.ORDDVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OVRSICLDYN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OVRS_ICLD_YN", runtime.ParamLocationQuery, *params.OVRSICLDYN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CMAEVLUAMTICLDYN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CMA_EVLU_AMT_ICLD_YN", runtime.ParamLocationQuery, *params.CMAEVLUAMTICLDYN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1TradingInquirePsblRvsecnclRequest generates requests for GetUapiDomesticStockV1TradingInquirePsblRvsecncl
func NewGetUapiDomesticStockV1TradingInquirePsblRvsecnclRequest(server string, params *GetUapiDomesticStockV1TradingInquirePsblRvsecnclParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/trading/inquire-psbl-rvsecncl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK100 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK100", runtime.ParamLocationQuery, *params.CTXAREAFK100); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK100 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK100", runtime.ParamLocationQuery, *params.CTXAREANK100); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRDVSN1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_DVSN_1", runtime.ParamLocationQuery, *params.INQRDVSN1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRDVSN2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_DVSN_2", runtime.ParamLocationQuery, *params.INQRDVSN2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1TradingInquirePsblSellRequest generates requests for GetUapiDomesticStockV1TradingInquirePsblSell
func NewGetUapiDomesticStockV1TradingInquirePsblSellRequest(server string, params *GetUapiDomesticStockV1TradingInquirePsblSellParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/trading/inquire-psbl-sell")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PDNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PDNO", runtime.ParamLocationQuery, *params.PDNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewPostUapiDomesticStockV1TradingOrderCashRequest calls the generic PostUapiDomesticStockV1TradingOrderCash builder with application/json body
func NewPostUapiDomesticStockV1TradingOrderCashRequest(server string, params *PostUapiDomesticStockV1TradingOrderCashParams, body PostUapiDomesticStockV1TradingOrderCashJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUapiDomesticStockV1TradingOrderCashRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostUapiDomesticStockV1TradingOrderCashRequestWithBody generates requests for PostUapiDomesticStockV1TradingOrderCash with any type of body
func NewPostUapiDomesticStockV1TradingOrderCashRequestWithBody(server string, params *PostUapiDomesticStockV1TradingOrderCashParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/trading/order-cash")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Hashkey != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "hashkey", runtime.ParamLocationHeader, *params.Hashkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("hashkey", headerParam5)
		}

	}

	return req, nil
}

// NewPostUapiDomesticStockV1TradingOrderCreditRequest calls the generic PostUapiDomesticStockV1TradingOrderCredit builder with application/json body
func NewPostUapiDomesticStockV1TradingOrderCreditRequest(server string, params *PostUapiDomesticStockV1TradingOrderCreditParams, body PostUapiDomesticStockV1TradingOrderCreditJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUapiDomesticStockV1TradingOrderCreditRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostUapiDomesticStockV1TradingOrderCreditRequestWithBody generates requests for PostUapiDomesticStockV1TradingOrderCredit with any type of body
func NewPostUapiDomesticStockV1TradingOrderCreditRequestWithBody(server string, params *PostUapiDomesticStockV1TradingOrderCreditParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/trading/order-credit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Hashkey != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "hashkey", runtime.ParamLocationHeader, *params.Hashkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("hashkey", headerParam5)
		}

	}

	return req, nil
}

// NewPostUapiDomesticStockV1TradingOrderResvRequest calls the generic PostUapiDomesticStockV1TradingOrderResv builder with application/json body
func NewPostUapiDomesticStockV1TradingOrderResvRequest(server string, params *PostUapiDomesticStockV1TradingOrderResvParams, body PostUapiDomesticStockV1TradingOrderResvJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUapiDomesticStockV1TradingOrderResvRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostUapiDomesticStockV1TradingOrderResvRequestWithBody generates requests for PostUapiDomesticStockV1TradingOrderResv with any type of body
func NewPostUapiDomesticStockV1TradingOrderResvRequestWithBody(server string, params *PostUapiDomesticStockV1TradingOrderResvParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/trading/order-resv")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Hashkey != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "hashkey", runtime.ParamLocationHeader, *params.Hashkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("hashkey", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1TradingOrderResvCcnlRequest generates requests for GetUapiDomesticStockV1TradingOrderResvCcnl
func NewGetUapiDomesticStockV1TradingOrderResvCcnlRequest(server string, params *GetUapiDomesticStockV1TradingOrderResvCcnlParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/trading/order-resv-ccnl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RSVNORDORDDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "RSVN_ORD_ORD_DT", runtime.ParamLocationQuery, *params.RSVNORDORDDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RSVNORDENDDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "RSVN_ORD_END_DT", runtime.ParamLocationQuery, *params.RSVNORDENDDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RSVNORDSEQ != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "RSVN_ORD_SEQ", runtime.ParamLocationQuery, *params.RSVNORDSEQ); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TMNLMDIAKINDCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "TMNL_MDIA_KIND_CD", runtime.ParamLocationQuery, *params.TMNLMDIAKINDCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PRCSDVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PRCS_DVSN_CD", runtime.ParamLocationQuery, *params.PRCSDVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CNCLYN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CNCL_YN", runtime.ParamLocationQuery, *params.CNCLYN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PDNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PDNO", runtime.ParamLocationQuery, *params.PDNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SLLBUYDVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SLL_BUY_DVSN_CD", runtime.ParamLocationQuery, *params.SLLBUYDVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK200", runtime.ParamLocationQuery, *params.CTXAREAFK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK200", runtime.ParamLocationQuery, *params.CTXAREANK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewPostUapiDomesticStockV1TradingOrderResvRvsecnclRequest calls the generic PostUapiDomesticStockV1TradingOrderResvRvsecncl builder with application/json body
func NewPostUapiDomesticStockV1TradingOrderResvRvsecnclRequest(server string, params *PostUapiDomesticStockV1TradingOrderResvRvsecnclParams, body PostUapiDomesticStockV1TradingOrderResvRvsecnclJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUapiDomesticStockV1TradingOrderResvRvsecnclRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostUapiDomesticStockV1TradingOrderResvRvsecnclRequestWithBody generates requests for PostUapiDomesticStockV1TradingOrderResvRvsecncl with any type of body
func NewPostUapiDomesticStockV1TradingOrderResvRvsecnclRequestWithBody(server string, params *PostUapiDomesticStockV1TradingOrderResvRvsecnclParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/trading/order-resv-rvsecncl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Hashkey != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "hashkey", runtime.ParamLocationHeader, *params.Hashkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("hashkey", headerParam5)
		}

	}

	return req, nil
}

// NewPostUapiDomesticStockV1TradingOrderRvsecnclRequest calls the generic PostUapiDomesticStockV1TradingOrderRvsecncl builder with application/json body
func NewPostUapiDomesticStockV1TradingOrderRvsecnclRequest(server string, params *PostUapiDomesticStockV1TradingOrderRvsecnclParams, body PostUapiDomesticStockV1TradingOrderRvsecnclJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUapiDomesticStockV1TradingOrderRvsecnclRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostUapiDomesticStockV1TradingOrderRvsecnclRequestWithBody generates requests for PostUapiDomesticStockV1TradingOrderRvsecncl with any type of body
func NewPostUapiDomesticStockV1TradingOrderRvsecnclRequestWithBody(server string, params *PostUapiDomesticStockV1TradingOrderRvsecnclParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/trading/order-rvsecncl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Hashkey != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "hashkey", runtime.ParamLocationHeader, *params.Hashkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("hashkey", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1TradingPensionInquireBalanceRequest generates requests for GetUapiDomesticStockV1TradingPensionInquireBalance
func NewGetUapiDomesticStockV1TradingPensionInquireBalanceRequest(server string, params *GetUapiDomesticStockV1TradingPensionInquireBalanceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/trading/pension/inquire-balance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACCADVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACCA_DVSN_CD", runtime.ParamLocationQuery, *params.ACCADVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRDVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_DVSN", runtime.ParamLocationQuery, *params.INQRDVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK100 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK100", runtime.ParamLocationQuery, *params.CTXAREAFK100); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK100 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK100", runtime.ParamLocationQuery, *params.CTXAREANK100); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1TradingPensionInquireDailyCcldRequest generates requests for GetUapiDomesticStockV1TradingPensionInquireDailyCcld
func NewGetUapiDomesticStockV1TradingPensionInquireDailyCcldRequest(server string, params *GetUapiDomesticStockV1TradingPensionInquireDailyCcldParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/trading/pension/inquire-daily-ccld")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.USERDVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "USER_DVSN_CD", runtime.ParamLocationQuery, *params.USERDVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SLLBUYDVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SLL_BUY_DVSN_CD", runtime.ParamLocationQuery, *params.SLLBUYDVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CCLDNCCSDVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CCLD_NCCS_DVSN", runtime.ParamLocationQuery, *params.CCLDNCCSDVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRDVSN3 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_DVSN_3", runtime.ParamLocationQuery, *params.INQRDVSN3); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK100 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK100", runtime.ParamLocationQuery, *params.CTXAREAFK100); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK100 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK100", runtime.ParamLocationQuery, *params.CTXAREANK100); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1TradingPensionInquireDepositRequest generates requests for GetUapiDomesticStockV1TradingPensionInquireDeposit
func NewGetUapiDomesticStockV1TradingPensionInquireDepositRequest(server string, params *GetUapiDomesticStockV1TradingPensionInquireDepositParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/trading/pension/inquire-deposit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACCADVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACCA_DVSN_CD", runtime.ParamLocationQuery, *params.ACCADVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1TradingPensionInquirePresentBalanceRequest generates requests for GetUapiDomesticStockV1TradingPensionInquirePresentBalance
func NewGetUapiDomesticStockV1TradingPensionInquirePresentBalanceRequest(server string, params *GetUapiDomesticStockV1TradingPensionInquirePresentBalanceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/trading/pension/inquire-present-balance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.USERDVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "USER_DVSN_CD", runtime.ParamLocationQuery, *params.USERDVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK100 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK100", runtime.ParamLocationQuery, *params.CTXAREAFK100); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK100 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK100", runtime.ParamLocationQuery, *params.CTXAREANK100); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiDomesticStockV1TradingPensionInquirePsblOrderRequest generates requests for GetUapiDomesticStockV1TradingPensionInquirePsblOrder
func NewGetUapiDomesticStockV1TradingPensionInquirePsblOrderRequest(server string, params *GetUapiDomesticStockV1TradingPensionInquirePsblOrderParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/domestic-stock/v1/trading/pension/inquire-psbl-order")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PDNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PDNO", runtime.ParamLocationQuery, *params.PDNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ORDUNPR != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ORD_UNPR", runtime.ParamLocationQuery, *params.ORDUNPR); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ORDDVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ORD_DVSN", runtime.ParamLocationQuery, *params.ORDDVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CMAEVLUAMTICLDYN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CMA_EVLU_AMT_ICLD_YN", runtime.ParamLocationQuery, *params.CMAEVLUAMTICLDYN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACCADVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACCA_DVSN_CD", runtime.ParamLocationQuery, *params.ACCADVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiElwV1QuotationsCompareStocksRequest generates requests for GetUapiElwV1QuotationsCompareStocks
func NewGetUapiElwV1QuotationsCompareStocksRequest(server string, params *GetUapiElwV1QuotationsCompareStocksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/elw/v1/quotations/compare-stocks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDSCRDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_SCR_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDSCRDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiElwV1QuotationsCondSearchRequest generates requests for GetUapiElwV1QuotationsCondSearch
func NewGetUapiElwV1QuotationsCondSearchRequest(server string, params *GetUapiElwV1QuotationsCondSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/elw/v1/quotations/cond-search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDSCRDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_SCR_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDSCRDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDRANKSORTCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_RANK_SORT_CLS_CODE", runtime.ParamLocationQuery, *params.FIDRANKSORTCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTCNT1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_CNT_1", runtime.ParamLocationQuery, *params.FIDINPUTCNT1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDRANKSORTCLSCODE2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_RANK_SORT_CLS_CODE_2", runtime.ParamLocationQuery, *params.FIDRANKSORTCLSCODE2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTCNT2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_CNT_2", runtime.ParamLocationQuery, *params.FIDINPUTCNT2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDRANKSORTCLSCODE3 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_RANK_SORT_CLS_CODE_3", runtime.ParamLocationQuery, *params.FIDRANKSORTCLSCODE3); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTCNT3 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_CNT_3", runtime.ParamLocationQuery, *params.FIDINPUTCNT3); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDTRGTCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_TRGT_CLS_CODE", runtime.ParamLocationQuery, *params.FIDTRGTCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDUNASINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_UNAS_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDUNASINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDMRKTCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_MRKT_CLS_CODE", runtime.ParamLocationQuery, *params.FIDMRKTCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTDATE1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_DATE_1", runtime.ParamLocationQuery, *params.FIDINPUTDATE1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTDATE2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_DATE_2", runtime.ParamLocationQuery, *params.FIDINPUTDATE2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_2", runtime.ParamLocationQuery, *params.FIDINPUTISCD2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDETCCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_ETC_CLS_CODE", runtime.ParamLocationQuery, *params.FIDETCCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTRMNNDYNU1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_RMNN_DYNU_1", runtime.ParamLocationQuery, *params.FIDINPUTRMNNDYNU1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTRMNNDYNU2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_RMNN_DYNU_2", runtime.ParamLocationQuery, *params.FIDINPUTRMNNDYNU2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDPRPRCNT1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_PRPR_CNT1", runtime.ParamLocationQuery, *params.FIDPRPRCNT1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDPRPRCNT2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_PRPR_CNT2", runtime.ParamLocationQuery, *params.FIDPRPRCNT2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDRSFLRATE1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_RSFL_RATE1", runtime.ParamLocationQuery, *params.FIDRSFLRATE1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDRSFLRATE2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_RSFL_RATE2", runtime.ParamLocationQuery, *params.FIDRSFLRATE2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDVOL1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_VOL1", runtime.ParamLocationQuery, *params.FIDVOL1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDVOL2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_VOL2", runtime.ParamLocationQuery, *params.FIDVOL2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDAPLYRANGPRC1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_APLY_RANG_PRC_1", runtime.ParamLocationQuery, *params.FIDAPLYRANGPRC1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDAPLYRANGPRC2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_APLY_RANG_PRC_2", runtime.ParamLocationQuery, *params.FIDAPLYRANGPRC2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDLVRGVAL1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_LVRG_VAL1", runtime.ParamLocationQuery, *params.FIDLVRGVAL1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDLVRGVAL2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_LVRG_VAL2", runtime.ParamLocationQuery, *params.FIDLVRGVAL2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDVOL3 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_VOL3", runtime.ParamLocationQuery, *params.FIDVOL3); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDVOL4 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_VOL4", runtime.ParamLocationQuery, *params.FIDVOL4); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINTSVLTL1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INTS_VLTL1", runtime.ParamLocationQuery, *params.FIDINTSVLTL1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINTSVLTL2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INTS_VLTL2", runtime.ParamLocationQuery, *params.FIDINTSVLTL2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDPRMMVAL1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_PRMM_VAL1", runtime.ParamLocationQuery, *params.FIDPRMMVAL1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDPRMMVAL2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_PRMM_VAL2", runtime.ParamLocationQuery, *params.FIDPRMMVAL2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDGEAR1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_GEAR1", runtime.ParamLocationQuery, *params.FIDGEAR1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDGEAR2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_GEAR2", runtime.ParamLocationQuery, *params.FIDGEAR2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDPRLSQRYRRATE1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_PRLS_QRYR_RATE1", runtime.ParamLocationQuery, *params.FIDPRLSQRYRRATE1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDPRLSQRYRRATE2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_PRLS_QRYR_RATE2", runtime.ParamLocationQuery, *params.FIDPRLSQRYRRATE2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDDELTA1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_DELTA1", runtime.ParamLocationQuery, *params.FIDDELTA1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDDELTA2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_DELTA2", runtime.ParamLocationQuery, *params.FIDDELTA2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDACPR1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_ACPR1", runtime.ParamLocationQuery, *params.FIDACPR1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDACPR2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_ACPR2", runtime.ParamLocationQuery, *params.FIDACPR2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDSTCKCNVRRATE1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_STCK_CNVR_RATE1", runtime.ParamLocationQuery, *params.FIDSTCKCNVRRATE1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDSTCKCNVRRATE2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_STCK_CNVR_RATE2", runtime.ParamLocationQuery, *params.FIDSTCKCNVRRATE2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDDIVCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_DIV_CLS_CODE", runtime.ParamLocationQuery, *params.FIDDIVCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDPRIT1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_PRIT1", runtime.ParamLocationQuery, *params.FIDPRIT1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDPRIT2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_PRIT2", runtime.ParamLocationQuery, *params.FIDPRIT2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCFP1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_CFP1", runtime.ParamLocationQuery, *params.FIDCFP1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCFP2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_CFP2", runtime.ParamLocationQuery, *params.FIDCFP2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTNMIXPRICE1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_NMIX_PRICE_1", runtime.ParamLocationQuery, *params.FIDINPUTNMIXPRICE1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTNMIXPRICE2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_NMIX_PRICE_2", runtime.ParamLocationQuery, *params.FIDINPUTNMIXPRICE2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDEGEAVAL1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_EGEA_VAL1", runtime.ParamLocationQuery, *params.FIDEGEAVAL1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDEGEAVAL2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_EGEA_VAL2", runtime.ParamLocationQuery, *params.FIDEGEAVAL2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTDVDNERT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_DVDN_ERT", runtime.ParamLocationQuery, *params.FIDINPUTDVDNERT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTHISTVLTL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_HIST_VLTL", runtime.ParamLocationQuery, *params.FIDINPUTHISTVLTL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDTHETA1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_THETA1", runtime.ParamLocationQuery, *params.FIDTHETA1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDTHETA2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_THETA2", runtime.ParamLocationQuery, *params.FIDTHETA2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiElwV1QuotationsExpirationStocksRequest generates requests for GetUapiElwV1QuotationsExpirationStocks
func NewGetUapiElwV1QuotationsExpirationStocksRequest(server string, params *GetUapiElwV1QuotationsExpirationStocksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/elw/v1/quotations/expiration-stocks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDSCRDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_SCR_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDSCRDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTDATE1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_DATE_1", runtime.ParamLocationQuery, *params.FIDINPUTDATE1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTDATE2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_DATE_2", runtime.ParamLocationQuery, *params.FIDINPUTDATE2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDDIVCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_DIV_CLS_CODE", runtime.ParamLocationQuery, *params.FIDDIVCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDETCCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_ETC_CLS_CODE", runtime.ParamLocationQuery, *params.FIDETCCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDUNASINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_UNAS_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDUNASINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_2", runtime.ParamLocationQuery, *params.FIDINPUTISCD2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDBLNGCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_BLNG_CLS_CODE", runtime.ParamLocationQuery, *params.FIDBLNGCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTOPTION1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_OPTION_1", runtime.ParamLocationQuery, *params.FIDINPUTOPTION1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiElwV1QuotationsIndicatorTrendCcnlRequest generates requests for GetUapiElwV1QuotationsIndicatorTrendCcnl
func NewGetUapiElwV1QuotationsIndicatorTrendCcnlRequest(server string, params *GetUapiElwV1QuotationsIndicatorTrendCcnlParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/elw/v1/quotations/indicator-trend-ccnl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiElwV1QuotationsIndicatorTrendDailyRequest generates requests for GetUapiElwV1QuotationsIndicatorTrendDaily
func NewGetUapiElwV1QuotationsIndicatorTrendDailyRequest(server string, params *GetUapiElwV1QuotationsIndicatorTrendDailyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/elw/v1/quotations/indicator-trend-daily")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiElwV1QuotationsIndicatorTrendMinuteRequest generates requests for GetUapiElwV1QuotationsIndicatorTrendMinute
func NewGetUapiElwV1QuotationsIndicatorTrendMinuteRequest(server string, params *GetUapiElwV1QuotationsIndicatorTrendMinuteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/elw/v1/quotations/indicator-trend-minute")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiElwV1QuotationsLpTradeTrendRequest generates requests for GetUapiElwV1QuotationsLpTradeTrend
func NewGetUapiElwV1QuotationsLpTradeTrendRequest(server string, params *GetUapiElwV1QuotationsLpTradeTrendParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/elw/v1/quotations/lp-trade-trend")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiElwV1QuotationsNewlyListedRequest generates requests for GetUapiElwV1QuotationsNewlyListed
func NewGetUapiElwV1QuotationsNewlyListedRequest(server string, params *GetUapiElwV1QuotationsNewlyListedParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/elw/v1/quotations/newly-listed")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDSCRDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_SCR_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDSCRDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDDIVCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_DIV_CLS_CODE", runtime.ParamLocationQuery, *params.FIDDIVCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDUNASINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_UNAS_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDUNASINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD_2", runtime.ParamLocationQuery, *params.FIDINPUTISCD2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTDATE1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_DATE_1", runtime.ParamLocationQuery, *params.FIDINPUTDATE1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDBLNGCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_BLNG_CLS_CODE", runtime.ParamLocationQuery, *params.FIDBLNGCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiElwV1QuotationsSensitivityTrendCcnlRequest generates requests for GetUapiElwV1QuotationsSensitivityTrendCcnl
func NewGetUapiElwV1QuotationsSensitivityTrendCcnlRequest(server string, params *GetUapiElwV1QuotationsSensitivityTrendCcnlParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/elw/v1/quotations/sensitivity-trend-ccnl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiElwV1QuotationsSensitivityTrendDailyRequest generates requests for GetUapiElwV1QuotationsSensitivityTrendDaily
func NewGetUapiElwV1QuotationsSensitivityTrendDailyRequest(server string, params *GetUapiElwV1QuotationsSensitivityTrendDailyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/elw/v1/quotations/sensitivity-trend-daily")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiElwV1QuotationsUdrlAssetListRequest generates requests for GetUapiElwV1QuotationsUdrlAssetList
func NewGetUapiElwV1QuotationsUdrlAssetListRequest(server string, params *GetUapiElwV1QuotationsUdrlAssetListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/elw/v1/quotations/udrl-asset-list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDSCRDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_SCR_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDSCRDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDRANKSORTCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_RANK_SORT_CLS_CODE", runtime.ParamLocationQuery, *params.FIDRANKSORTCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiElwV1QuotationsVolatilityTrendCcnlRequest generates requests for GetUapiElwV1QuotationsVolatilityTrendCcnl
func NewGetUapiElwV1QuotationsVolatilityTrendCcnlRequest(server string, params *GetUapiElwV1QuotationsVolatilityTrendCcnlParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/elw/v1/quotations/volatility-trend-ccnl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiElwV1QuotationsVolatilityTrendDailyRequest generates requests for GetUapiElwV1QuotationsVolatilityTrendDaily
func NewGetUapiElwV1QuotationsVolatilityTrendDailyRequest(server string, params *GetUapiElwV1QuotationsVolatilityTrendDailyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/elw/v1/quotations/volatility-trend-daily")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDSCRDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_SCR_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDSCRDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDMRKTCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_MRKT_CLS_CODE", runtime.ParamLocationQuery, *params.FIDMRKTCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDUNASINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_UNAS_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDUNASINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDVOLCNT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_VOL_CNT", runtime.ParamLocationQuery, *params.FIDVOLCNT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDTRGTEXLSCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_TRGT_EXLS_CLS_CODE", runtime.ParamLocationQuery, *params.FIDTRGTEXLSCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTPRICE1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_PRICE_1", runtime.ParamLocationQuery, *params.FIDINPUTPRICE1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTPRICE2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_PRICE_2", runtime.ParamLocationQuery, *params.FIDINPUTPRICE2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTVOL1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_VOL_1", runtime.ParamLocationQuery, *params.FIDINPUTVOL1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTVOL2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_VOL_2", runtime.ParamLocationQuery, *params.FIDINPUTVOL2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTRMNNDYNU1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_RMNN_DYNU_1", runtime.ParamLocationQuery, *params.FIDINPUTRMNNDYNU1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTRMNNDYNU2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_RMNN_DYNU_2", runtime.ParamLocationQuery, *params.FIDINPUTRMNNDYNU2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDOPTION != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_OPTION", runtime.ParamLocationQuery, *params.FIDOPTION); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTOPTION1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_OPTION_1", runtime.ParamLocationQuery, *params.FIDINPUTOPTION1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTOPTION2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_OPTION_2", runtime.ParamLocationQuery, *params.FIDINPUTOPTION2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiElwV1QuotationsVolatilityTrendMinuteRequest generates requests for GetUapiElwV1QuotationsVolatilityTrendMinute
func NewGetUapiElwV1QuotationsVolatilityTrendMinuteRequest(server string, params *GetUapiElwV1QuotationsVolatilityTrendMinuteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/elw/v1/quotations/volatility-trend-minute")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDHOURCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_HOUR_CLS_CODE", runtime.ParamLocationQuery, *params.FIDHOURCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDPWDATAINCUYN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_PW_DATA_INCU_YN", runtime.ParamLocationQuery, *params.FIDPWDATAINCUYN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiElwV1QuotationsVolatilityTrendTickRequest generates requests for GetUapiElwV1QuotationsVolatilityTrendTick
func NewGetUapiElwV1QuotationsVolatilityTrendTickRequest(server string, params *GetUapiElwV1QuotationsVolatilityTrendTickParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/elw/v1/quotations/volatility-trend-tick")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiElwV1RankingUpdownRateRequest generates requests for GetUapiElwV1RankingUpdownRate
func NewGetUapiElwV1RankingUpdownRateRequest(server string, params *GetUapiElwV1RankingUpdownRateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/elw/v1/ranking/updown-rate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDSCRDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_SCR_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDSCRDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDUNASINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_UNAS_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDUNASINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTRMNNDYNU1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_RMNN_DYNU_1", runtime.ParamLocationQuery, *params.FIDINPUTRMNNDYNU1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDDIVCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_DIV_CLS_CODE", runtime.ParamLocationQuery, *params.FIDDIVCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTPRICE1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_PRICE_1", runtime.ParamLocationQuery, *params.FIDINPUTPRICE1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTPRICE2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_PRICE_2", runtime.ParamLocationQuery, *params.FIDINPUTPRICE2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTVOL1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_VOL_1", runtime.ParamLocationQuery, *params.FIDINPUTVOL1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTVOL2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_VOL_2", runtime.ParamLocationQuery, *params.FIDINPUTVOL2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTDATE1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_DATE_1", runtime.ParamLocationQuery, *params.FIDINPUTDATE1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDRANKSORTCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_RANK_SORT_CLS_CODE", runtime.ParamLocationQuery, *params.FIDRANKSORTCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDBLNGCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_BLNG_CLS_CODE", runtime.ParamLocationQuery, *params.FIDBLNGCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTDATE2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_DATE_2", runtime.ParamLocationQuery, *params.FIDINPUTDATE2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiEtfetnV1QuotationsInquireComponentStockPriceRequest generates requests for GetUapiEtfetnV1QuotationsInquireComponentStockPrice
func NewGetUapiEtfetnV1QuotationsInquireComponentStockPriceRequest(server string, params *GetUapiEtfetnV1QuotationsInquireComponentStockPriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/etfetn/v1/quotations/inquire-component-stock-price")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidCondScrDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_scr_div_code", runtime.ParamLocationQuery, *params.FidCondScrDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiEtfetnV1QuotationsInquirePriceRequest generates requests for GetUapiEtfetnV1QuotationsInquirePrice
func NewGetUapiEtfetnV1QuotationsInquirePriceRequest(server string, params *GetUapiEtfetnV1QuotationsInquirePriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/etfetn/v1/quotations/inquire-price")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiEtfetnV1QuotationsNavComparisonDailyTrendRequest generates requests for GetUapiEtfetnV1QuotationsNavComparisonDailyTrend
func NewGetUapiEtfetnV1QuotationsNavComparisonDailyTrendRequest(server string, params *GetUapiEtfetnV1QuotationsNavComparisonDailyTrendParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/etfetn/v1/quotations/nav-comparison-daily-trend")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputDate1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_date_1", runtime.ParamLocationQuery, *params.FidInputDate1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputDate2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_date_2", runtime.ParamLocationQuery, *params.FidInputDate2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiEtfetnV1QuotationsNavComparisonTimeTrendRequest generates requests for GetUapiEtfetnV1QuotationsNavComparisonTimeTrend
func NewGetUapiEtfetnV1QuotationsNavComparisonTimeTrendRequest(server string, params *GetUapiEtfetnV1QuotationsNavComparisonTimeTrendParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/etfetn/v1/quotations/nav-comparison-time-trend")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidHourClsCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_hour_cls_code", runtime.ParamLocationQuery, *params.FidHourClsCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiEtfetnV1QuotationsNavComparisonTrendRequest generates requests for GetUapiEtfetnV1QuotationsNavComparisonTrend
func NewGetUapiEtfetnV1QuotationsNavComparisonTrendRequest(server string, params *GetUapiEtfetnV1QuotationsNavComparisonTrendParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/etfetn/v1/quotations/nav-comparison-trend")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FidCondMrktDivCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_cond_mrkt_div_code", runtime.ParamLocationQuery, *params.FidCondMrktDivCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FidInputIscd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fid_input_iscd", runtime.ParamLocationQuery, *params.FidInputIscd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewPostUapiHashkeyRequest calls the generic PostUapiHashkey builder with application/json body
func NewPostUapiHashkeyRequest(server string, params *PostUapiHashkeyParams, body PostUapiHashkeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUapiHashkeyRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostUapiHashkeyRequestWithBody generates requests for PostUapiHashkey with any type of body
func NewPostUapiHashkeyRequestWithBody(server string, params *PostUapiHashkeyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/hashkey")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Appkey != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam1)
		}

		if params.Appsecret != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam2)
		}

	}

	return req, nil
}

// NewGetUapiOverseasFutureoptionV1QuotationsDailyCcnlRequest generates requests for GetUapiOverseasFutureoptionV1QuotationsDailyCcnl
func NewGetUapiOverseasFutureoptionV1QuotationsDailyCcnlRequest(server string, params *GetUapiOverseasFutureoptionV1QuotationsDailyCcnlParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-futureoption/v1/quotations/daily-ccnl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SRSCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SRS_CD", runtime.ParamLocationQuery, *params.SRSCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EXCHCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EXCH_CD", runtime.ParamLocationQuery, *params.EXCHCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.STARTDATETIME != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "START_DATE_TIME", runtime.ParamLocationQuery, *params.STARTDATETIME); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CLOSEDATETIME != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CLOSE_DATE_TIME", runtime.ParamLocationQuery, *params.CLOSEDATETIME); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QRYTP != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "QRY_TP", runtime.ParamLocationQuery, *params.QRYTP); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QRYCNT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "QRY_CNT", runtime.ParamLocationQuery, *params.QRYCNT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QRYGAP != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "QRY_GAP", runtime.ParamLocationQuery, *params.QRYGAP); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INDEXKEY != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INDEX_KEY", runtime.ParamLocationQuery, *params.INDEXKEY); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiOverseasFutureoptionV1QuotationsInquireAskingPriceRequest generates requests for GetUapiOverseasFutureoptionV1QuotationsInquireAskingPrice
func NewGetUapiOverseasFutureoptionV1QuotationsInquireAskingPriceRequest(server string, params *GetUapiOverseasFutureoptionV1QuotationsInquireAskingPriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-futureoption/v1/quotations/inquire-asking-price")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SRSCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SRS_CD", runtime.ParamLocationQuery, *params.SRSCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiOverseasFutureoptionV1QuotationsInquirePriceRequest generates requests for GetUapiOverseasFutureoptionV1QuotationsInquirePrice
func NewGetUapiOverseasFutureoptionV1QuotationsInquirePriceRequest(server string, params *GetUapiOverseasFutureoptionV1QuotationsInquirePriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-futureoption/v1/quotations/inquire-price")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SRSCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SRS_CD", runtime.ParamLocationQuery, *params.SRSCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiOverseasFutureoptionV1QuotationsInquireTimeFuturechartpriceRequest generates requests for GetUapiOverseasFutureoptionV1QuotationsInquireTimeFuturechartprice
func NewGetUapiOverseasFutureoptionV1QuotationsInquireTimeFuturechartpriceRequest(server string, params *GetUapiOverseasFutureoptionV1QuotationsInquireTimeFuturechartpriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-futureoption/v1/quotations/inquire-time-futurechartprice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SRSCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SRS_CD", runtime.ParamLocationQuery, *params.SRSCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EXCHCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EXCH_CD", runtime.ParamLocationQuery, *params.EXCHCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.STARTDATETIME != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "START_DATE_TIME", runtime.ParamLocationQuery, *params.STARTDATETIME); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CLOSEDATETIME != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CLOSE_DATE_TIME", runtime.ParamLocationQuery, *params.CLOSEDATETIME); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QRYTP != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "QRY_TP", runtime.ParamLocationQuery, *params.QRYTP); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QRYCNT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "QRY_CNT", runtime.ParamLocationQuery, *params.QRYCNT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QRYGAP != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "QRY_GAP", runtime.ParamLocationQuery, *params.QRYGAP); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INDEXKEY != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INDEX_KEY", runtime.ParamLocationQuery, *params.INDEXKEY); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiOverseasFutureoptionV1QuotationsInvestorUnpdTrendRequest generates requests for GetUapiOverseasFutureoptionV1QuotationsInvestorUnpdTrend
func NewGetUapiOverseasFutureoptionV1QuotationsInvestorUnpdTrendRequest(server string, params *GetUapiOverseasFutureoptionV1QuotationsInvestorUnpdTrendParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-futureoption/v1/quotations/investor-unpd-trend")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PRODISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PROD_ISCD", runtime.ParamLocationQuery, *params.PRODISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BSOPDATE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "BSOP_DATE", runtime.ParamLocationQuery, *params.BSOPDATE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UPMUGUBUN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UPMU_GUBUN", runtime.ParamLocationQuery, *params.UPMUGUBUN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTSKEY != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTS_KEY", runtime.ParamLocationQuery, *params.CTSKEY); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiOverseasFutureoptionV1QuotationsMarketTimeRequest generates requests for GetUapiOverseasFutureoptionV1QuotationsMarketTime
func NewGetUapiOverseasFutureoptionV1QuotationsMarketTimeRequest(server string, params *GetUapiOverseasFutureoptionV1QuotationsMarketTimeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-futureoption/v1/quotations/market-time")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FMPDGRCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FM_PDGR_CD", runtime.ParamLocationQuery, *params.FMPDGRCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FMCLASCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FM_CLAS_CD", runtime.ParamLocationQuery, *params.FMCLASCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FMEXCGCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FM_EXCG_CD", runtime.ParamLocationQuery, *params.FMEXCGCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OPTYN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OPT_YN", runtime.ParamLocationQuery, *params.OPTYN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK200", runtime.ParamLocationQuery, *params.CTXAREANK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK200", runtime.ParamLocationQuery, *params.CTXAREAFK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiOverseasFutureoptionV1QuotationsMonthlyCcnlRequest generates requests for GetUapiOverseasFutureoptionV1QuotationsMonthlyCcnl
func NewGetUapiOverseasFutureoptionV1QuotationsMonthlyCcnlRequest(server string, params *GetUapiOverseasFutureoptionV1QuotationsMonthlyCcnlParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-futureoption/v1/quotations/monthly-ccnl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SRSCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SRS_CD", runtime.ParamLocationQuery, *params.SRSCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EXCHCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EXCH_CD", runtime.ParamLocationQuery, *params.EXCHCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.STARTDATETIME != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "START_DATE_TIME", runtime.ParamLocationQuery, *params.STARTDATETIME); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CLOSEDATETIME != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CLOSE_DATE_TIME", runtime.ParamLocationQuery, *params.CLOSEDATETIME); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QRYTP != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "QRY_TP", runtime.ParamLocationQuery, *params.QRYTP); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QRYCNT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "QRY_CNT", runtime.ParamLocationQuery, *params.QRYCNT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QRYGAP != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "QRY_GAP", runtime.ParamLocationQuery, *params.QRYGAP); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INDEXKEY != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INDEX_KEY", runtime.ParamLocationQuery, *params.INDEXKEY); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiOverseasFutureoptionV1QuotationsOptAskingPriceRequest generates requests for GetUapiOverseasFutureoptionV1QuotationsOptAskingPrice
func NewGetUapiOverseasFutureoptionV1QuotationsOptAskingPriceRequest(server string, params *GetUapiOverseasFutureoptionV1QuotationsOptAskingPriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-futureoption/v1/quotations/opt-asking-price")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SRSCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SRS_CD", runtime.ParamLocationQuery, *params.SRSCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiOverseasFutureoptionV1QuotationsSearchContractDetailRequest generates requests for GetUapiOverseasFutureoptionV1QuotationsSearchContractDetail
func NewGetUapiOverseasFutureoptionV1QuotationsSearchContractDetailRequest(server string, params *GetUapiOverseasFutureoptionV1QuotationsSearchContractDetailParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-futureoption/v1/quotations/search-contract-detail")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.QRYCNT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "QRY_CNT", runtime.ParamLocationQuery, *params.QRYCNT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SRSCD01 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SRS_CD_01", runtime.ParamLocationQuery, *params.SRSCD01); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SRSCD02 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SRS_CD_02", runtime.ParamLocationQuery, *params.SRSCD02); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiOverseasFutureoptionV1QuotationsStockDetailRequest generates requests for GetUapiOverseasFutureoptionV1QuotationsStockDetail
func NewGetUapiOverseasFutureoptionV1QuotationsStockDetailRequest(server string, params *GetUapiOverseasFutureoptionV1QuotationsStockDetailParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-futureoption/v1/quotations/stock-detail")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SRSCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SRS_CD", runtime.ParamLocationQuery, *params.SRSCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiOverseasFutureoptionV1QuotationsTickCcnlRequest generates requests for GetUapiOverseasFutureoptionV1QuotationsTickCcnl
func NewGetUapiOverseasFutureoptionV1QuotationsTickCcnlRequest(server string, params *GetUapiOverseasFutureoptionV1QuotationsTickCcnlParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-futureoption/v1/quotations/tick-ccnl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SRSCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SRS_CD", runtime.ParamLocationQuery, *params.SRSCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EXCHCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EXCH_CD", runtime.ParamLocationQuery, *params.EXCHCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.STARTDATETIME != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "START_DATE_TIME", runtime.ParamLocationQuery, *params.STARTDATETIME); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CLOSEDATETIME != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CLOSE_DATE_TIME", runtime.ParamLocationQuery, *params.CLOSEDATETIME); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QRYTP != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "QRY_TP", runtime.ParamLocationQuery, *params.QRYTP); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QRYCNT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "QRY_CNT", runtime.ParamLocationQuery, *params.QRYCNT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QRYGAP != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "QRY_GAP", runtime.ParamLocationQuery, *params.QRYGAP); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INDEXKEY != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INDEX_KEY", runtime.ParamLocationQuery, *params.INDEXKEY); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiOverseasFutureoptionV1QuotationsWeeklyCcnlRequest generates requests for GetUapiOverseasFutureoptionV1QuotationsWeeklyCcnl
func NewGetUapiOverseasFutureoptionV1QuotationsWeeklyCcnlRequest(server string, params *GetUapiOverseasFutureoptionV1QuotationsWeeklyCcnlParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-futureoption/v1/quotations/weekly-ccnl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SRSCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SRS_CD", runtime.ParamLocationQuery, *params.SRSCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EXCHCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EXCH_CD", runtime.ParamLocationQuery, *params.EXCHCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.STARTDATETIME != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "START_DATE_TIME", runtime.ParamLocationQuery, *params.STARTDATETIME); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CLOSEDATETIME != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CLOSE_DATE_TIME", runtime.ParamLocationQuery, *params.CLOSEDATETIME); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QRYTP != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "QRY_TP", runtime.ParamLocationQuery, *params.QRYTP); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QRYCNT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "QRY_CNT", runtime.ParamLocationQuery, *params.QRYCNT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QRYGAP != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "QRY_GAP", runtime.ParamLocationQuery, *params.QRYGAP); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INDEXKEY != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INDEX_KEY", runtime.ParamLocationQuery, *params.INDEXKEY); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiOverseasFutureoptionV1TradingInquireCcldRequest generates requests for GetUapiOverseasFutureoptionV1TradingInquireCcld
func NewGetUapiOverseasFutureoptionV1TradingInquireCcldRequest(server string, params *GetUapiOverseasFutureoptionV1TradingInquireCcldParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-futureoption/v1/trading/inquire-ccld")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CCLDNCCSDVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CCLD_NCCS_DVSN", runtime.ParamLocationQuery, *params.CCLDNCCSDVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SLLBUYDVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SLL_BUY_DVSN_CD", runtime.ParamLocationQuery, *params.SLLBUYDVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FUOPDVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FUOP_DVSN", runtime.ParamLocationQuery, *params.FUOPDVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK200", runtime.ParamLocationQuery, *params.CTXAREAFK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK200", runtime.ParamLocationQuery, *params.CTXAREANK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiOverseasFutureoptionV1TradingInquireDailyCcldRequest generates requests for GetUapiOverseasFutureoptionV1TradingInquireDailyCcld
func NewGetUapiOverseasFutureoptionV1TradingInquireDailyCcldRequest(server string, params *GetUapiOverseasFutureoptionV1TradingInquireDailyCcldParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-futureoption/v1/trading/inquire-daily-ccld")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.STRTDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "STRT_DT", runtime.ParamLocationQuery, *params.STRTDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ENDDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "END_DT", runtime.ParamLocationQuery, *params.ENDDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FUOPDVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FUOP_DVSN_CD", runtime.ParamLocationQuery, *params.FUOPDVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FMPDGRCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FM_PDGR_CD", runtime.ParamLocationQuery, *params.FMPDGRCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CRCYCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CRCY_CD", runtime.ParamLocationQuery, *params.CRCYCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FMITEMFTNGYN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FM_ITEM_FTNG_YN", runtime.ParamLocationQuery, *params.FMITEMFTNGYN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SLLBUYDVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SLL_BUY_DVSN_CD", runtime.ParamLocationQuery, *params.SLLBUYDVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK200", runtime.ParamLocationQuery, *params.CTXAREAFK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK200", runtime.ParamLocationQuery, *params.CTXAREANK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiOverseasFutureoptionV1TradingInquireDailyOrderRequest generates requests for GetUapiOverseasFutureoptionV1TradingInquireDailyOrder
func NewGetUapiOverseasFutureoptionV1TradingInquireDailyOrderRequest(server string, params *GetUapiOverseasFutureoptionV1TradingInquireDailyOrderParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-futureoption/v1/trading/inquire-daily-order")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.STRTDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "STRT_DT", runtime.ParamLocationQuery, *params.STRTDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ENDDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "END_DT", runtime.ParamLocationQuery, *params.ENDDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FMPDGRCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FM_PDGR_CD", runtime.ParamLocationQuery, *params.FMPDGRCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CCLDNCCSDVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CCLD_NCCS_DVSN", runtime.ParamLocationQuery, *params.CCLDNCCSDVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SLLBUYDVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SLL_BUY_DVSN_CD", runtime.ParamLocationQuery, *params.SLLBUYDVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FUOPDVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FUOP_DVSN", runtime.ParamLocationQuery, *params.FUOPDVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK200", runtime.ParamLocationQuery, *params.CTXAREAFK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK200", runtime.ParamLocationQuery, *params.CTXAREANK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiOverseasFutureoptionV1TradingInquireDepositRequest generates requests for GetUapiOverseasFutureoptionV1TradingInquireDeposit
func NewGetUapiOverseasFutureoptionV1TradingInquireDepositRequest(server string, params *GetUapiOverseasFutureoptionV1TradingInquireDepositParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-futureoption/v1/trading/inquire-deposit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CRCYCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CRCY_CD", runtime.ParamLocationQuery, *params.CRCYCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_DT", runtime.ParamLocationQuery, *params.INQRDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiOverseasFutureoptionV1TradingInquirePeriodCcldRequest generates requests for GetUapiOverseasFutureoptionV1TradingInquirePeriodCcld
func NewGetUapiOverseasFutureoptionV1TradingInquirePeriodCcldRequest(server string, params *GetUapiOverseasFutureoptionV1TradingInquirePeriodCcldParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-futureoption/v1/trading/inquire-period-ccld")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRTERMFROMDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_TERM_FROM_DT", runtime.ParamLocationQuery, *params.INQRTERMFROMDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRTERMTODT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_TERM_TO_DT", runtime.ParamLocationQuery, *params.INQRTERMTODT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CRCYCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CRCY_CD", runtime.ParamLocationQuery, *params.CRCYCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WHOLTRSLYN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "WHOL_TRSL_YN", runtime.ParamLocationQuery, *params.WHOLTRSLYN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FUOPDVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FUOP_DVSN", runtime.ParamLocationQuery, *params.FUOPDVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK200", runtime.ParamLocationQuery, *params.CTXAREAFK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK200", runtime.ParamLocationQuery, *params.CTXAREANK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiOverseasFutureoptionV1TradingInquirePeriodTransRequest generates requests for GetUapiOverseasFutureoptionV1TradingInquirePeriodTrans
func NewGetUapiOverseasFutureoptionV1TradingInquirePeriodTransRequest(server string, params *GetUapiOverseasFutureoptionV1TradingInquirePeriodTransParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-futureoption/v1/trading/inquire-period-trans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.INQRTERMFROMDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_TERM_FROM_DT", runtime.ParamLocationQuery, *params.INQRTERMFROMDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRTERMTODT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_TERM_TO_DT", runtime.ParamLocationQuery, *params.INQRTERMTODT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTTRTYPECD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_TR_TYPE_CD", runtime.ParamLocationQuery, *params.ACNTTRTYPECD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CRCYCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CRCY_CD", runtime.ParamLocationQuery, *params.CRCYCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK100 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK100", runtime.ParamLocationQuery, *params.CTXAREAFK100); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK100 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK100", runtime.ParamLocationQuery, *params.CTXAREANK100); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PWDCHKYN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PWD_CHK_YN", runtime.ParamLocationQuery, *params.PWDCHKYN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiOverseasFutureoptionV1TradingInquirePsamountRequest generates requests for GetUapiOverseasFutureoptionV1TradingInquirePsamount
func NewGetUapiOverseasFutureoptionV1TradingInquirePsamountRequest(server string, params *GetUapiOverseasFutureoptionV1TradingInquirePsamountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-futureoption/v1/trading/inquire-psamount")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OVRSFUTRFXPDNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OVRS_FUTR_FX_PDNO", runtime.ParamLocationQuery, *params.OVRSFUTRFXPDNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SLLBUYDVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SLL_BUY_DVSN_CD", runtime.ParamLocationQuery, *params.SLLBUYDVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FMORDPRIC != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FM_ORD_PRIC", runtime.ParamLocationQuery, *params.FMORDPRIC); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ECISRSVNORDYN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ECIS_RSVN_ORD_YN", runtime.ParamLocationQuery, *params.ECISRSVNORDYN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiOverseasFutureoptionV1TradingInquireUnpdRequest generates requests for GetUapiOverseasFutureoptionV1TradingInquireUnpd
func NewGetUapiOverseasFutureoptionV1TradingInquireUnpdRequest(server string, params *GetUapiOverseasFutureoptionV1TradingInquireUnpdParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-futureoption/v1/trading/inquire-unpd")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FUOPDVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FUOP_DVSN", runtime.ParamLocationQuery, *params.FUOPDVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK100 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK100", runtime.ParamLocationQuery, *params.CTXAREAFK100); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK100 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK100", runtime.ParamLocationQuery, *params.CTXAREANK100); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiOverseasFutureoptionV1TradingMarginDetailRequest generates requests for GetUapiOverseasFutureoptionV1TradingMarginDetail
func NewGetUapiOverseasFutureoptionV1TradingMarginDetailRequest(server string, params *GetUapiOverseasFutureoptionV1TradingMarginDetailParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-futureoption/v1/trading/margin-detail")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CRCYCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CRCY_CD", runtime.ParamLocationQuery, *params.CRCYCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_DT", runtime.ParamLocationQuery, *params.INQRDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewPostUapiOverseasFutureoptionV1TradingOrderRequest calls the generic PostUapiOverseasFutureoptionV1TradingOrder builder with application/json body
func NewPostUapiOverseasFutureoptionV1TradingOrderRequest(server string, params *PostUapiOverseasFutureoptionV1TradingOrderParams, body PostUapiOverseasFutureoptionV1TradingOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUapiOverseasFutureoptionV1TradingOrderRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostUapiOverseasFutureoptionV1TradingOrderRequestWithBody generates requests for PostUapiOverseasFutureoptionV1TradingOrder with any type of body
func NewPostUapiOverseasFutureoptionV1TradingOrderRequestWithBody(server string, params *PostUapiOverseasFutureoptionV1TradingOrderParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-futureoption/v1/trading/order")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Hashkey != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "hashkey", runtime.ParamLocationHeader, *params.Hashkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("hashkey", headerParam5)
		}

	}

	return req, nil
}

// NewPostUapiOverseasFutureoptionV1TradingOrderRvsecnclRequest calls the generic PostUapiOverseasFutureoptionV1TradingOrderRvsecncl builder with application/json body
func NewPostUapiOverseasFutureoptionV1TradingOrderRvsecnclRequest(server string, params *PostUapiOverseasFutureoptionV1TradingOrderRvsecnclParams, body PostUapiOverseasFutureoptionV1TradingOrderRvsecnclJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUapiOverseasFutureoptionV1TradingOrderRvsecnclRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostUapiOverseasFutureoptionV1TradingOrderRvsecnclRequestWithBody generates requests for PostUapiOverseasFutureoptionV1TradingOrderRvsecncl with any type of body
func NewPostUapiOverseasFutureoptionV1TradingOrderRvsecnclRequestWithBody(server string, params *PostUapiOverseasFutureoptionV1TradingOrderRvsecnclParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-futureoption/v1/trading/order-rvsecncl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Content-Type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Hashkey != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "hashkey", runtime.ParamLocationHeader, *params.Hashkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("hashkey", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiOverseasPriceV1QuotationsBrknewsTitleRequest generates requests for GetUapiOverseasPriceV1QuotationsBrknewsTitle
func NewGetUapiOverseasPriceV1QuotationsBrknewsTitleRequest(server string, params *GetUapiOverseasPriceV1QuotationsBrknewsTitleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-price/v1/quotations/brknews-title")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDNEWSOFERENTPCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_NEWS_OFER_ENTP_CODE", runtime.ParamLocationQuery, *params.FIDNEWSOFERENTPCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDMRKTCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_CLS_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDTITLCNTT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_TITL_CNTT", runtime.ParamLocationQuery, *params.FIDTITLCNTT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTDATE1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_DATE_1", runtime.ParamLocationQuery, *params.FIDINPUTDATE1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTHOUR1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_HOUR_1", runtime.ParamLocationQuery, *params.FIDINPUTHOUR1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDRANKSORTCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_RANK_SORT_CLS_CODE", runtime.ParamLocationQuery, *params.FIDRANKSORTCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTSRNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_SRNO", runtime.ParamLocationQuery, *params.FIDINPUTSRNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDCONDSCRDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_SCR_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDSCRDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiOverseasPriceV1QuotationsColableByCompanyRequest generates requests for GetUapiOverseasPriceV1QuotationsColableByCompany
func NewGetUapiOverseasPriceV1QuotationsColableByCompanyRequest(server string, params *GetUapiOverseasPriceV1QuotationsColableByCompanyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-price/v1/quotations/colable-by-company")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PDNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PDNO", runtime.ParamLocationQuery, *params.PDNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PRDTTYPECD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PRDT_TYPE_CD", runtime.ParamLocationQuery, *params.PRDTTYPECD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRSTRTDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_STRT_DT", runtime.ParamLocationQuery, *params.INQRSTRTDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRENDDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_END_DT", runtime.ParamLocationQuery, *params.INQRENDDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRDVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_DVSN", runtime.ParamLocationQuery, *params.INQRDVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NATNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NATN_CD", runtime.ParamLocationQuery, *params.NATNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRSQNDVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_SQN_DVSN", runtime.ParamLocationQuery, *params.INQRSQNDVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RTDVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "RT_DVSN_CD", runtime.ParamLocationQuery, *params.RTDVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "RT", runtime.ParamLocationQuery, *params.RT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LOANPSBLYN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "LOAN_PSBL_YN", runtime.ParamLocationQuery, *params.LOANPSBLYN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK100 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK100", runtime.ParamLocationQuery, *params.CTXAREAFK100); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK100 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK100", runtime.ParamLocationQuery, *params.CTXAREANK100); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

		if params.TrCont != nil {
			var headerParam6 string

			headerParam6, err = runtime.StyleParamWithLocation("simple", false, "tr_cont", runtime.ParamLocationHeader, *params.TrCont)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_cont", headerParam6)
		}

	}

	return req, nil
}

// NewGetUapiOverseasPriceV1QuotationsDailypriceRequest generates requests for GetUapiOverseasPriceV1QuotationsDailyprice
func NewGetUapiOverseasPriceV1QuotationsDailypriceRequest(server string, params *GetUapiOverseasPriceV1QuotationsDailypriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-price/v1/quotations/dailyprice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AUTH != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "AUTH", runtime.ParamLocationQuery, *params.AUTH); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EXCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EXCD", runtime.ParamLocationQuery, *params.EXCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SYMB != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SYMB", runtime.ParamLocationQuery, *params.SYMB); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GUBN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "GUBN", runtime.ParamLocationQuery, *params.GUBN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BYMD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "BYMD", runtime.ParamLocationQuery, *params.BYMD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MODP != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "MODP", runtime.ParamLocationQuery, *params.MODP); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiOverseasPriceV1QuotationsInquireAskingPriceRequest generates requests for GetUapiOverseasPriceV1QuotationsInquireAskingPrice
func NewGetUapiOverseasPriceV1QuotationsInquireAskingPriceRequest(server string, params *GetUapiOverseasPriceV1QuotationsInquireAskingPriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-price/v1/quotations/inquire-asking-price")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AUTH != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "AUTH", runtime.ParamLocationQuery, *params.AUTH); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EXCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EXCD", runtime.ParamLocationQuery, *params.EXCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SYMB != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SYMB", runtime.ParamLocationQuery, *params.SYMB); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiOverseasPriceV1QuotationsInquireDailyChartpriceRequest generates requests for GetUapiOverseasPriceV1QuotationsInquireDailyChartprice
func NewGetUapiOverseasPriceV1QuotationsInquireDailyChartpriceRequest(server string, params *GetUapiOverseasPriceV1QuotationsInquireDailyChartpriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-price/v1/quotations/inquire-daily-chartprice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTDATE1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_DATE_1", runtime.ParamLocationQuery, *params.FIDINPUTDATE1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTDATE2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_DATE_2", runtime.ParamLocationQuery, *params.FIDINPUTDATE2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDPERIODDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_PERIOD_DIV_CODE", runtime.ParamLocationQuery, *params.FIDPERIODDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiOverseasPriceV1QuotationsInquireSearchRequest generates requests for GetUapiOverseasPriceV1QuotationsInquireSearch
func NewGetUapiOverseasPriceV1QuotationsInquireSearchRequest(server string, params *GetUapiOverseasPriceV1QuotationsInquireSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-price/v1/quotations/inquire-search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AUTH != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "AUTH", runtime.ParamLocationQuery, *params.AUTH); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EXCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EXCD", runtime.ParamLocationQuery, *params.EXCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.COYNPRICECUR != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CO_YN_PRICECUR", runtime.ParamLocationQuery, *params.COYNPRICECUR); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.COSTPRICECUR != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CO_ST_PRICECUR", runtime.ParamLocationQuery, *params.COSTPRICECUR); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.COENPRICECUR != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CO_EN_PRICECUR", runtime.ParamLocationQuery, *params.COENPRICECUR); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.COYNRATE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CO_YN_RATE", runtime.ParamLocationQuery, *params.COYNRATE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.COSTRATE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CO_ST_RATE", runtime.ParamLocationQuery, *params.COSTRATE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.COENRATE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CO_EN_RATE", runtime.ParamLocationQuery, *params.COENRATE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.COYNVALX != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CO_YN_VALX", runtime.ParamLocationQuery, *params.COYNVALX); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.COSTVALX != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CO_ST_VALX", runtime.ParamLocationQuery, *params.COSTVALX); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.COENVALX != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CO_EN_VALX", runtime.ParamLocationQuery, *params.COENVALX); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.COYNSHAR != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CO_YN_SHAR", runtime.ParamLocationQuery, *params.COYNSHAR); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.COSTSHAR != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CO_ST_SHAR", runtime.ParamLocationQuery, *params.COSTSHAR); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.COENSHAR != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CO_EN_SHAR", runtime.ParamLocationQuery, *params.COENSHAR); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.COYNVOLUME != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CO_YN_VOLUME", runtime.ParamLocationQuery, *params.COYNVOLUME); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.COSTVOLUME != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CO_ST_VOLUME", runtime.ParamLocationQuery, *params.COSTVOLUME); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.COENVOLUME != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CO_EN_VOLUME", runtime.ParamLocationQuery, *params.COENVOLUME); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.COYNAMT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CO_YN_AMT", runtime.ParamLocationQuery, *params.COYNAMT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.COSTAMT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CO_ST_AMT", runtime.ParamLocationQuery, *params.COSTAMT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.COENAMT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CO_EN_AMT", runtime.ParamLocationQuery, *params.COENAMT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.COYNEPS != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CO_YN_EPS", runtime.ParamLocationQuery, *params.COYNEPS); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.COSTEPS != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CO_ST_EPS", runtime.ParamLocationQuery, *params.COSTEPS); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.COENEPS != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CO_EN_EPS", runtime.ParamLocationQuery, *params.COENEPS); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.COYNPER != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CO_YN_PER", runtime.ParamLocationQuery, *params.COYNPER); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.COSTPER != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CO_ST_PER", runtime.ParamLocationQuery, *params.COSTPER); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.COENPER != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CO_EN_PER", runtime.ParamLocationQuery, *params.COENPER); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiOverseasPriceV1QuotationsInquireTimeIndexchartpriceRequest generates requests for GetUapiOverseasPriceV1QuotationsInquireTimeIndexchartprice
func NewGetUapiOverseasPriceV1QuotationsInquireTimeIndexchartpriceRequest(server string, params *GetUapiOverseasPriceV1QuotationsInquireTimeIndexchartpriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-price/v1/quotations/inquire-time-indexchartprice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FIDCONDMRKTDIVCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_COND_MRKT_DIV_CODE", runtime.ParamLocationQuery, *params.FIDCONDMRKTDIVCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDINPUTISCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_INPUT_ISCD", runtime.ParamLocationQuery, *params.FIDINPUTISCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDHOURCLSCODE != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_HOUR_CLS_CODE", runtime.ParamLocationQuery, *params.FIDHOURCLSCODE); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FIDPWDATAINCUYN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FID_PW_DATA_INCU_YN", runtime.ParamLocationQuery, *params.FIDPWDATAINCUYN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiOverseasPriceV1QuotationsInquireTimeItemchartpriceRequest generates requests for GetUapiOverseasPriceV1QuotationsInquireTimeItemchartprice
func NewGetUapiOverseasPriceV1QuotationsInquireTimeItemchartpriceRequest(server string, params *GetUapiOverseasPriceV1QuotationsInquireTimeItemchartpriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-price/v1/quotations/inquire-time-itemchartprice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AUTH != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "AUTH", runtime.ParamLocationQuery, *params.AUTH); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EXCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EXCD", runtime.ParamLocationQuery, *params.EXCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SYMB != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SYMB", runtime.ParamLocationQuery, *params.SYMB); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NMIN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NMIN", runtime.ParamLocationQuery, *params.NMIN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PINC != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PINC", runtime.ParamLocationQuery, *params.PINC); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NEXT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NEXT", runtime.ParamLocationQuery, *params.NEXT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NREC != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NREC", runtime.ParamLocationQuery, *params.NREC); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FILL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FILL", runtime.ParamLocationQuery, *params.FILL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.KEYB != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "KEYB", runtime.ParamLocationQuery, *params.KEYB); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiOverseasPriceV1QuotationsNewsTitleRequest generates requests for GetUapiOverseasPriceV1QuotationsNewsTitle
func NewGetUapiOverseasPriceV1QuotationsNewsTitleRequest(server string, params *GetUapiOverseasPriceV1QuotationsNewsTitleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-price/v1/quotations/news-title")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.INFOGB != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INFO_GB", runtime.ParamLocationQuery, *params.INFOGB); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CLASSCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CLASS_CD", runtime.ParamLocationQuery, *params.CLASSCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NATIONCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NATION_CD", runtime.ParamLocationQuery, *params.NATIONCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EXCHANGECD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EXCHANGE_CD", runtime.ParamLocationQuery, *params.EXCHANGECD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SYMB != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SYMB", runtime.ParamLocationQuery, *params.SYMB); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DATADT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DATA_DT", runtime.ParamLocationQuery, *params.DATADT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DATATM != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DATA_TM", runtime.ParamLocationQuery, *params.DATATM); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTS != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTS", runtime.ParamLocationQuery, *params.CTS); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiOverseasPriceV1QuotationsPeriodRightsRequest generates requests for GetUapiOverseasPriceV1QuotationsPeriodRights
func NewGetUapiOverseasPriceV1QuotationsPeriodRightsRequest(server string, params *GetUapiOverseasPriceV1QuotationsPeriodRightsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-price/v1/quotations/period-rights")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RGHTTYPECD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "RGHT_TYPE_CD", runtime.ParamLocationQuery, *params.RGHTTYPECD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRDVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_DVSN_CD", runtime.ParamLocationQuery, *params.INQRDVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRSTRTDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_STRT_DT", runtime.ParamLocationQuery, *params.INQRSTRTDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRENDDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_END_DT", runtime.ParamLocationQuery, *params.INQRENDDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PDNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PDNO", runtime.ParamLocationQuery, *params.PDNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PRDTTYPECD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PRDT_TYPE_CD", runtime.ParamLocationQuery, *params.PRDTTYPECD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK50 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK50", runtime.ParamLocationQuery, *params.CTXAREANK50); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK50 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK50", runtime.ParamLocationQuery, *params.CTXAREAFK50); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

		if params.TrCont != nil {
			var headerParam6 string

			headerParam6, err = runtime.StyleParamWithLocation("simple", false, "tr_cont", runtime.ParamLocationHeader, *params.TrCont)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_cont", headerParam6)
		}

	}

	return req, nil
}

// NewGetUapiOverseasPriceV1QuotationsPriceRequest generates requests for GetUapiOverseasPriceV1QuotationsPrice
func NewGetUapiOverseasPriceV1QuotationsPriceRequest(server string, params *GetUapiOverseasPriceV1QuotationsPriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-price/v1/quotations/price")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AUTH != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "AUTH", runtime.ParamLocationQuery, *params.AUTH); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EXCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EXCD", runtime.ParamLocationQuery, *params.EXCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SYMB != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SYMB", runtime.ParamLocationQuery, *params.SYMB); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiOverseasPriceV1QuotationsPriceDetailRequest generates requests for GetUapiOverseasPriceV1QuotationsPriceDetail
func NewGetUapiOverseasPriceV1QuotationsPriceDetailRequest(server string, params *GetUapiOverseasPriceV1QuotationsPriceDetailParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-price/v1/quotations/price-detail")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AUTH != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "AUTH", runtime.ParamLocationQuery, *params.AUTH); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EXCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EXCD", runtime.ParamLocationQuery, *params.EXCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SYMB != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SYMB", runtime.ParamLocationQuery, *params.SYMB); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiOverseasPriceV1QuotationsRightsByIceRequest generates requests for GetUapiOverseasPriceV1QuotationsRightsByIce
func NewGetUapiOverseasPriceV1QuotationsRightsByIceRequest(server string, params *GetUapiOverseasPriceV1QuotationsRightsByIceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-price/v1/quotations/rights-by-ice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NCOD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NCOD", runtime.ParamLocationQuery, *params.NCOD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SYMB != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SYMB", runtime.ParamLocationQuery, *params.SYMB); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.STYMD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ST_YMD", runtime.ParamLocationQuery, *params.STYMD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EDYMD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ED_YMD", runtime.ParamLocationQuery, *params.EDYMD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiOverseasPriceV1QuotationsSearchInfoRequest generates requests for GetUapiOverseasPriceV1QuotationsSearchInfo
func NewGetUapiOverseasPriceV1QuotationsSearchInfoRequest(server string, params *GetUapiOverseasPriceV1QuotationsSearchInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-price/v1/quotations/search-info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PDNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PDNO", runtime.ParamLocationQuery, *params.PDNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PRDTTYPECD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PRDT_TYPE_CD", runtime.ParamLocationQuery, *params.PRDTTYPECD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiOverseasStockV1QuotationsCountriesHolidayRequest generates requests for GetUapiOverseasStockV1QuotationsCountriesHoliday
func NewGetUapiOverseasStockV1QuotationsCountriesHolidayRequest(server string, params *GetUapiOverseasStockV1QuotationsCountriesHolidayParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-stock/v1/quotations/countries-holiday")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TRADDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "TRAD_DT", runtime.ParamLocationQuery, *params.TRADDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK", runtime.ParamLocationQuery, *params.CTXAREANK); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK", runtime.ParamLocationQuery, *params.CTXAREAFK); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewPostUapiOverseasStockV1TradingDaytimeOrderRequest calls the generic PostUapiOverseasStockV1TradingDaytimeOrder builder with application/json body
func NewPostUapiOverseasStockV1TradingDaytimeOrderRequest(server string, params *PostUapiOverseasStockV1TradingDaytimeOrderParams, body PostUapiOverseasStockV1TradingDaytimeOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUapiOverseasStockV1TradingDaytimeOrderRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostUapiOverseasStockV1TradingDaytimeOrderRequestWithBody generates requests for PostUapiOverseasStockV1TradingDaytimeOrder with any type of body
func NewPostUapiOverseasStockV1TradingDaytimeOrderRequestWithBody(server string, params *PostUapiOverseasStockV1TradingDaytimeOrderParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-stock/v1/trading/daytime-order")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Hashkey != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "hashkey", runtime.ParamLocationHeader, *params.Hashkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("hashkey", headerParam5)
		}

	}

	return req, nil
}

// NewPostUapiOverseasStockV1TradingDaytimeOrderRvsecnclRequest calls the generic PostUapiOverseasStockV1TradingDaytimeOrderRvsecncl builder with application/json body
func NewPostUapiOverseasStockV1TradingDaytimeOrderRvsecnclRequest(server string, params *PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclParams, body PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUapiOverseasStockV1TradingDaytimeOrderRvsecnclRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostUapiOverseasStockV1TradingDaytimeOrderRvsecnclRequestWithBody generates requests for PostUapiOverseasStockV1TradingDaytimeOrderRvsecncl with any type of body
func NewPostUapiOverseasStockV1TradingDaytimeOrderRvsecnclRequestWithBody(server string, params *PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-stock/v1/trading/daytime-order-rvsecncl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Hashkey != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "hashkey", runtime.ParamLocationHeader, *params.Hashkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("hashkey", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiOverseasStockV1TradingForeignMarginRequest generates requests for GetUapiOverseasStockV1TradingForeignMargin
func NewGetUapiOverseasStockV1TradingForeignMarginRequest(server string, params *GetUapiOverseasStockV1TradingForeignMarginParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-stock/v1/trading/foreign-margin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiOverseasStockV1TradingInquireBalanceRequest generates requests for GetUapiOverseasStockV1TradingInquireBalance
func NewGetUapiOverseasStockV1TradingInquireBalanceRequest(server string, params *GetUapiOverseasStockV1TradingInquireBalanceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-stock/v1/trading/inquire-balance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OVRSEXCGCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OVRS_EXCG_CD", runtime.ParamLocationQuery, *params.OVRSEXCGCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TRCRCYCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "TR_CRCY_CD", runtime.ParamLocationQuery, *params.TRCRCYCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK200", runtime.ParamLocationQuery, *params.CTXAREAFK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK200", runtime.ParamLocationQuery, *params.CTXAREANK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiOverseasStockV1TradingInquireCcnlRequest generates requests for GetUapiOverseasStockV1TradingInquireCcnl
func NewGetUapiOverseasStockV1TradingInquireCcnlRequest(server string, params *GetUapiOverseasStockV1TradingInquireCcnlParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-stock/v1/trading/inquire-ccnl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PDNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PDNO", runtime.ParamLocationQuery, *params.PDNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ORDSTRTDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ORD_STRT_DT", runtime.ParamLocationQuery, *params.ORDSTRTDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ORDENDDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ORD_END_DT", runtime.ParamLocationQuery, *params.ORDENDDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SLLBUYDVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SLL_BUY_DVSN", runtime.ParamLocationQuery, *params.SLLBUYDVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CCLDNCCSDVSN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CCLD_NCCS_DVSN", runtime.ParamLocationQuery, *params.CCLDNCCSDVSN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OVRSEXCGCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OVRS_EXCG_CD", runtime.ParamLocationQuery, *params.OVRSEXCGCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SORTSQN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SORT_SQN", runtime.ParamLocationQuery, *params.SORTSQN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ORDDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ORD_DT", runtime.ParamLocationQuery, *params.ORDDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ORDGNOBRNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ORD_GNO_BRNO", runtime.ParamLocationQuery, *params.ORDGNOBRNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ODNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ODNO", runtime.ParamLocationQuery, *params.ODNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK200", runtime.ParamLocationQuery, *params.CTXAREAFK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK200", runtime.ParamLocationQuery, *params.CTXAREANK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiOverseasStockV1TradingInquireNccsRequest generates requests for GetUapiOverseasStockV1TradingInquireNccs
func NewGetUapiOverseasStockV1TradingInquireNccsRequest(server string, params *GetUapiOverseasStockV1TradingInquireNccsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-stock/v1/trading/inquire-nccs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OVRSEXCGCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OVRS_EXCG_CD", runtime.ParamLocationQuery, *params.OVRSEXCGCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SORTSQN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SORT_SQN", runtime.ParamLocationQuery, *params.SORTSQN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK200", runtime.ParamLocationQuery, *params.CTXAREAFK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK200", runtime.ParamLocationQuery, *params.CTXAREANK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiOverseasStockV1TradingInquirePaymtStdrBalanceRequest generates requests for GetUapiOverseasStockV1TradingInquirePaymtStdrBalance
func NewGetUapiOverseasStockV1TradingInquirePaymtStdrBalanceRequest(server string, params *GetUapiOverseasStockV1TradingInquirePaymtStdrBalanceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-stock/v1/trading/inquire-paymt-stdr-balance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BASSDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "BASS_DT", runtime.ParamLocationQuery, *params.BASSDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WCRCFRCRDVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "WCRC_FRCR_DVSN_CD", runtime.ParamLocationQuery, *params.WCRCFRCRDVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRDVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_DVSN_CD", runtime.ParamLocationQuery, *params.INQRDVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiOverseasStockV1TradingInquirePeriodProfitRequest generates requests for GetUapiOverseasStockV1TradingInquirePeriodProfit
func NewGetUapiOverseasStockV1TradingInquirePeriodProfitRequest(server string, params *GetUapiOverseasStockV1TradingInquirePeriodProfitParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-stock/v1/trading/inquire-period-profit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OVRSEXCGCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OVRS_EXCG_CD", runtime.ParamLocationQuery, *params.OVRSEXCGCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NATNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NATN_CD", runtime.ParamLocationQuery, *params.NATNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CRCYCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CRCY_CD", runtime.ParamLocationQuery, *params.CRCYCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PDNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PDNO", runtime.ParamLocationQuery, *params.PDNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRSTRTDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_STRT_DT", runtime.ParamLocationQuery, *params.INQRSTRTDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRENDDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_END_DT", runtime.ParamLocationQuery, *params.INQRENDDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WCRCFRCRDVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "WCRC_FRCR_DVSN_CD", runtime.ParamLocationQuery, *params.WCRCFRCRDVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK200", runtime.ParamLocationQuery, *params.CTXAREAFK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK200", runtime.ParamLocationQuery, *params.CTXAREANK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiOverseasStockV1TradingInquirePeriodTransRequest generates requests for GetUapiOverseasStockV1TradingInquirePeriodTrans
func NewGetUapiOverseasStockV1TradingInquirePeriodTransRequest(server string, params *GetUapiOverseasStockV1TradingInquirePeriodTransParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-stock/v1/trading/inquire-period-trans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ERLMSTRTDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ERLM_STRT_DT", runtime.ParamLocationQuery, *params.ERLMSTRTDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ERLMENDDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ERLM_END_DT", runtime.ParamLocationQuery, *params.ERLMENDDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OVRSEXCGCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OVRS_EXCG_CD", runtime.ParamLocationQuery, *params.OVRSEXCGCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PDNO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PDNO", runtime.ParamLocationQuery, *params.PDNO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SLLBUYDVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SLL_BUY_DVSN_CD", runtime.ParamLocationQuery, *params.SLLBUYDVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LOANDVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "LOAN_DVSN_CD", runtime.ParamLocationQuery, *params.LOANDVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK100 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK100", runtime.ParamLocationQuery, *params.CTXAREAFK100); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK100 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK100", runtime.ParamLocationQuery, *params.CTXAREANK100); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Custtype != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "custtype", runtime.ParamLocationHeader, *params.Custtype)
			if err != nil {
				return nil, err
			}

			req.Header.Set("custtype", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiOverseasStockV1TradingInquirePresentBalanceRequest generates requests for GetUapiOverseasStockV1TradingInquirePresentBalance
func NewGetUapiOverseasStockV1TradingInquirePresentBalanceRequest(server string, params *GetUapiOverseasStockV1TradingInquirePresentBalanceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-stock/v1/trading/inquire-present-balance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NATNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NATN_CD", runtime.ParamLocationQuery, *params.NATNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WCRCFRCRDVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "WCRC_FRCR_DVSN_CD", runtime.ParamLocationQuery, *params.WCRCFRCRDVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TRMKETCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "TR_MKET_CD", runtime.ParamLocationQuery, *params.TRMKETCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRDVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_DVSN_CD", runtime.ParamLocationQuery, *params.INQRDVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewGetUapiOverseasStockV1TradingInquirePsamountRequest generates requests for GetUapiOverseasStockV1TradingInquirePsamount
func NewGetUapiOverseasStockV1TradingInquirePsamountRequest(server string, params *GetUapiOverseasStockV1TradingInquirePsamountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-stock/v1/trading/inquire-psamount")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OVRSEXCGCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OVRS_EXCG_CD", runtime.ParamLocationQuery, *params.OVRSEXCGCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OVRSORDUNPR != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OVRS_ORD_UNPR", runtime.ParamLocationQuery, *params.OVRSORDUNPR); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ITEMCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ITEM_CD", runtime.ParamLocationQuery, *params.ITEMCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewPostUapiOverseasStockV1TradingOrderRequest calls the generic PostUapiOverseasStockV1TradingOrder builder with application/json body
func NewPostUapiOverseasStockV1TradingOrderRequest(server string, params *PostUapiOverseasStockV1TradingOrderParams, body PostUapiOverseasStockV1TradingOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUapiOverseasStockV1TradingOrderRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostUapiOverseasStockV1TradingOrderRequestWithBody generates requests for PostUapiOverseasStockV1TradingOrder with any type of body
func NewPostUapiOverseasStockV1TradingOrderRequestWithBody(server string, params *PostUapiOverseasStockV1TradingOrderParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-stock/v1/trading/order")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Hashkey != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "hashkey", runtime.ParamLocationHeader, *params.Hashkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("hashkey", headerParam5)
		}

	}

	return req, nil
}

// NewPostUapiOverseasStockV1TradingOrderResvRequest calls the generic PostUapiOverseasStockV1TradingOrderResv builder with application/json body
func NewPostUapiOverseasStockV1TradingOrderResvRequest(server string, params *PostUapiOverseasStockV1TradingOrderResvParams, body PostUapiOverseasStockV1TradingOrderResvJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUapiOverseasStockV1TradingOrderResvRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostUapiOverseasStockV1TradingOrderResvRequestWithBody generates requests for PostUapiOverseasStockV1TradingOrderResv with any type of body
func NewPostUapiOverseasStockV1TradingOrderResvRequestWithBody(server string, params *PostUapiOverseasStockV1TradingOrderResvParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-stock/v1/trading/order-resv")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Hashkey != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "hashkey", runtime.ParamLocationHeader, *params.Hashkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("hashkey", headerParam5)
		}

	}

	return req, nil
}

// NewPostUapiOverseasStockV1TradingOrderResvCcnlRequest calls the generic PostUapiOverseasStockV1TradingOrderResvCcnl builder with application/json body
func NewPostUapiOverseasStockV1TradingOrderResvCcnlRequest(server string, params *PostUapiOverseasStockV1TradingOrderResvCcnlParams, body PostUapiOverseasStockV1TradingOrderResvCcnlJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUapiOverseasStockV1TradingOrderResvCcnlRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostUapiOverseasStockV1TradingOrderResvCcnlRequestWithBody generates requests for PostUapiOverseasStockV1TradingOrderResvCcnl with any type of body
func NewPostUapiOverseasStockV1TradingOrderResvCcnlRequestWithBody(server string, params *PostUapiOverseasStockV1TradingOrderResvCcnlParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-stock/v1/trading/order-resv-ccnl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Hashkey != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "hashkey", runtime.ParamLocationHeader, *params.Hashkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("hashkey", headerParam5)
		}

	}

	return req, nil
}

// NewGetUapiOverseasStockV1TradingOrderResvListRequest generates requests for GetUapiOverseasStockV1TradingOrderResvList
func NewGetUapiOverseasStockV1TradingOrderResvListRequest(server string, params *GetUapiOverseasStockV1TradingOrderResvListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-stock/v1/trading/order-resv-list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CANO != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CANO", runtime.ParamLocationQuery, *params.CANO); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ACNTPRDTCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ACNT_PRDT_CD", runtime.ParamLocationQuery, *params.ACNTPRDTCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRSTRTDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_STRT_DT", runtime.ParamLocationQuery, *params.INQRSTRTDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRENDDT != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_END_DT", runtime.ParamLocationQuery, *params.INQRENDDT); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.INQRDVSNCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "INQR_DVSN_CD", runtime.ParamLocationQuery, *params.INQRDVSNCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PRDTTYPECD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PRDT_TYPE_CD", runtime.ParamLocationQuery, *params.PRDTTYPECD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OVRSEXCGCD != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OVRS_EXCG_CD", runtime.ParamLocationQuery, *params.OVRSEXCGCD); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREAFK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_FK200", runtime.ParamLocationQuery, *params.CTXAREAFK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CTXAREANK200 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CTX_AREA_NK200", runtime.ParamLocationQuery, *params.CTXAREANK200); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

	}

	return req, nil
}

// NewPostUapiOverseasStockV1TradingOrderRvsecnclRequest calls the generic PostUapiOverseasStockV1TradingOrderRvsecncl builder with application/json body
func NewPostUapiOverseasStockV1TradingOrderRvsecnclRequest(server string, params *PostUapiOverseasStockV1TradingOrderRvsecnclParams, body PostUapiOverseasStockV1TradingOrderRvsecnclJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUapiOverseasStockV1TradingOrderRvsecnclRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostUapiOverseasStockV1TradingOrderRvsecnclRequestWithBody generates requests for PostUapiOverseasStockV1TradingOrderRvsecncl with any type of body
func NewPostUapiOverseasStockV1TradingOrderRvsecnclRequestWithBody(server string, params *PostUapiOverseasStockV1TradingOrderRvsecnclParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uapi/overseas-stock/v1/trading/order-rvsecncl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("content-type", headerParam0)
		}

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam1)
		}

		if params.Appkey != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "appkey", runtime.ParamLocationHeader, *params.Appkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appkey", headerParam2)
		}

		if params.Appsecret != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "appsecret", runtime.ParamLocationHeader, *params.Appsecret)
			if err != nil {
				return nil, err
			}

			req.Header.Set("appsecret", headerParam3)
		}

		if params.TrId != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "tr_id", runtime.ParamLocationHeader, *params.TrId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("tr_id", headerParam4)
		}

		if params.Hashkey != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "hashkey", runtime.ParamLocationHeader, *params.Hashkey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("hashkey", headerParam5)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostOauth2ApprovalWithBodyWithResponse request with any body
	PostOauth2ApprovalWithBodyWithResponse(ctx context.Context, params *PostOauth2ApprovalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOauth2ApprovalResponse, error)

	PostOauth2ApprovalWithResponse(ctx context.Context, params *PostOauth2ApprovalParams, body PostOauth2ApprovalJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOauth2ApprovalResponse, error)

	// PostOauth2RevokePWithBodyWithResponse request with any body
	PostOauth2RevokePWithBodyWithResponse(ctx context.Context, params *PostOauth2RevokePParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOauth2RevokePResponse, error)

	PostOauth2RevokePWithResponse(ctx context.Context, params *PostOauth2RevokePParams, body PostOauth2RevokePJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOauth2RevokePResponse, error)

	// PostOauth2TokenPWithBodyWithResponse request with any body
	PostOauth2TokenPWithBodyWithResponse(ctx context.Context, params *PostOauth2TokenPParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOauth2TokenPResponse, error)

	PostOauth2TokenPWithResponse(ctx context.Context, params *PostOauth2TokenPParams, body PostOauth2TokenPJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOauth2TokenPResponse, error)

	// GetUapiDomesticBondV1QuotationsAvgUnitWithResponse request
	GetUapiDomesticBondV1QuotationsAvgUnitWithResponse(ctx context.Context, params *GetUapiDomesticBondV1QuotationsAvgUnitParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticBondV1QuotationsAvgUnitResponse, error)

	// GetUapiDomesticBondV1QuotationsInquireAskingPriceWithResponse request
	GetUapiDomesticBondV1QuotationsInquireAskingPriceWithResponse(ctx context.Context, params *GetUapiDomesticBondV1QuotationsInquireAskingPriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticBondV1QuotationsInquireAskingPriceResponse, error)

	// GetUapiDomesticBondV1QuotationsInquireCcnlWithResponse request
	GetUapiDomesticBondV1QuotationsInquireCcnlWithResponse(ctx context.Context, params *GetUapiDomesticBondV1QuotationsInquireCcnlParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticBondV1QuotationsInquireCcnlResponse, error)

	// GetUapiDomesticBondV1QuotationsInquireDailyItemchartpriceWithResponse request
	GetUapiDomesticBondV1QuotationsInquireDailyItemchartpriceWithResponse(ctx context.Context, params *GetUapiDomesticBondV1QuotationsInquireDailyItemchartpriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticBondV1QuotationsInquireDailyItemchartpriceResponse, error)

	// GetUapiDomesticBondV1QuotationsInquirePriceWithResponse request
	GetUapiDomesticBondV1QuotationsInquirePriceWithResponse(ctx context.Context, params *GetUapiDomesticBondV1QuotationsInquirePriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticBondV1QuotationsInquirePriceResponse, error)

	// GetUapiDomesticBondV1QuotationsIssueInfoWithResponse request
	GetUapiDomesticBondV1QuotationsIssueInfoWithResponse(ctx context.Context, params *GetUapiDomesticBondV1QuotationsIssueInfoParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticBondV1QuotationsIssueInfoResponse, error)

	// GetUapiDomesticBondV1QuotationsSearchBondInfoWithResponse request
	GetUapiDomesticBondV1QuotationsSearchBondInfoWithResponse(ctx context.Context, params *GetUapiDomesticBondV1QuotationsSearchBondInfoParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticBondV1QuotationsSearchBondInfoResponse, error)

	// PostUapiDomesticBondV1TradingBuyWithBodyWithResponse request with any body
	PostUapiDomesticBondV1TradingBuyWithBodyWithResponse(ctx context.Context, params *PostUapiDomesticBondV1TradingBuyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiDomesticBondV1TradingBuyResponse, error)

	PostUapiDomesticBondV1TradingBuyWithResponse(ctx context.Context, params *PostUapiDomesticBondV1TradingBuyParams, body PostUapiDomesticBondV1TradingBuyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiDomesticBondV1TradingBuyResponse, error)

	// GetUapiDomesticBondV1TradingInquireBalanceWithResponse request
	GetUapiDomesticBondV1TradingInquireBalanceWithResponse(ctx context.Context, params *GetUapiDomesticBondV1TradingInquireBalanceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticBondV1TradingInquireBalanceResponse, error)

	// GetUapiDomesticBondV1TradingInquireDailyCcldWithResponse request
	GetUapiDomesticBondV1TradingInquireDailyCcldWithResponse(ctx context.Context, params *GetUapiDomesticBondV1TradingInquireDailyCcldParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticBondV1TradingInquireDailyCcldResponse, error)

	// GetUapiDomesticBondV1TradingInquirePsblOrderWithResponse request
	GetUapiDomesticBondV1TradingInquirePsblOrderWithResponse(ctx context.Context, params *GetUapiDomesticBondV1TradingInquirePsblOrderParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticBondV1TradingInquirePsblOrderResponse, error)

	// GetUapiDomesticBondV1TradingInquirePsblRvsecnclWithResponse request
	GetUapiDomesticBondV1TradingInquirePsblRvsecnclWithResponse(ctx context.Context, params *GetUapiDomesticBondV1TradingInquirePsblRvsecnclParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticBondV1TradingInquirePsblRvsecnclResponse, error)

	// PostUapiDomesticBondV1TradingOrderRvsecnclWithBodyWithResponse request with any body
	PostUapiDomesticBondV1TradingOrderRvsecnclWithBodyWithResponse(ctx context.Context, params *PostUapiDomesticBondV1TradingOrderRvsecnclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiDomesticBondV1TradingOrderRvsecnclResponse, error)

	PostUapiDomesticBondV1TradingOrderRvsecnclWithResponse(ctx context.Context, params *PostUapiDomesticBondV1TradingOrderRvsecnclParams, body PostUapiDomesticBondV1TradingOrderRvsecnclJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiDomesticBondV1TradingOrderRvsecnclResponse, error)

	// PostUapiDomesticBondV1TradingSellWithBodyWithResponse request with any body
	PostUapiDomesticBondV1TradingSellWithBodyWithResponse(ctx context.Context, params *PostUapiDomesticBondV1TradingSellParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiDomesticBondV1TradingSellResponse, error)

	PostUapiDomesticBondV1TradingSellWithResponse(ctx context.Context, params *PostUapiDomesticBondV1TradingSellParams, body PostUapiDomesticBondV1TradingSellJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiDomesticBondV1TradingSellResponse, error)

	// GetUapiDomesticFutureoptionV1QuotationsDisplayBoardCallputWithResponse request
	GetUapiDomesticFutureoptionV1QuotationsDisplayBoardCallputWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsDisplayBoardCallputParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1QuotationsDisplayBoardCallputResponse, error)

	// GetUapiDomesticFutureoptionV1QuotationsDisplayBoardFuturesWithResponse request
	GetUapiDomesticFutureoptionV1QuotationsDisplayBoardFuturesWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsDisplayBoardFuturesParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1QuotationsDisplayBoardFuturesResponse, error)

	// GetUapiDomesticFutureoptionV1QuotationsDisplayBoardOptionListWithResponse request
	GetUapiDomesticFutureoptionV1QuotationsDisplayBoardOptionListWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsDisplayBoardOptionListParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1QuotationsDisplayBoardOptionListResponse, error)

	// GetUapiDomesticFutureoptionV1QuotationsDisplayBoardTopWithResponse request
	GetUapiDomesticFutureoptionV1QuotationsDisplayBoardTopWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsDisplayBoardTopParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1QuotationsDisplayBoardTopResponse, error)

	// GetUapiDomesticFutureoptionV1QuotationsExpPriceTrendWithResponse request
	GetUapiDomesticFutureoptionV1QuotationsExpPriceTrendWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsExpPriceTrendParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1QuotationsExpPriceTrendResponse, error)

	// GetUapiDomesticFutureoptionV1QuotationsInquireAskingPriceWithResponse request
	GetUapiDomesticFutureoptionV1QuotationsInquireAskingPriceWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsInquireAskingPriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1QuotationsInquireAskingPriceResponse, error)

	// GetUapiDomesticFutureoptionV1QuotationsInquireDailyFuopchartpriceWithResponse request
	GetUapiDomesticFutureoptionV1QuotationsInquireDailyFuopchartpriceWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsInquireDailyFuopchartpriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1QuotationsInquireDailyFuopchartpriceResponse, error)

	// GetUapiDomesticFutureoptionV1QuotationsInquirePriceWithResponse request
	GetUapiDomesticFutureoptionV1QuotationsInquirePriceWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsInquirePriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1QuotationsInquirePriceResponse, error)

	// GetUapiDomesticFutureoptionV1QuotationsInquireTimeFuopchartpriceWithResponse request
	GetUapiDomesticFutureoptionV1QuotationsInquireTimeFuopchartpriceWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsInquireTimeFuopchartpriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1QuotationsInquireTimeFuopchartpriceResponse, error)

	// GetUapiDomesticFutureoptionV1TradingInquireBalanceWithResponse request
	GetUapiDomesticFutureoptionV1TradingInquireBalanceWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireBalanceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1TradingInquireBalanceResponse, error)

	// GetUapiDomesticFutureoptionV1TradingInquireBalanceSettlementPlWithResponse request
	GetUapiDomesticFutureoptionV1TradingInquireBalanceSettlementPlWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireBalanceSettlementPlParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1TradingInquireBalanceSettlementPlResponse, error)

	// GetUapiDomesticFutureoptionV1TradingInquireBalanceValuationPlWithResponse request
	GetUapiDomesticFutureoptionV1TradingInquireBalanceValuationPlWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireBalanceValuationPlParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1TradingInquireBalanceValuationPlResponse, error)

	// GetUapiDomesticFutureoptionV1TradingInquireCcnlWithResponse request
	GetUapiDomesticFutureoptionV1TradingInquireCcnlWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireCcnlParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1TradingInquireCcnlResponse, error)

	// GetUapiDomesticFutureoptionV1TradingInquireCcnlBstimeWithResponse request
	GetUapiDomesticFutureoptionV1TradingInquireCcnlBstimeWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireCcnlBstimeParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1TradingInquireCcnlBstimeResponse, error)

	// GetUapiDomesticFutureoptionV1TradingInquireDailyAmountFeeWithResponse request
	GetUapiDomesticFutureoptionV1TradingInquireDailyAmountFeeWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireDailyAmountFeeParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1TradingInquireDailyAmountFeeResponse, error)

	// GetUapiDomesticFutureoptionV1TradingInquireDepositWithResponse request
	GetUapiDomesticFutureoptionV1TradingInquireDepositWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireDepositParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1TradingInquireDepositResponse, error)

	// GetUapiDomesticFutureoptionV1TradingInquireNgtBalanceWithResponse request
	GetUapiDomesticFutureoptionV1TradingInquireNgtBalanceWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireNgtBalanceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1TradingInquireNgtBalanceResponse, error)

	// GetUapiDomesticFutureoptionV1TradingInquireNgtCcnlWithResponse request
	GetUapiDomesticFutureoptionV1TradingInquireNgtCcnlWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireNgtCcnlParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1TradingInquireNgtCcnlResponse, error)

	// GetUapiDomesticFutureoptionV1TradingInquirePsblNgtOrderWithResponse request
	GetUapiDomesticFutureoptionV1TradingInquirePsblNgtOrderWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquirePsblNgtOrderParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1TradingInquirePsblNgtOrderResponse, error)

	// GetUapiDomesticFutureoptionV1TradingInquirePsblOrderWithResponse request
	GetUapiDomesticFutureoptionV1TradingInquirePsblOrderWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquirePsblOrderParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1TradingInquirePsblOrderResponse, error)

	// GetUapiDomesticFutureoptionV1TradingNgtMarginDetailWithResponse request
	GetUapiDomesticFutureoptionV1TradingNgtMarginDetailWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingNgtMarginDetailParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1TradingNgtMarginDetailResponse, error)

	// PostUapiDomesticFutureoptionV1TradingOrderWithBodyWithResponse request with any body
	PostUapiDomesticFutureoptionV1TradingOrderWithBodyWithResponse(ctx context.Context, params *PostUapiDomesticFutureoptionV1TradingOrderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiDomesticFutureoptionV1TradingOrderResponse, error)

	PostUapiDomesticFutureoptionV1TradingOrderWithResponse(ctx context.Context, params *PostUapiDomesticFutureoptionV1TradingOrderParams, body PostUapiDomesticFutureoptionV1TradingOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiDomesticFutureoptionV1TradingOrderResponse, error)

	// PostUapiDomesticFutureoptionV1TradingOrderRvsecnclWithBodyWithResponse request with any body
	PostUapiDomesticFutureoptionV1TradingOrderRvsecnclWithBodyWithResponse(ctx context.Context, params *PostUapiDomesticFutureoptionV1TradingOrderRvsecnclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiDomesticFutureoptionV1TradingOrderRvsecnclResponse, error)

	PostUapiDomesticFutureoptionV1TradingOrderRvsecnclWithResponse(ctx context.Context, params *PostUapiDomesticFutureoptionV1TradingOrderRvsecnclParams, body PostUapiDomesticFutureoptionV1TradingOrderRvsecnclJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiDomesticFutureoptionV1TradingOrderRvsecnclResponse, error)

	// GetUapiDomesticStockV1FinanceBalanceSheetWithResponse request
	GetUapiDomesticStockV1FinanceBalanceSheetWithResponse(ctx context.Context, params *GetUapiDomesticStockV1FinanceBalanceSheetParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1FinanceBalanceSheetResponse, error)

	// GetUapiDomesticStockV1FinanceFinancialRatioWithResponse request
	GetUapiDomesticStockV1FinanceFinancialRatioWithResponse(ctx context.Context, params *GetUapiDomesticStockV1FinanceFinancialRatioParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1FinanceFinancialRatioResponse, error)

	// GetUapiDomesticStockV1FinanceGrowthRatioWithResponse request
	GetUapiDomesticStockV1FinanceGrowthRatioWithResponse(ctx context.Context, params *GetUapiDomesticStockV1FinanceGrowthRatioParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1FinanceGrowthRatioResponse, error)

	// GetUapiDomesticStockV1FinanceIncomeStatementWithResponse request
	GetUapiDomesticStockV1FinanceIncomeStatementWithResponse(ctx context.Context, params *GetUapiDomesticStockV1FinanceIncomeStatementParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1FinanceIncomeStatementResponse, error)

	// GetUapiDomesticStockV1FinanceOtherMajorRatiosWithResponse request
	GetUapiDomesticStockV1FinanceOtherMajorRatiosWithResponse(ctx context.Context, params *GetUapiDomesticStockV1FinanceOtherMajorRatiosParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1FinanceOtherMajorRatiosResponse, error)

	// GetUapiDomesticStockV1FinanceProfitRatioWithResponse request
	GetUapiDomesticStockV1FinanceProfitRatioWithResponse(ctx context.Context, params *GetUapiDomesticStockV1FinanceProfitRatioParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1FinanceProfitRatioResponse, error)

	// GetUapiDomesticStockV1FinanceStabilityRatioWithResponse request
	GetUapiDomesticStockV1FinanceStabilityRatioWithResponse(ctx context.Context, params *GetUapiDomesticStockV1FinanceStabilityRatioParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1FinanceStabilityRatioResponse, error)

	// GetUapiDomesticStockV1KsdinfoBonusIssueWithResponse request
	GetUapiDomesticStockV1KsdinfoBonusIssueWithResponse(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoBonusIssueParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1KsdinfoBonusIssueResponse, error)

	// GetUapiDomesticStockV1KsdinfoCapDcrsWithResponse request
	GetUapiDomesticStockV1KsdinfoCapDcrsWithResponse(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoCapDcrsParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1KsdinfoCapDcrsResponse, error)

	// GetUapiDomesticStockV1KsdinfoDividendWithResponse request
	GetUapiDomesticStockV1KsdinfoDividendWithResponse(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoDividendParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1KsdinfoDividendResponse, error)

	// GetUapiDomesticStockV1KsdinfoListInfoWithResponse request
	GetUapiDomesticStockV1KsdinfoListInfoWithResponse(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoListInfoParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1KsdinfoListInfoResponse, error)

	// GetUapiDomesticStockV1KsdinfoMergerSplitWithResponse request
	GetUapiDomesticStockV1KsdinfoMergerSplitWithResponse(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoMergerSplitParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1KsdinfoMergerSplitResponse, error)

	// GetUapiDomesticStockV1KsdinfoPaidinCapinWithResponse request
	GetUapiDomesticStockV1KsdinfoPaidinCapinWithResponse(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoPaidinCapinParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1KsdinfoPaidinCapinResponse, error)

	// GetUapiDomesticStockV1KsdinfoPurreqWithResponse request
	GetUapiDomesticStockV1KsdinfoPurreqWithResponse(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoPurreqParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1KsdinfoPurreqResponse, error)

	// GetUapiDomesticStockV1KsdinfoRevSplitWithResponse request
	GetUapiDomesticStockV1KsdinfoRevSplitWithResponse(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoRevSplitParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1KsdinfoRevSplitResponse, error)

	// GetUapiDomesticStockV1KsdinfoSharehldMeetWithResponse request
	GetUapiDomesticStockV1KsdinfoSharehldMeetWithResponse(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoSharehldMeetParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1KsdinfoSharehldMeetResponse, error)

	// GetUapiDomesticStockV1QuotationsCaptureUplowpriceWithResponse request
	GetUapiDomesticStockV1QuotationsCaptureUplowpriceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsCaptureUplowpriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsCaptureUplowpriceResponse, error)

	// GetUapiDomesticStockV1QuotationsChkHolidayWithResponse request
	GetUapiDomesticStockV1QuotationsChkHolidayWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsChkHolidayParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsChkHolidayResponse, error)

	// GetUapiDomesticStockV1QuotationsCompInterestWithResponse request
	GetUapiDomesticStockV1QuotationsCompInterestWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsCompInterestParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsCompInterestResponse, error)

	// GetUapiDomesticStockV1QuotationsCompProgramTradeDailyWithResponse request
	GetUapiDomesticStockV1QuotationsCompProgramTradeDailyWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsCompProgramTradeDailyParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsCompProgramTradeDailyResponse, error)

	// GetUapiDomesticStockV1QuotationsCompProgramTradeTodayWithResponse request
	GetUapiDomesticStockV1QuotationsCompProgramTradeTodayWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsCompProgramTradeTodayParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsCompProgramTradeTodayResponse, error)

	// GetUapiDomesticStockV1QuotationsCreditByCompanyWithResponse request
	GetUapiDomesticStockV1QuotationsCreditByCompanyWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsCreditByCompanyParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsCreditByCompanyResponse, error)

	// GetUapiDomesticStockV1QuotationsDailyCreditBalanceWithResponse request
	GetUapiDomesticStockV1QuotationsDailyCreditBalanceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsDailyCreditBalanceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsDailyCreditBalanceResponse, error)

	// GetUapiDomesticStockV1QuotationsDailyShortSaleWithResponse request
	GetUapiDomesticStockV1QuotationsDailyShortSaleWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsDailyShortSaleParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsDailyShortSaleResponse, error)

	// GetUapiDomesticStockV1QuotationsEstimatePerformWithResponse request
	GetUapiDomesticStockV1QuotationsEstimatePerformWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsEstimatePerformParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsEstimatePerformResponse, error)

	// GetUapiDomesticStockV1QuotationsExpClosingPriceWithResponse request
	GetUapiDomesticStockV1QuotationsExpClosingPriceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsExpClosingPriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsExpClosingPriceResponse, error)

	// GetUapiDomesticStockV1QuotationsExpIndexTrendWithResponse request
	GetUapiDomesticStockV1QuotationsExpIndexTrendWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsExpIndexTrendParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsExpIndexTrendResponse, error)

	// GetUapiDomesticStockV1QuotationsExpPriceTrendWithResponse request
	GetUapiDomesticStockV1QuotationsExpPriceTrendWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsExpPriceTrendParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsExpPriceTrendResponse, error)

	// GetUapiDomesticStockV1QuotationsForeignInstitutionTotalWithResponse request
	GetUapiDomesticStockV1QuotationsForeignInstitutionTotalWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsForeignInstitutionTotalParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsForeignInstitutionTotalResponse, error)

	// GetUapiDomesticStockV1QuotationsFrgnmemPchsTrendWithResponse request
	GetUapiDomesticStockV1QuotationsFrgnmemPchsTrendWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsFrgnmemPchsTrendParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsFrgnmemPchsTrendResponse, error)

	// GetUapiDomesticStockV1QuotationsFrgnmemTradeEstimateWithResponse request
	GetUapiDomesticStockV1QuotationsFrgnmemTradeEstimateWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsFrgnmemTradeEstimateParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsFrgnmemTradeEstimateResponse, error)

	// GetUapiDomesticStockV1QuotationsFrgnmemTradeTrendWithResponse request
	GetUapiDomesticStockV1QuotationsFrgnmemTradeTrendWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsFrgnmemTradeTrendParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsFrgnmemTradeTrendResponse, error)

	// GetUapiDomesticStockV1QuotationsInquireAskingPriceExpCcnWithResponse request
	GetUapiDomesticStockV1QuotationsInquireAskingPriceExpCcnWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireAskingPriceExpCcnParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireAskingPriceExpCcnResponse, error)

	// GetUapiDomesticStockV1QuotationsInquireCcnlWithResponse request
	GetUapiDomesticStockV1QuotationsInquireCcnlWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireCcnlParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireCcnlResponse, error)

	// GetUapiDomesticStockV1QuotationsInquireDailyIndexchartpriceWithResponse request
	GetUapiDomesticStockV1QuotationsInquireDailyIndexchartpriceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireDailyIndexchartpriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireDailyIndexchartpriceResponse, error)

	// GetUapiDomesticStockV1QuotationsInquireDailyItemchartpriceWithResponse request
	GetUapiDomesticStockV1QuotationsInquireDailyItemchartpriceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireDailyItemchartpriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireDailyItemchartpriceResponse, error)

	// GetUapiDomesticStockV1QuotationsInquireDailyOvertimepriceWithResponse request
	GetUapiDomesticStockV1QuotationsInquireDailyOvertimepriceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireDailyOvertimepriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireDailyOvertimepriceResponse, error)

	// GetUapiDomesticStockV1QuotationsInquireDailyPriceWithResponse request
	GetUapiDomesticStockV1QuotationsInquireDailyPriceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireDailyPriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireDailyPriceResponse, error)

	// GetUapiDomesticStockV1QuotationsInquireDailyTradeVolumeWithResponse request
	GetUapiDomesticStockV1QuotationsInquireDailyTradeVolumeWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireDailyTradeVolumeParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireDailyTradeVolumeResponse, error)

	// GetUapiDomesticStockV1QuotationsInquireElwPriceWithResponse request
	GetUapiDomesticStockV1QuotationsInquireElwPriceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireElwPriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireElwPriceResponse, error)

	// GetUapiDomesticStockV1QuotationsInquireIndexTickpriceWithResponse request
	GetUapiDomesticStockV1QuotationsInquireIndexTickpriceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireIndexTickpriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireIndexTickpriceResponse, error)

	// GetUapiDomesticStockV1QuotationsInquireIndexTimepriceWithResponse request
	GetUapiDomesticStockV1QuotationsInquireIndexTimepriceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireIndexTimepriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireIndexTimepriceResponse, error)

	// GetUapiDomesticStockV1QuotationsInquireInvestorWithResponse request
	GetUapiDomesticStockV1QuotationsInquireInvestorWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireInvestorParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireInvestorResponse, error)

	// GetUapiDomesticStockV1QuotationsInquireInvestorDailyByMarketWithResponse request
	GetUapiDomesticStockV1QuotationsInquireInvestorDailyByMarketWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireInvestorDailyByMarketParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireInvestorDailyByMarketResponse, error)

	// GetUapiDomesticStockV1QuotationsInquireInvestorTimeByMarketWithResponse request
	GetUapiDomesticStockV1QuotationsInquireInvestorTimeByMarketWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireInvestorTimeByMarketParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireInvestorTimeByMarketResponse, error)

	// GetUapiDomesticStockV1QuotationsInquireMemberWithResponse request
	GetUapiDomesticStockV1QuotationsInquireMemberWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireMemberParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireMemberResponse, error)

	// GetUapiDomesticStockV1QuotationsInquireMemberDailyWithResponse request
	GetUapiDomesticStockV1QuotationsInquireMemberDailyWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireMemberDailyParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireMemberDailyResponse, error)

	// GetUapiDomesticStockV1QuotationsInquireOvertimeAskingPriceWithResponse request
	GetUapiDomesticStockV1QuotationsInquireOvertimeAskingPriceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireOvertimeAskingPriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireOvertimeAskingPriceResponse, error)

	// GetUapiDomesticStockV1QuotationsInquireOvertimePriceWithResponse request
	GetUapiDomesticStockV1QuotationsInquireOvertimePriceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireOvertimePriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireOvertimePriceResponse, error)

	// GetUapiDomesticStockV1QuotationsInquirePriceWithResponse request
	GetUapiDomesticStockV1QuotationsInquirePriceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquirePriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquirePriceResponse, error)

	// GetUapiDomesticStockV1QuotationsInquirePrice2WithResponse request
	GetUapiDomesticStockV1QuotationsInquirePrice2WithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquirePrice2Params, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquirePrice2Response, error)

	// GetUapiDomesticStockV1QuotationsInquireTimeIndexchartpriceWithResponse request
	GetUapiDomesticStockV1QuotationsInquireTimeIndexchartpriceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireTimeIndexchartpriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireTimeIndexchartpriceResponse, error)

	// GetUapiDomesticStockV1QuotationsInquireTimeItemchartpriceWithResponse request
	GetUapiDomesticStockV1QuotationsInquireTimeItemchartpriceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireTimeItemchartpriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireTimeItemchartpriceResponse, error)

	// GetUapiDomesticStockV1QuotationsInquireTimeItemconclusionWithResponse request
	GetUapiDomesticStockV1QuotationsInquireTimeItemconclusionWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireTimeItemconclusionParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireTimeItemconclusionResponse, error)

	// GetUapiDomesticStockV1QuotationsInquireTimeOvertimeconclusionWithResponse request
	GetUapiDomesticStockV1QuotationsInquireTimeOvertimeconclusionWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireTimeOvertimeconclusionParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireTimeOvertimeconclusionResponse, error)

	// GetUapiDomesticStockV1QuotationsInquireViStatusWithResponse request
	GetUapiDomesticStockV1QuotationsInquireViStatusWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireViStatusParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireViStatusResponse, error)

	// GetUapiDomesticStockV1QuotationsIntstockGrouplistWithResponse request
	GetUapiDomesticStockV1QuotationsIntstockGrouplistWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsIntstockGrouplistParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsIntstockGrouplistResponse, error)

	// GetUapiDomesticStockV1QuotationsIntstockMultpriceWithResponse request
	GetUapiDomesticStockV1QuotationsIntstockMultpriceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsIntstockMultpriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsIntstockMultpriceResponse, error)

	// GetUapiDomesticStockV1QuotationsIntstockStocklistByGroupWithResponse request
	GetUapiDomesticStockV1QuotationsIntstockStocklistByGroupWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsIntstockStocklistByGroupParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsIntstockStocklistByGroupResponse, error)

	// GetUapiDomesticStockV1QuotationsInvestOpbysecWithResponse request
	GetUapiDomesticStockV1QuotationsInvestOpbysecWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInvestOpbysecParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInvestOpbysecResponse, error)

	// GetUapiDomesticStockV1QuotationsInvestOpinionWithResponse request
	GetUapiDomesticStockV1QuotationsInvestOpinionWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInvestOpinionParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInvestOpinionResponse, error)

	// GetUapiDomesticStockV1QuotationsInvestorProgramTradeTodayWithResponse request
	GetUapiDomesticStockV1QuotationsInvestorProgramTradeTodayWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInvestorProgramTradeTodayParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInvestorProgramTradeTodayResponse, error)

	// GetUapiDomesticStockV1QuotationsInvestorTrendEstimateWithResponse request
	GetUapiDomesticStockV1QuotationsInvestorTrendEstimateWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInvestorTrendEstimateParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInvestorTrendEstimateResponse, error)

	// GetUapiDomesticStockV1QuotationsLendableByCompanyWithResponse request
	GetUapiDomesticStockV1QuotationsLendableByCompanyWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsLendableByCompanyParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsLendableByCompanyResponse, error)

	// GetUapiDomesticStockV1QuotationsMktfundsWithResponse request
	GetUapiDomesticStockV1QuotationsMktfundsWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsMktfundsParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsMktfundsResponse, error)

	// GetUapiDomesticStockV1QuotationsNewsTitleWithResponse request
	GetUapiDomesticStockV1QuotationsNewsTitleWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsNewsTitleParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsNewsTitleResponse, error)

	// GetUapiDomesticStockV1QuotationsPbarTratioWithResponse request
	GetUapiDomesticStockV1QuotationsPbarTratioWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsPbarTratioParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsPbarTratioResponse, error)

	// GetUapiDomesticStockV1QuotationsProgramTradeByStockWithResponse request
	GetUapiDomesticStockV1QuotationsProgramTradeByStockWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsProgramTradeByStockParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsProgramTradeByStockResponse, error)

	// GetUapiDomesticStockV1QuotationsProgramTradeByStockDailyWithResponse request
	GetUapiDomesticStockV1QuotationsProgramTradeByStockDailyWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsProgramTradeByStockDailyParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsProgramTradeByStockDailyResponse, error)

	// GetUapiDomesticStockV1QuotationsPsearchResultWithResponse request
	GetUapiDomesticStockV1QuotationsPsearchResultWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsPsearchResultParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsPsearchResultResponse, error)

	// GetUapiDomesticStockV1QuotationsPsearchTitleWithResponse request
	GetUapiDomesticStockV1QuotationsPsearchTitleWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsPsearchTitleParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsPsearchTitleResponse, error)

	// GetUapiDomesticStockV1QuotationsSearchInfoWithResponse request
	GetUapiDomesticStockV1QuotationsSearchInfoWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsSearchInfoParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsSearchInfoResponse, error)

	// GetUapiDomesticStockV1QuotationsSearchStockInfoWithResponse request
	GetUapiDomesticStockV1QuotationsSearchStockInfoWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsSearchStockInfoParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsSearchStockInfoResponse, error)

	// GetUapiDomesticStockV1QuotationsTradprtByamtWithResponse request
	GetUapiDomesticStockV1QuotationsTradprtByamtWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsTradprtByamtParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsTradprtByamtResponse, error)

	// GetUapiDomesticStockV1QuotationsVolumeRankWithResponse request
	GetUapiDomesticStockV1QuotationsVolumeRankWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsVolumeRankParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsVolumeRankResponse, error)

	// GetUapiDomesticStockV1RankingAfterHourBalanceWithResponse request
	GetUapiDomesticStockV1RankingAfterHourBalanceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingAfterHourBalanceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingAfterHourBalanceResponse, error)

	// GetUapiDomesticStockV1RankingBulkTransNumWithResponse request
	GetUapiDomesticStockV1RankingBulkTransNumWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingBulkTransNumParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingBulkTransNumResponse, error)

	// GetUapiDomesticStockV1RankingCreditBalanceWithResponse request
	GetUapiDomesticStockV1RankingCreditBalanceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingCreditBalanceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingCreditBalanceResponse, error)

	// GetUapiDomesticStockV1RankingDisparityWithResponse request
	GetUapiDomesticStockV1RankingDisparityWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingDisparityParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingDisparityResponse, error)

	// GetUapiDomesticStockV1RankingDividendRateWithResponse request
	GetUapiDomesticStockV1RankingDividendRateWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingDividendRateParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingDividendRateResponse, error)

	// GetUapiDomesticStockV1RankingExpTransUpdownWithResponse request
	GetUapiDomesticStockV1RankingExpTransUpdownWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingExpTransUpdownParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingExpTransUpdownResponse, error)

	// GetUapiDomesticStockV1RankingFinanceRatioWithResponse request
	GetUapiDomesticStockV1RankingFinanceRatioWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingFinanceRatioParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingFinanceRatioResponse, error)

	// GetUapiDomesticStockV1RankingFluctuationWithResponse request
	GetUapiDomesticStockV1RankingFluctuationWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingFluctuationParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingFluctuationResponse, error)

	// GetUapiDomesticStockV1RankingMarketCapWithResponse request
	GetUapiDomesticStockV1RankingMarketCapWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingMarketCapParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingMarketCapResponse, error)

	// GetUapiDomesticStockV1RankingMarketValueWithResponse request
	GetUapiDomesticStockV1RankingMarketValueWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingMarketValueParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingMarketValueResponse, error)

	// GetUapiDomesticStockV1RankingNearNewHighlowWithResponse request
	GetUapiDomesticStockV1RankingNearNewHighlowWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingNearNewHighlowParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingNearNewHighlowResponse, error)

	// GetUapiDomesticStockV1RankingOvertimeExpTransFluctWithResponse request
	GetUapiDomesticStockV1RankingOvertimeExpTransFluctWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingOvertimeExpTransFluctParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingOvertimeExpTransFluctResponse, error)

	// GetUapiDomesticStockV1RankingOvertimeFluctuationWithResponse request
	GetUapiDomesticStockV1RankingOvertimeFluctuationWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingOvertimeFluctuationParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingOvertimeFluctuationResponse, error)

	// GetUapiDomesticStockV1RankingOvertimeVolumeWithResponse request
	GetUapiDomesticStockV1RankingOvertimeVolumeWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingOvertimeVolumeParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingOvertimeVolumeResponse, error)

	// GetUapiDomesticStockV1RankingPreferDisparateRatioWithResponse request
	GetUapiDomesticStockV1RankingPreferDisparateRatioWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingPreferDisparateRatioParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingPreferDisparateRatioResponse, error)

	// GetUapiDomesticStockV1RankingProfitAssetIndexWithResponse request
	GetUapiDomesticStockV1RankingProfitAssetIndexWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingProfitAssetIndexParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingProfitAssetIndexResponse, error)

	// GetUapiDomesticStockV1RankingQuoteBalanceWithResponse request
	GetUapiDomesticStockV1RankingQuoteBalanceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingQuoteBalanceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingQuoteBalanceResponse, error)

	// GetUapiDomesticStockV1RankingShortSaleWithResponse request
	GetUapiDomesticStockV1RankingShortSaleWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingShortSaleParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingShortSaleResponse, error)

	// GetUapiDomesticStockV1RankingTopInterestStockWithResponse request
	GetUapiDomesticStockV1RankingTopInterestStockWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingTopInterestStockParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingTopInterestStockResponse, error)

	// GetUapiDomesticStockV1RankingTradedByCompanyWithResponse request
	GetUapiDomesticStockV1RankingTradedByCompanyWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingTradedByCompanyParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingTradedByCompanyResponse, error)

	// GetUapiDomesticStockV1RankingVolumePowerWithResponse request
	GetUapiDomesticStockV1RankingVolumePowerWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingVolumePowerParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingVolumePowerResponse, error)

	// GetUapiDomesticStockV1TradingInquireAccountBalanceWithResponse request
	GetUapiDomesticStockV1TradingInquireAccountBalanceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1TradingInquireAccountBalanceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1TradingInquireAccountBalanceResponse, error)

	// GetUapiDomesticStockV1TradingInquireBalanceWithResponse request
	GetUapiDomesticStockV1TradingInquireBalanceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1TradingInquireBalanceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1TradingInquireBalanceResponse, error)

	// GetUapiDomesticStockV1TradingInquireBalanceRlzPlWithResponse request
	GetUapiDomesticStockV1TradingInquireBalanceRlzPlWithResponse(ctx context.Context, params *GetUapiDomesticStockV1TradingInquireBalanceRlzPlParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1TradingInquireBalanceRlzPlResponse, error)

	// GetUapiDomesticStockV1TradingInquireCreditPsamountWithResponse request
	GetUapiDomesticStockV1TradingInquireCreditPsamountWithResponse(ctx context.Context, params *GetUapiDomesticStockV1TradingInquireCreditPsamountParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1TradingInquireCreditPsamountResponse, error)

	// GetUapiDomesticStockV1TradingInquireDailyCcldWithResponse request
	GetUapiDomesticStockV1TradingInquireDailyCcldWithResponse(ctx context.Context, params *GetUapiDomesticStockV1TradingInquireDailyCcldParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1TradingInquireDailyCcldResponse, error)

	// GetUapiDomesticStockV1TradingInquirePeriodProfitWithResponse request
	GetUapiDomesticStockV1TradingInquirePeriodProfitWithResponse(ctx context.Context, params *GetUapiDomesticStockV1TradingInquirePeriodProfitParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1TradingInquirePeriodProfitResponse, error)

	// GetUapiDomesticStockV1TradingInquirePeriodTradeProfitWithResponse request
	GetUapiDomesticStockV1TradingInquirePeriodTradeProfitWithResponse(ctx context.Context, params *GetUapiDomesticStockV1TradingInquirePeriodTradeProfitParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1TradingInquirePeriodTradeProfitResponse, error)

	// GetUapiDomesticStockV1TradingInquirePsblOrderWithResponse request
	GetUapiDomesticStockV1TradingInquirePsblOrderWithResponse(ctx context.Context, params *GetUapiDomesticStockV1TradingInquirePsblOrderParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1TradingInquirePsblOrderResponse, error)

	// GetUapiDomesticStockV1TradingInquirePsblRvsecnclWithResponse request
	GetUapiDomesticStockV1TradingInquirePsblRvsecnclWithResponse(ctx context.Context, params *GetUapiDomesticStockV1TradingInquirePsblRvsecnclParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1TradingInquirePsblRvsecnclResponse, error)

	// GetUapiDomesticStockV1TradingInquirePsblSellWithResponse request
	GetUapiDomesticStockV1TradingInquirePsblSellWithResponse(ctx context.Context, params *GetUapiDomesticStockV1TradingInquirePsblSellParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1TradingInquirePsblSellResponse, error)

	// PostUapiDomesticStockV1TradingOrderCashWithBodyWithResponse request with any body
	PostUapiDomesticStockV1TradingOrderCashWithBodyWithResponse(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderCashParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiDomesticStockV1TradingOrderCashResponse, error)

	PostUapiDomesticStockV1TradingOrderCashWithResponse(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderCashParams, body PostUapiDomesticStockV1TradingOrderCashJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiDomesticStockV1TradingOrderCashResponse, error)

	// PostUapiDomesticStockV1TradingOrderCreditWithBodyWithResponse request with any body
	PostUapiDomesticStockV1TradingOrderCreditWithBodyWithResponse(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderCreditParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiDomesticStockV1TradingOrderCreditResponse, error)

	PostUapiDomesticStockV1TradingOrderCreditWithResponse(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderCreditParams, body PostUapiDomesticStockV1TradingOrderCreditJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiDomesticStockV1TradingOrderCreditResponse, error)

	// PostUapiDomesticStockV1TradingOrderResvWithBodyWithResponse request with any body
	PostUapiDomesticStockV1TradingOrderResvWithBodyWithResponse(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderResvParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiDomesticStockV1TradingOrderResvResponse, error)

	PostUapiDomesticStockV1TradingOrderResvWithResponse(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderResvParams, body PostUapiDomesticStockV1TradingOrderResvJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiDomesticStockV1TradingOrderResvResponse, error)

	// GetUapiDomesticStockV1TradingOrderResvCcnlWithResponse request
	GetUapiDomesticStockV1TradingOrderResvCcnlWithResponse(ctx context.Context, params *GetUapiDomesticStockV1TradingOrderResvCcnlParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1TradingOrderResvCcnlResponse, error)

	// PostUapiDomesticStockV1TradingOrderResvRvsecnclWithBodyWithResponse request with any body
	PostUapiDomesticStockV1TradingOrderResvRvsecnclWithBodyWithResponse(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderResvRvsecnclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiDomesticStockV1TradingOrderResvRvsecnclResponse, error)

	PostUapiDomesticStockV1TradingOrderResvRvsecnclWithResponse(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderResvRvsecnclParams, body PostUapiDomesticStockV1TradingOrderResvRvsecnclJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiDomesticStockV1TradingOrderResvRvsecnclResponse, error)

	// PostUapiDomesticStockV1TradingOrderRvsecnclWithBodyWithResponse request with any body
	PostUapiDomesticStockV1TradingOrderRvsecnclWithBodyWithResponse(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderRvsecnclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiDomesticStockV1TradingOrderRvsecnclResponse, error)

	PostUapiDomesticStockV1TradingOrderRvsecnclWithResponse(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderRvsecnclParams, body PostUapiDomesticStockV1TradingOrderRvsecnclJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiDomesticStockV1TradingOrderRvsecnclResponse, error)

	// GetUapiDomesticStockV1TradingPensionInquireBalanceWithResponse request
	GetUapiDomesticStockV1TradingPensionInquireBalanceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1TradingPensionInquireBalanceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1TradingPensionInquireBalanceResponse, error)

	// GetUapiDomesticStockV1TradingPensionInquireDailyCcldWithResponse request
	GetUapiDomesticStockV1TradingPensionInquireDailyCcldWithResponse(ctx context.Context, params *GetUapiDomesticStockV1TradingPensionInquireDailyCcldParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1TradingPensionInquireDailyCcldResponse, error)

	// GetUapiDomesticStockV1TradingPensionInquireDepositWithResponse request
	GetUapiDomesticStockV1TradingPensionInquireDepositWithResponse(ctx context.Context, params *GetUapiDomesticStockV1TradingPensionInquireDepositParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1TradingPensionInquireDepositResponse, error)

	// GetUapiDomesticStockV1TradingPensionInquirePresentBalanceWithResponse request
	GetUapiDomesticStockV1TradingPensionInquirePresentBalanceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1TradingPensionInquirePresentBalanceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1TradingPensionInquirePresentBalanceResponse, error)

	// GetUapiDomesticStockV1TradingPensionInquirePsblOrderWithResponse request
	GetUapiDomesticStockV1TradingPensionInquirePsblOrderWithResponse(ctx context.Context, params *GetUapiDomesticStockV1TradingPensionInquirePsblOrderParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1TradingPensionInquirePsblOrderResponse, error)

	// GetUapiElwV1QuotationsCompareStocksWithResponse request
	GetUapiElwV1QuotationsCompareStocksWithResponse(ctx context.Context, params *GetUapiElwV1QuotationsCompareStocksParams, reqEditors ...RequestEditorFn) (*GetUapiElwV1QuotationsCompareStocksResponse, error)

	// GetUapiElwV1QuotationsCondSearchWithResponse request
	GetUapiElwV1QuotationsCondSearchWithResponse(ctx context.Context, params *GetUapiElwV1QuotationsCondSearchParams, reqEditors ...RequestEditorFn) (*GetUapiElwV1QuotationsCondSearchResponse, error)

	// GetUapiElwV1QuotationsExpirationStocksWithResponse request
	GetUapiElwV1QuotationsExpirationStocksWithResponse(ctx context.Context, params *GetUapiElwV1QuotationsExpirationStocksParams, reqEditors ...RequestEditorFn) (*GetUapiElwV1QuotationsExpirationStocksResponse, error)

	// GetUapiElwV1QuotationsIndicatorTrendCcnlWithResponse request
	GetUapiElwV1QuotationsIndicatorTrendCcnlWithResponse(ctx context.Context, params *GetUapiElwV1QuotationsIndicatorTrendCcnlParams, reqEditors ...RequestEditorFn) (*GetUapiElwV1QuotationsIndicatorTrendCcnlResponse, error)

	// GetUapiElwV1QuotationsIndicatorTrendDailyWithResponse request
	GetUapiElwV1QuotationsIndicatorTrendDailyWithResponse(ctx context.Context, params *GetUapiElwV1QuotationsIndicatorTrendDailyParams, reqEditors ...RequestEditorFn) (*GetUapiElwV1QuotationsIndicatorTrendDailyResponse, error)

	// GetUapiElwV1QuotationsIndicatorTrendMinuteWithResponse request
	GetUapiElwV1QuotationsIndicatorTrendMinuteWithResponse(ctx context.Context, params *GetUapiElwV1QuotationsIndicatorTrendMinuteParams, reqEditors ...RequestEditorFn) (*GetUapiElwV1QuotationsIndicatorTrendMinuteResponse, error)

	// GetUapiElwV1QuotationsLpTradeTrendWithResponse request
	GetUapiElwV1QuotationsLpTradeTrendWithResponse(ctx context.Context, params *GetUapiElwV1QuotationsLpTradeTrendParams, reqEditors ...RequestEditorFn) (*GetUapiElwV1QuotationsLpTradeTrendResponse, error)

	// GetUapiElwV1QuotationsNewlyListedWithResponse request
	GetUapiElwV1QuotationsNewlyListedWithResponse(ctx context.Context, params *GetUapiElwV1QuotationsNewlyListedParams, reqEditors ...RequestEditorFn) (*GetUapiElwV1QuotationsNewlyListedResponse, error)

	// GetUapiElwV1QuotationsSensitivityTrendCcnlWithResponse request
	GetUapiElwV1QuotationsSensitivityTrendCcnlWithResponse(ctx context.Context, params *GetUapiElwV1QuotationsSensitivityTrendCcnlParams, reqEditors ...RequestEditorFn) (*GetUapiElwV1QuotationsSensitivityTrendCcnlResponse, error)

	// GetUapiElwV1QuotationsSensitivityTrendDailyWithResponse request
	GetUapiElwV1QuotationsSensitivityTrendDailyWithResponse(ctx context.Context, params *GetUapiElwV1QuotationsSensitivityTrendDailyParams, reqEditors ...RequestEditorFn) (*GetUapiElwV1QuotationsSensitivityTrendDailyResponse, error)

	// GetUapiElwV1QuotationsUdrlAssetListWithResponse request
	GetUapiElwV1QuotationsUdrlAssetListWithResponse(ctx context.Context, params *GetUapiElwV1QuotationsUdrlAssetListParams, reqEditors ...RequestEditorFn) (*GetUapiElwV1QuotationsUdrlAssetListResponse, error)

	// GetUapiElwV1QuotationsVolatilityTrendCcnlWithResponse request
	GetUapiElwV1QuotationsVolatilityTrendCcnlWithResponse(ctx context.Context, params *GetUapiElwV1QuotationsVolatilityTrendCcnlParams, reqEditors ...RequestEditorFn) (*GetUapiElwV1QuotationsVolatilityTrendCcnlResponse, error)

	// GetUapiElwV1QuotationsVolatilityTrendDailyWithResponse request
	GetUapiElwV1QuotationsVolatilityTrendDailyWithResponse(ctx context.Context, params *GetUapiElwV1QuotationsVolatilityTrendDailyParams, reqEditors ...RequestEditorFn) (*GetUapiElwV1QuotationsVolatilityTrendDailyResponse, error)

	// GetUapiElwV1QuotationsVolatilityTrendMinuteWithResponse request
	GetUapiElwV1QuotationsVolatilityTrendMinuteWithResponse(ctx context.Context, params *GetUapiElwV1QuotationsVolatilityTrendMinuteParams, reqEditors ...RequestEditorFn) (*GetUapiElwV1QuotationsVolatilityTrendMinuteResponse, error)

	// GetUapiElwV1QuotationsVolatilityTrendTickWithResponse request
	GetUapiElwV1QuotationsVolatilityTrendTickWithResponse(ctx context.Context, params *GetUapiElwV1QuotationsVolatilityTrendTickParams, reqEditors ...RequestEditorFn) (*GetUapiElwV1QuotationsVolatilityTrendTickResponse, error)

	// GetUapiElwV1RankingUpdownRateWithResponse request
	GetUapiElwV1RankingUpdownRateWithResponse(ctx context.Context, params *GetUapiElwV1RankingUpdownRateParams, reqEditors ...RequestEditorFn) (*GetUapiElwV1RankingUpdownRateResponse, error)

	// GetUapiEtfetnV1QuotationsInquireComponentStockPriceWithResponse request
	GetUapiEtfetnV1QuotationsInquireComponentStockPriceWithResponse(ctx context.Context, params *GetUapiEtfetnV1QuotationsInquireComponentStockPriceParams, reqEditors ...RequestEditorFn) (*GetUapiEtfetnV1QuotationsInquireComponentStockPriceResponse, error)

	// GetUapiEtfetnV1QuotationsInquirePriceWithResponse request
	GetUapiEtfetnV1QuotationsInquirePriceWithResponse(ctx context.Context, params *GetUapiEtfetnV1QuotationsInquirePriceParams, reqEditors ...RequestEditorFn) (*GetUapiEtfetnV1QuotationsInquirePriceResponse, error)

	// GetUapiEtfetnV1QuotationsNavComparisonDailyTrendWithResponse request
	GetUapiEtfetnV1QuotationsNavComparisonDailyTrendWithResponse(ctx context.Context, params *GetUapiEtfetnV1QuotationsNavComparisonDailyTrendParams, reqEditors ...RequestEditorFn) (*GetUapiEtfetnV1QuotationsNavComparisonDailyTrendResponse, error)

	// GetUapiEtfetnV1QuotationsNavComparisonTimeTrendWithResponse request
	GetUapiEtfetnV1QuotationsNavComparisonTimeTrendWithResponse(ctx context.Context, params *GetUapiEtfetnV1QuotationsNavComparisonTimeTrendParams, reqEditors ...RequestEditorFn) (*GetUapiEtfetnV1QuotationsNavComparisonTimeTrendResponse, error)

	// GetUapiEtfetnV1QuotationsNavComparisonTrendWithResponse request
	GetUapiEtfetnV1QuotationsNavComparisonTrendWithResponse(ctx context.Context, params *GetUapiEtfetnV1QuotationsNavComparisonTrendParams, reqEditors ...RequestEditorFn) (*GetUapiEtfetnV1QuotationsNavComparisonTrendResponse, error)

	// PostUapiHashkeyWithBodyWithResponse request with any body
	PostUapiHashkeyWithBodyWithResponse(ctx context.Context, params *PostUapiHashkeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiHashkeyResponse, error)

	PostUapiHashkeyWithResponse(ctx context.Context, params *PostUapiHashkeyParams, body PostUapiHashkeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiHashkeyResponse, error)

	// GetUapiOverseasFutureoptionV1QuotationsDailyCcnlWithResponse request
	GetUapiOverseasFutureoptionV1QuotationsDailyCcnlWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsDailyCcnlParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1QuotationsDailyCcnlResponse, error)

	// GetUapiOverseasFutureoptionV1QuotationsInquireAskingPriceWithResponse request
	GetUapiOverseasFutureoptionV1QuotationsInquireAskingPriceWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsInquireAskingPriceParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1QuotationsInquireAskingPriceResponse, error)

	// GetUapiOverseasFutureoptionV1QuotationsInquirePriceWithResponse request
	GetUapiOverseasFutureoptionV1QuotationsInquirePriceWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsInquirePriceParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1QuotationsInquirePriceResponse, error)

	// GetUapiOverseasFutureoptionV1QuotationsInquireTimeFuturechartpriceWithResponse request
	GetUapiOverseasFutureoptionV1QuotationsInquireTimeFuturechartpriceWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsInquireTimeFuturechartpriceParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1QuotationsInquireTimeFuturechartpriceResponse, error)

	// GetUapiOverseasFutureoptionV1QuotationsInvestorUnpdTrendWithResponse request
	GetUapiOverseasFutureoptionV1QuotationsInvestorUnpdTrendWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsInvestorUnpdTrendParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1QuotationsInvestorUnpdTrendResponse, error)

	// GetUapiOverseasFutureoptionV1QuotationsMarketTimeWithResponse request
	GetUapiOverseasFutureoptionV1QuotationsMarketTimeWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsMarketTimeParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1QuotationsMarketTimeResponse, error)

	// GetUapiOverseasFutureoptionV1QuotationsMonthlyCcnlWithResponse request
	GetUapiOverseasFutureoptionV1QuotationsMonthlyCcnlWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsMonthlyCcnlParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1QuotationsMonthlyCcnlResponse, error)

	// GetUapiOverseasFutureoptionV1QuotationsOptAskingPriceWithResponse request
	GetUapiOverseasFutureoptionV1QuotationsOptAskingPriceWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsOptAskingPriceParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1QuotationsOptAskingPriceResponse, error)

	// GetUapiOverseasFutureoptionV1QuotationsSearchContractDetailWithResponse request
	GetUapiOverseasFutureoptionV1QuotationsSearchContractDetailWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsSearchContractDetailParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1QuotationsSearchContractDetailResponse, error)

	// GetUapiOverseasFutureoptionV1QuotationsStockDetailWithResponse request
	GetUapiOverseasFutureoptionV1QuotationsStockDetailWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsStockDetailParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1QuotationsStockDetailResponse, error)

	// GetUapiOverseasFutureoptionV1QuotationsTickCcnlWithResponse request
	GetUapiOverseasFutureoptionV1QuotationsTickCcnlWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsTickCcnlParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1QuotationsTickCcnlResponse, error)

	// GetUapiOverseasFutureoptionV1QuotationsWeeklyCcnlWithResponse request
	GetUapiOverseasFutureoptionV1QuotationsWeeklyCcnlWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsWeeklyCcnlParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1QuotationsWeeklyCcnlResponse, error)

	// GetUapiOverseasFutureoptionV1TradingInquireCcldWithResponse request
	GetUapiOverseasFutureoptionV1TradingInquireCcldWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingInquireCcldParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1TradingInquireCcldResponse, error)

	// GetUapiOverseasFutureoptionV1TradingInquireDailyCcldWithResponse request
	GetUapiOverseasFutureoptionV1TradingInquireDailyCcldWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingInquireDailyCcldParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1TradingInquireDailyCcldResponse, error)

	// GetUapiOverseasFutureoptionV1TradingInquireDailyOrderWithResponse request
	GetUapiOverseasFutureoptionV1TradingInquireDailyOrderWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingInquireDailyOrderParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1TradingInquireDailyOrderResponse, error)

	// GetUapiOverseasFutureoptionV1TradingInquireDepositWithResponse request
	GetUapiOverseasFutureoptionV1TradingInquireDepositWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingInquireDepositParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1TradingInquireDepositResponse, error)

	// GetUapiOverseasFutureoptionV1TradingInquirePeriodCcldWithResponse request
	GetUapiOverseasFutureoptionV1TradingInquirePeriodCcldWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingInquirePeriodCcldParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1TradingInquirePeriodCcldResponse, error)

	// GetUapiOverseasFutureoptionV1TradingInquirePeriodTransWithResponse request
	GetUapiOverseasFutureoptionV1TradingInquirePeriodTransWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingInquirePeriodTransParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1TradingInquirePeriodTransResponse, error)

	// GetUapiOverseasFutureoptionV1TradingInquirePsamountWithResponse request
	GetUapiOverseasFutureoptionV1TradingInquirePsamountWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingInquirePsamountParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1TradingInquirePsamountResponse, error)

	// GetUapiOverseasFutureoptionV1TradingInquireUnpdWithResponse request
	GetUapiOverseasFutureoptionV1TradingInquireUnpdWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingInquireUnpdParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1TradingInquireUnpdResponse, error)

	// GetUapiOverseasFutureoptionV1TradingMarginDetailWithResponse request
	GetUapiOverseasFutureoptionV1TradingMarginDetailWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingMarginDetailParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1TradingMarginDetailResponse, error)

	// PostUapiOverseasFutureoptionV1TradingOrderWithBodyWithResponse request with any body
	PostUapiOverseasFutureoptionV1TradingOrderWithBodyWithResponse(ctx context.Context, params *PostUapiOverseasFutureoptionV1TradingOrderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiOverseasFutureoptionV1TradingOrderResponse, error)

	PostUapiOverseasFutureoptionV1TradingOrderWithResponse(ctx context.Context, params *PostUapiOverseasFutureoptionV1TradingOrderParams, body PostUapiOverseasFutureoptionV1TradingOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiOverseasFutureoptionV1TradingOrderResponse, error)

	// PostUapiOverseasFutureoptionV1TradingOrderRvsecnclWithBodyWithResponse request with any body
	PostUapiOverseasFutureoptionV1TradingOrderRvsecnclWithBodyWithResponse(ctx context.Context, params *PostUapiOverseasFutureoptionV1TradingOrderRvsecnclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiOverseasFutureoptionV1TradingOrderRvsecnclResponse, error)

	PostUapiOverseasFutureoptionV1TradingOrderRvsecnclWithResponse(ctx context.Context, params *PostUapiOverseasFutureoptionV1TradingOrderRvsecnclParams, body PostUapiOverseasFutureoptionV1TradingOrderRvsecnclJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiOverseasFutureoptionV1TradingOrderRvsecnclResponse, error)

	// GetUapiOverseasPriceV1QuotationsBrknewsTitleWithResponse request
	GetUapiOverseasPriceV1QuotationsBrknewsTitleWithResponse(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsBrknewsTitleParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasPriceV1QuotationsBrknewsTitleResponse, error)

	// GetUapiOverseasPriceV1QuotationsColableByCompanyWithResponse request
	GetUapiOverseasPriceV1QuotationsColableByCompanyWithResponse(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsColableByCompanyParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasPriceV1QuotationsColableByCompanyResponse, error)

	// GetUapiOverseasPriceV1QuotationsDailypriceWithResponse request
	GetUapiOverseasPriceV1QuotationsDailypriceWithResponse(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsDailypriceParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasPriceV1QuotationsDailypriceResponse, error)

	// GetUapiOverseasPriceV1QuotationsInquireAskingPriceWithResponse request
	GetUapiOverseasPriceV1QuotationsInquireAskingPriceWithResponse(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsInquireAskingPriceParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasPriceV1QuotationsInquireAskingPriceResponse, error)

	// GetUapiOverseasPriceV1QuotationsInquireDailyChartpriceWithResponse request
	GetUapiOverseasPriceV1QuotationsInquireDailyChartpriceWithResponse(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsInquireDailyChartpriceParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasPriceV1QuotationsInquireDailyChartpriceResponse, error)

	// GetUapiOverseasPriceV1QuotationsInquireSearchWithResponse request
	GetUapiOverseasPriceV1QuotationsInquireSearchWithResponse(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsInquireSearchParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasPriceV1QuotationsInquireSearchResponse, error)

	// GetUapiOverseasPriceV1QuotationsInquireTimeIndexchartpriceWithResponse request
	GetUapiOverseasPriceV1QuotationsInquireTimeIndexchartpriceWithResponse(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsInquireTimeIndexchartpriceParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasPriceV1QuotationsInquireTimeIndexchartpriceResponse, error)

	// GetUapiOverseasPriceV1QuotationsInquireTimeItemchartpriceWithResponse request
	GetUapiOverseasPriceV1QuotationsInquireTimeItemchartpriceWithResponse(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsInquireTimeItemchartpriceParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasPriceV1QuotationsInquireTimeItemchartpriceResponse, error)

	// GetUapiOverseasPriceV1QuotationsNewsTitleWithResponse request
	GetUapiOverseasPriceV1QuotationsNewsTitleWithResponse(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsNewsTitleParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasPriceV1QuotationsNewsTitleResponse, error)

	// GetUapiOverseasPriceV1QuotationsPeriodRightsWithResponse request
	GetUapiOverseasPriceV1QuotationsPeriodRightsWithResponse(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsPeriodRightsParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasPriceV1QuotationsPeriodRightsResponse, error)

	// GetUapiOverseasPriceV1QuotationsPriceWithResponse request
	GetUapiOverseasPriceV1QuotationsPriceWithResponse(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsPriceParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasPriceV1QuotationsPriceResponse, error)

	// GetUapiOverseasPriceV1QuotationsPriceDetailWithResponse request
	GetUapiOverseasPriceV1QuotationsPriceDetailWithResponse(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsPriceDetailParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasPriceV1QuotationsPriceDetailResponse, error)

	// GetUapiOverseasPriceV1QuotationsRightsByIceWithResponse request
	GetUapiOverseasPriceV1QuotationsRightsByIceWithResponse(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsRightsByIceParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasPriceV1QuotationsRightsByIceResponse, error)

	// GetUapiOverseasPriceV1QuotationsSearchInfoWithResponse request
	GetUapiOverseasPriceV1QuotationsSearchInfoWithResponse(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsSearchInfoParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasPriceV1QuotationsSearchInfoResponse, error)

	// GetUapiOverseasStockV1QuotationsCountriesHolidayWithResponse request
	GetUapiOverseasStockV1QuotationsCountriesHolidayWithResponse(ctx context.Context, params *GetUapiOverseasStockV1QuotationsCountriesHolidayParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasStockV1QuotationsCountriesHolidayResponse, error)

	// PostUapiOverseasStockV1TradingDaytimeOrderWithBodyWithResponse request with any body
	PostUapiOverseasStockV1TradingDaytimeOrderWithBodyWithResponse(ctx context.Context, params *PostUapiOverseasStockV1TradingDaytimeOrderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiOverseasStockV1TradingDaytimeOrderResponse, error)

	PostUapiOverseasStockV1TradingDaytimeOrderWithResponse(ctx context.Context, params *PostUapiOverseasStockV1TradingDaytimeOrderParams, body PostUapiOverseasStockV1TradingDaytimeOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiOverseasStockV1TradingDaytimeOrderResponse, error)

	// PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclWithBodyWithResponse request with any body
	PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclWithBodyWithResponse(ctx context.Context, params *PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclResponse, error)

	PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclWithResponse(ctx context.Context, params *PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclParams, body PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclResponse, error)

	// GetUapiOverseasStockV1TradingForeignMarginWithResponse request
	GetUapiOverseasStockV1TradingForeignMarginWithResponse(ctx context.Context, params *GetUapiOverseasStockV1TradingForeignMarginParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasStockV1TradingForeignMarginResponse, error)

	// GetUapiOverseasStockV1TradingInquireBalanceWithResponse request
	GetUapiOverseasStockV1TradingInquireBalanceWithResponse(ctx context.Context, params *GetUapiOverseasStockV1TradingInquireBalanceParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasStockV1TradingInquireBalanceResponse, error)

	// GetUapiOverseasStockV1TradingInquireCcnlWithResponse request
	GetUapiOverseasStockV1TradingInquireCcnlWithResponse(ctx context.Context, params *GetUapiOverseasStockV1TradingInquireCcnlParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasStockV1TradingInquireCcnlResponse, error)

	// GetUapiOverseasStockV1TradingInquireNccsWithResponse request
	GetUapiOverseasStockV1TradingInquireNccsWithResponse(ctx context.Context, params *GetUapiOverseasStockV1TradingInquireNccsParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasStockV1TradingInquireNccsResponse, error)

	// GetUapiOverseasStockV1TradingInquirePaymtStdrBalanceWithResponse request
	GetUapiOverseasStockV1TradingInquirePaymtStdrBalanceWithResponse(ctx context.Context, params *GetUapiOverseasStockV1TradingInquirePaymtStdrBalanceParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasStockV1TradingInquirePaymtStdrBalanceResponse, error)

	// GetUapiOverseasStockV1TradingInquirePeriodProfitWithResponse request
	GetUapiOverseasStockV1TradingInquirePeriodProfitWithResponse(ctx context.Context, params *GetUapiOverseasStockV1TradingInquirePeriodProfitParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasStockV1TradingInquirePeriodProfitResponse, error)

	// GetUapiOverseasStockV1TradingInquirePeriodTransWithResponse request
	GetUapiOverseasStockV1TradingInquirePeriodTransWithResponse(ctx context.Context, params *GetUapiOverseasStockV1TradingInquirePeriodTransParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasStockV1TradingInquirePeriodTransResponse, error)

	// GetUapiOverseasStockV1TradingInquirePresentBalanceWithResponse request
	GetUapiOverseasStockV1TradingInquirePresentBalanceWithResponse(ctx context.Context, params *GetUapiOverseasStockV1TradingInquirePresentBalanceParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasStockV1TradingInquirePresentBalanceResponse, error)

	// GetUapiOverseasStockV1TradingInquirePsamountWithResponse request
	GetUapiOverseasStockV1TradingInquirePsamountWithResponse(ctx context.Context, params *GetUapiOverseasStockV1TradingInquirePsamountParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasStockV1TradingInquirePsamountResponse, error)

	// PostUapiOverseasStockV1TradingOrderWithBodyWithResponse request with any body
	PostUapiOverseasStockV1TradingOrderWithBodyWithResponse(ctx context.Context, params *PostUapiOverseasStockV1TradingOrderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiOverseasStockV1TradingOrderResponse, error)

	PostUapiOverseasStockV1TradingOrderWithResponse(ctx context.Context, params *PostUapiOverseasStockV1TradingOrderParams, body PostUapiOverseasStockV1TradingOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiOverseasStockV1TradingOrderResponse, error)

	// PostUapiOverseasStockV1TradingOrderResvWithBodyWithResponse request with any body
	PostUapiOverseasStockV1TradingOrderResvWithBodyWithResponse(ctx context.Context, params *PostUapiOverseasStockV1TradingOrderResvParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiOverseasStockV1TradingOrderResvResponse, error)

	PostUapiOverseasStockV1TradingOrderResvWithResponse(ctx context.Context, params *PostUapiOverseasStockV1TradingOrderResvParams, body PostUapiOverseasStockV1TradingOrderResvJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiOverseasStockV1TradingOrderResvResponse, error)

	// PostUapiOverseasStockV1TradingOrderResvCcnlWithBodyWithResponse request with any body
	PostUapiOverseasStockV1TradingOrderResvCcnlWithBodyWithResponse(ctx context.Context, params *PostUapiOverseasStockV1TradingOrderResvCcnlParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiOverseasStockV1TradingOrderResvCcnlResponse, error)

	PostUapiOverseasStockV1TradingOrderResvCcnlWithResponse(ctx context.Context, params *PostUapiOverseasStockV1TradingOrderResvCcnlParams, body PostUapiOverseasStockV1TradingOrderResvCcnlJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiOverseasStockV1TradingOrderResvCcnlResponse, error)

	// GetUapiOverseasStockV1TradingOrderResvListWithResponse request
	GetUapiOverseasStockV1TradingOrderResvListWithResponse(ctx context.Context, params *GetUapiOverseasStockV1TradingOrderResvListParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasStockV1TradingOrderResvListResponse, error)

	// PostUapiOverseasStockV1TradingOrderRvsecnclWithBodyWithResponse request with any body
	PostUapiOverseasStockV1TradingOrderRvsecnclWithBodyWithResponse(ctx context.Context, params *PostUapiOverseasStockV1TradingOrderRvsecnclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiOverseasStockV1TradingOrderRvsecnclResponse, error)

	PostUapiOverseasStockV1TradingOrderRvsecnclWithResponse(ctx context.Context, params *PostUapiOverseasStockV1TradingOrderRvsecnclParams, body PostUapiOverseasStockV1TradingOrderRvsecnclJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiOverseasStockV1TradingOrderRvsecnclResponse, error)
}

type PostOauth2ApprovalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOauth2ApprovalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOauth2ApprovalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOauth2RevokePResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOauth2RevokePResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOauth2RevokePResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOauth2TokenPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOauth2TokenPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOauth2TokenPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticBondV1QuotationsAvgUnitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticBondV1QuotationsAvgUnitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticBondV1QuotationsAvgUnitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticBondV1QuotationsInquireAskingPriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticBondV1QuotationsInquireAskingPriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticBondV1QuotationsInquireAskingPriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticBondV1QuotationsInquireCcnlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticBondV1QuotationsInquireCcnlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticBondV1QuotationsInquireCcnlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticBondV1QuotationsInquireDailyItemchartpriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticBondV1QuotationsInquireDailyItemchartpriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticBondV1QuotationsInquireDailyItemchartpriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticBondV1QuotationsInquirePriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticBondV1QuotationsInquirePriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticBondV1QuotationsInquirePriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticBondV1QuotationsIssueInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticBondV1QuotationsIssueInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticBondV1QuotationsIssueInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticBondV1QuotationsSearchBondInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticBondV1QuotationsSearchBondInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticBondV1QuotationsSearchBondInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUapiDomesticBondV1TradingBuyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUapiDomesticBondV1TradingBuyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUapiDomesticBondV1TradingBuyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticBondV1TradingInquireBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticBondV1TradingInquireBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticBondV1TradingInquireBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticBondV1TradingInquireDailyCcldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticBondV1TradingInquireDailyCcldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticBondV1TradingInquireDailyCcldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticBondV1TradingInquirePsblOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticBondV1TradingInquirePsblOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticBondV1TradingInquirePsblOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticBondV1TradingInquirePsblRvsecnclResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticBondV1TradingInquirePsblRvsecnclResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticBondV1TradingInquirePsblRvsecnclResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUapiDomesticBondV1TradingOrderRvsecnclResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUapiDomesticBondV1TradingOrderRvsecnclResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUapiDomesticBondV1TradingOrderRvsecnclResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUapiDomesticBondV1TradingSellResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUapiDomesticBondV1TradingSellResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUapiDomesticBondV1TradingSellResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticFutureoptionV1QuotationsDisplayBoardCallputResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticFutureoptionV1QuotationsDisplayBoardCallputResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticFutureoptionV1QuotationsDisplayBoardCallputResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticFutureoptionV1QuotationsDisplayBoardFuturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticFutureoptionV1QuotationsDisplayBoardFuturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticFutureoptionV1QuotationsDisplayBoardFuturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticFutureoptionV1QuotationsDisplayBoardOptionListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticFutureoptionV1QuotationsDisplayBoardOptionListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticFutureoptionV1QuotationsDisplayBoardOptionListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticFutureoptionV1QuotationsDisplayBoardTopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticFutureoptionV1QuotationsDisplayBoardTopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticFutureoptionV1QuotationsDisplayBoardTopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticFutureoptionV1QuotationsExpPriceTrendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticFutureoptionV1QuotationsExpPriceTrendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticFutureoptionV1QuotationsExpPriceTrendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticFutureoptionV1QuotationsInquireAskingPriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticFutureoptionV1QuotationsInquireAskingPriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticFutureoptionV1QuotationsInquireAskingPriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticFutureoptionV1QuotationsInquireDailyFuopchartpriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticFutureoptionV1QuotationsInquireDailyFuopchartpriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticFutureoptionV1QuotationsInquireDailyFuopchartpriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticFutureoptionV1QuotationsInquirePriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticFutureoptionV1QuotationsInquirePriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticFutureoptionV1QuotationsInquirePriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticFutureoptionV1QuotationsInquireTimeFuopchartpriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticFutureoptionV1QuotationsInquireTimeFuopchartpriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticFutureoptionV1QuotationsInquireTimeFuopchartpriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticFutureoptionV1TradingInquireBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticFutureoptionV1TradingInquireBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticFutureoptionV1TradingInquireBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticFutureoptionV1TradingInquireBalanceSettlementPlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticFutureoptionV1TradingInquireBalanceSettlementPlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticFutureoptionV1TradingInquireBalanceSettlementPlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticFutureoptionV1TradingInquireBalanceValuationPlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticFutureoptionV1TradingInquireBalanceValuationPlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticFutureoptionV1TradingInquireBalanceValuationPlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticFutureoptionV1TradingInquireCcnlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticFutureoptionV1TradingInquireCcnlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticFutureoptionV1TradingInquireCcnlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticFutureoptionV1TradingInquireCcnlBstimeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticFutureoptionV1TradingInquireCcnlBstimeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticFutureoptionV1TradingInquireCcnlBstimeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticFutureoptionV1TradingInquireDailyAmountFeeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticFutureoptionV1TradingInquireDailyAmountFeeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticFutureoptionV1TradingInquireDailyAmountFeeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticFutureoptionV1TradingInquireDepositResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticFutureoptionV1TradingInquireDepositResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticFutureoptionV1TradingInquireDepositResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticFutureoptionV1TradingInquireNgtBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticFutureoptionV1TradingInquireNgtBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticFutureoptionV1TradingInquireNgtBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticFutureoptionV1TradingInquireNgtCcnlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticFutureoptionV1TradingInquireNgtCcnlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticFutureoptionV1TradingInquireNgtCcnlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticFutureoptionV1TradingInquirePsblNgtOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticFutureoptionV1TradingInquirePsblNgtOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticFutureoptionV1TradingInquirePsblNgtOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticFutureoptionV1TradingInquirePsblOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticFutureoptionV1TradingInquirePsblOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticFutureoptionV1TradingInquirePsblOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticFutureoptionV1TradingNgtMarginDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticFutureoptionV1TradingNgtMarginDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticFutureoptionV1TradingNgtMarginDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUapiDomesticFutureoptionV1TradingOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUapiDomesticFutureoptionV1TradingOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUapiDomesticFutureoptionV1TradingOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUapiDomesticFutureoptionV1TradingOrderRvsecnclResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUapiDomesticFutureoptionV1TradingOrderRvsecnclResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUapiDomesticFutureoptionV1TradingOrderRvsecnclResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1FinanceBalanceSheetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1FinanceBalanceSheetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1FinanceBalanceSheetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1FinanceFinancialRatioResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1FinanceFinancialRatioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1FinanceFinancialRatioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1FinanceGrowthRatioResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1FinanceGrowthRatioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1FinanceGrowthRatioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1FinanceIncomeStatementResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1FinanceIncomeStatementResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1FinanceIncomeStatementResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1FinanceOtherMajorRatiosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1FinanceOtherMajorRatiosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1FinanceOtherMajorRatiosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1FinanceProfitRatioResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1FinanceProfitRatioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1FinanceProfitRatioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1FinanceStabilityRatioResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1FinanceStabilityRatioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1FinanceStabilityRatioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1KsdinfoBonusIssueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1KsdinfoBonusIssueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1KsdinfoBonusIssueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1KsdinfoCapDcrsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1KsdinfoCapDcrsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1KsdinfoCapDcrsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1KsdinfoDividendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1KsdinfoDividendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1KsdinfoDividendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1KsdinfoListInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1KsdinfoListInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1KsdinfoListInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1KsdinfoMergerSplitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1KsdinfoMergerSplitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1KsdinfoMergerSplitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1KsdinfoPaidinCapinResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1KsdinfoPaidinCapinResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1KsdinfoPaidinCapinResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1KsdinfoPurreqResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1KsdinfoPurreqResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1KsdinfoPurreqResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1KsdinfoRevSplitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1KsdinfoRevSplitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1KsdinfoRevSplitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1KsdinfoSharehldMeetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1KsdinfoSharehldMeetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1KsdinfoSharehldMeetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsCaptureUplowpriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsCaptureUplowpriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsCaptureUplowpriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsChkHolidayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsChkHolidayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsChkHolidayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsCompInterestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsCompInterestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsCompInterestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsCompProgramTradeDailyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsCompProgramTradeDailyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsCompProgramTradeDailyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsCompProgramTradeTodayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsCompProgramTradeTodayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsCompProgramTradeTodayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsCreditByCompanyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsCreditByCompanyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsCreditByCompanyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsDailyCreditBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsDailyCreditBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsDailyCreditBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsDailyShortSaleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsDailyShortSaleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsDailyShortSaleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsEstimatePerformResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsEstimatePerformResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsEstimatePerformResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsExpClosingPriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsExpClosingPriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsExpClosingPriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsExpIndexTrendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsExpIndexTrendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsExpIndexTrendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsExpPriceTrendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsExpPriceTrendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsExpPriceTrendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsForeignInstitutionTotalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsForeignInstitutionTotalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsForeignInstitutionTotalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsFrgnmemPchsTrendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsFrgnmemPchsTrendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsFrgnmemPchsTrendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsFrgnmemTradeEstimateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsFrgnmemTradeEstimateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsFrgnmemTradeEstimateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsFrgnmemTradeTrendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsFrgnmemTradeTrendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsFrgnmemTradeTrendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsInquireAskingPriceExpCcnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsInquireAskingPriceExpCcnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsInquireAskingPriceExpCcnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsInquireCcnlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsInquireCcnlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsInquireCcnlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsInquireDailyIndexchartpriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsInquireDailyIndexchartpriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsInquireDailyIndexchartpriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsInquireDailyItemchartpriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsInquireDailyItemchartpriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsInquireDailyItemchartpriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsInquireDailyOvertimepriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsInquireDailyOvertimepriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsInquireDailyOvertimepriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsInquireDailyPriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsInquireDailyPriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsInquireDailyPriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsInquireDailyTradeVolumeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsInquireDailyTradeVolumeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsInquireDailyTradeVolumeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsInquireElwPriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsInquireElwPriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsInquireElwPriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsInquireIndexTickpriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsInquireIndexTickpriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsInquireIndexTickpriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsInquireIndexTimepriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsInquireIndexTimepriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsInquireIndexTimepriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsInquireInvestorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsInquireInvestorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsInquireInvestorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsInquireInvestorDailyByMarketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsInquireInvestorDailyByMarketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsInquireInvestorDailyByMarketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsInquireInvestorTimeByMarketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsInquireInvestorTimeByMarketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsInquireInvestorTimeByMarketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsInquireMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsInquireMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsInquireMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsInquireMemberDailyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsInquireMemberDailyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsInquireMemberDailyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsInquireOvertimeAskingPriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsInquireOvertimeAskingPriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsInquireOvertimeAskingPriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsInquireOvertimePriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsInquireOvertimePriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsInquireOvertimePriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsInquirePriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsInquirePriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsInquirePriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsInquirePrice2Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsInquirePrice2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsInquirePrice2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsInquireTimeIndexchartpriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsInquireTimeIndexchartpriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsInquireTimeIndexchartpriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsInquireTimeItemchartpriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsInquireTimeItemchartpriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsInquireTimeItemchartpriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsInquireTimeItemconclusionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsInquireTimeItemconclusionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsInquireTimeItemconclusionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsInquireTimeOvertimeconclusionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsInquireTimeOvertimeconclusionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsInquireTimeOvertimeconclusionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsInquireViStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsInquireViStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsInquireViStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsIntstockGrouplistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsIntstockGrouplistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsIntstockGrouplistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsIntstockMultpriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsIntstockMultpriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsIntstockMultpriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsIntstockStocklistByGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsIntstockStocklistByGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsIntstockStocklistByGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsInvestOpbysecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsInvestOpbysecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsInvestOpbysecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsInvestOpinionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsInvestOpinionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsInvestOpinionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsInvestorProgramTradeTodayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsInvestorProgramTradeTodayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsInvestorProgramTradeTodayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsInvestorTrendEstimateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsInvestorTrendEstimateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsInvestorTrendEstimateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsLendableByCompanyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsLendableByCompanyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsLendableByCompanyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsMktfundsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsMktfundsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsMktfundsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsNewsTitleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsNewsTitleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsNewsTitleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsPbarTratioResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsPbarTratioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsPbarTratioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsProgramTradeByStockResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsProgramTradeByStockResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsProgramTradeByStockResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsProgramTradeByStockDailyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsProgramTradeByStockDailyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsProgramTradeByStockDailyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsPsearchResultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsPsearchResultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsPsearchResultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsPsearchTitleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsPsearchTitleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsPsearchTitleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsSearchInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsSearchInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsSearchInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsSearchStockInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsSearchStockInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsSearchStockInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsTradprtByamtResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsTradprtByamtResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsTradprtByamtResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1QuotationsVolumeRankResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1QuotationsVolumeRankResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1QuotationsVolumeRankResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1RankingAfterHourBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1RankingAfterHourBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1RankingAfterHourBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1RankingBulkTransNumResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1RankingBulkTransNumResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1RankingBulkTransNumResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1RankingCreditBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1RankingCreditBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1RankingCreditBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1RankingDisparityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1RankingDisparityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1RankingDisparityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1RankingDividendRateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1RankingDividendRateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1RankingDividendRateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1RankingExpTransUpdownResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1RankingExpTransUpdownResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1RankingExpTransUpdownResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1RankingFinanceRatioResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1RankingFinanceRatioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1RankingFinanceRatioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1RankingFluctuationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1RankingFluctuationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1RankingFluctuationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1RankingMarketCapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1RankingMarketCapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1RankingMarketCapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1RankingMarketValueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1RankingMarketValueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1RankingMarketValueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1RankingNearNewHighlowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1RankingNearNewHighlowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1RankingNearNewHighlowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1RankingOvertimeExpTransFluctResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1RankingOvertimeExpTransFluctResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1RankingOvertimeExpTransFluctResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1RankingOvertimeFluctuationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1RankingOvertimeFluctuationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1RankingOvertimeFluctuationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1RankingOvertimeVolumeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1RankingOvertimeVolumeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1RankingOvertimeVolumeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1RankingPreferDisparateRatioResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1RankingPreferDisparateRatioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1RankingPreferDisparateRatioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1RankingProfitAssetIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1RankingProfitAssetIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1RankingProfitAssetIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1RankingQuoteBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1RankingQuoteBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1RankingQuoteBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1RankingShortSaleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1RankingShortSaleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1RankingShortSaleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1RankingTopInterestStockResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1RankingTopInterestStockResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1RankingTopInterestStockResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1RankingTradedByCompanyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1RankingTradedByCompanyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1RankingTradedByCompanyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1RankingVolumePowerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1RankingVolumePowerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1RankingVolumePowerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1TradingInquireAccountBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1TradingInquireAccountBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1TradingInquireAccountBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1TradingInquireBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1TradingInquireBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1TradingInquireBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1TradingInquireBalanceRlzPlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1TradingInquireBalanceRlzPlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1TradingInquireBalanceRlzPlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1TradingInquireCreditPsamountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1TradingInquireCreditPsamountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1TradingInquireCreditPsamountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1TradingInquireDailyCcldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1TradingInquireDailyCcldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1TradingInquireDailyCcldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1TradingInquirePeriodProfitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1TradingInquirePeriodProfitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1TradingInquirePeriodProfitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1TradingInquirePeriodTradeProfitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1TradingInquirePeriodTradeProfitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1TradingInquirePeriodTradeProfitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1TradingInquirePsblOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1TradingInquirePsblOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1TradingInquirePsblOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1TradingInquirePsblRvsecnclResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1TradingInquirePsblRvsecnclResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1TradingInquirePsblRvsecnclResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1TradingInquirePsblSellResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1TradingInquirePsblSellResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1TradingInquirePsblSellResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUapiDomesticStockV1TradingOrderCashResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUapiDomesticStockV1TradingOrderCashResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUapiDomesticStockV1TradingOrderCashResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUapiDomesticStockV1TradingOrderCreditResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUapiDomesticStockV1TradingOrderCreditResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUapiDomesticStockV1TradingOrderCreditResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUapiDomesticStockV1TradingOrderResvResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUapiDomesticStockV1TradingOrderResvResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUapiDomesticStockV1TradingOrderResvResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1TradingOrderResvCcnlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1TradingOrderResvCcnlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1TradingOrderResvCcnlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUapiDomesticStockV1TradingOrderResvRvsecnclResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUapiDomesticStockV1TradingOrderResvRvsecnclResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUapiDomesticStockV1TradingOrderResvRvsecnclResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUapiDomesticStockV1TradingOrderRvsecnclResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUapiDomesticStockV1TradingOrderRvsecnclResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUapiDomesticStockV1TradingOrderRvsecnclResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1TradingPensionInquireBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1TradingPensionInquireBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1TradingPensionInquireBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1TradingPensionInquireDailyCcldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1TradingPensionInquireDailyCcldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1TradingPensionInquireDailyCcldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1TradingPensionInquireDepositResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1TradingPensionInquireDepositResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1TradingPensionInquireDepositResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1TradingPensionInquirePresentBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1TradingPensionInquirePresentBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1TradingPensionInquirePresentBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiDomesticStockV1TradingPensionInquirePsblOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiDomesticStockV1TradingPensionInquirePsblOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiDomesticStockV1TradingPensionInquirePsblOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiElwV1QuotationsCompareStocksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiElwV1QuotationsCompareStocksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiElwV1QuotationsCompareStocksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiElwV1QuotationsCondSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiElwV1QuotationsCondSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiElwV1QuotationsCondSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiElwV1QuotationsExpirationStocksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiElwV1QuotationsExpirationStocksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiElwV1QuotationsExpirationStocksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiElwV1QuotationsIndicatorTrendCcnlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiElwV1QuotationsIndicatorTrendCcnlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiElwV1QuotationsIndicatorTrendCcnlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiElwV1QuotationsIndicatorTrendDailyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiElwV1QuotationsIndicatorTrendDailyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiElwV1QuotationsIndicatorTrendDailyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiElwV1QuotationsIndicatorTrendMinuteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiElwV1QuotationsIndicatorTrendMinuteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiElwV1QuotationsIndicatorTrendMinuteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiElwV1QuotationsLpTradeTrendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiElwV1QuotationsLpTradeTrendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiElwV1QuotationsLpTradeTrendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiElwV1QuotationsNewlyListedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiElwV1QuotationsNewlyListedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiElwV1QuotationsNewlyListedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiElwV1QuotationsSensitivityTrendCcnlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiElwV1QuotationsSensitivityTrendCcnlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiElwV1QuotationsSensitivityTrendCcnlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiElwV1QuotationsSensitivityTrendDailyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiElwV1QuotationsSensitivityTrendDailyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiElwV1QuotationsSensitivityTrendDailyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiElwV1QuotationsUdrlAssetListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiElwV1QuotationsUdrlAssetListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiElwV1QuotationsUdrlAssetListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiElwV1QuotationsVolatilityTrendCcnlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiElwV1QuotationsVolatilityTrendCcnlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiElwV1QuotationsVolatilityTrendCcnlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiElwV1QuotationsVolatilityTrendDailyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiElwV1QuotationsVolatilityTrendDailyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiElwV1QuotationsVolatilityTrendDailyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiElwV1QuotationsVolatilityTrendMinuteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiElwV1QuotationsVolatilityTrendMinuteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiElwV1QuotationsVolatilityTrendMinuteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiElwV1QuotationsVolatilityTrendTickResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiElwV1QuotationsVolatilityTrendTickResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiElwV1QuotationsVolatilityTrendTickResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiElwV1RankingUpdownRateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiElwV1RankingUpdownRateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiElwV1RankingUpdownRateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiEtfetnV1QuotationsInquireComponentStockPriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiEtfetnV1QuotationsInquireComponentStockPriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiEtfetnV1QuotationsInquireComponentStockPriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiEtfetnV1QuotationsInquirePriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiEtfetnV1QuotationsInquirePriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiEtfetnV1QuotationsInquirePriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiEtfetnV1QuotationsNavComparisonDailyTrendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiEtfetnV1QuotationsNavComparisonDailyTrendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiEtfetnV1QuotationsNavComparisonDailyTrendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiEtfetnV1QuotationsNavComparisonTimeTrendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiEtfetnV1QuotationsNavComparisonTimeTrendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiEtfetnV1QuotationsNavComparisonTimeTrendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiEtfetnV1QuotationsNavComparisonTrendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiEtfetnV1QuotationsNavComparisonTrendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiEtfetnV1QuotationsNavComparisonTrendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUapiHashkeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUapiHashkeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUapiHashkeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasFutureoptionV1QuotationsDailyCcnlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasFutureoptionV1QuotationsDailyCcnlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasFutureoptionV1QuotationsDailyCcnlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasFutureoptionV1QuotationsInquireAskingPriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasFutureoptionV1QuotationsInquireAskingPriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasFutureoptionV1QuotationsInquireAskingPriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasFutureoptionV1QuotationsInquirePriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasFutureoptionV1QuotationsInquirePriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasFutureoptionV1QuotationsInquirePriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasFutureoptionV1QuotationsInquireTimeFuturechartpriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasFutureoptionV1QuotationsInquireTimeFuturechartpriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasFutureoptionV1QuotationsInquireTimeFuturechartpriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasFutureoptionV1QuotationsInvestorUnpdTrendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasFutureoptionV1QuotationsInvestorUnpdTrendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasFutureoptionV1QuotationsInvestorUnpdTrendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasFutureoptionV1QuotationsMarketTimeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasFutureoptionV1QuotationsMarketTimeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasFutureoptionV1QuotationsMarketTimeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasFutureoptionV1QuotationsMonthlyCcnlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasFutureoptionV1QuotationsMonthlyCcnlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasFutureoptionV1QuotationsMonthlyCcnlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasFutureoptionV1QuotationsOptAskingPriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasFutureoptionV1QuotationsOptAskingPriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasFutureoptionV1QuotationsOptAskingPriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasFutureoptionV1QuotationsSearchContractDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasFutureoptionV1QuotationsSearchContractDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasFutureoptionV1QuotationsSearchContractDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasFutureoptionV1QuotationsStockDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasFutureoptionV1QuotationsStockDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasFutureoptionV1QuotationsStockDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasFutureoptionV1QuotationsTickCcnlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasFutureoptionV1QuotationsTickCcnlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasFutureoptionV1QuotationsTickCcnlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasFutureoptionV1QuotationsWeeklyCcnlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasFutureoptionV1QuotationsWeeklyCcnlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasFutureoptionV1QuotationsWeeklyCcnlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasFutureoptionV1TradingInquireCcldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasFutureoptionV1TradingInquireCcldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasFutureoptionV1TradingInquireCcldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasFutureoptionV1TradingInquireDailyCcldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasFutureoptionV1TradingInquireDailyCcldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasFutureoptionV1TradingInquireDailyCcldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasFutureoptionV1TradingInquireDailyOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasFutureoptionV1TradingInquireDailyOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasFutureoptionV1TradingInquireDailyOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasFutureoptionV1TradingInquireDepositResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasFutureoptionV1TradingInquireDepositResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasFutureoptionV1TradingInquireDepositResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasFutureoptionV1TradingInquirePeriodCcldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasFutureoptionV1TradingInquirePeriodCcldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasFutureoptionV1TradingInquirePeriodCcldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasFutureoptionV1TradingInquirePeriodTransResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasFutureoptionV1TradingInquirePeriodTransResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasFutureoptionV1TradingInquirePeriodTransResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasFutureoptionV1TradingInquirePsamountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasFutureoptionV1TradingInquirePsamountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasFutureoptionV1TradingInquirePsamountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasFutureoptionV1TradingInquireUnpdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasFutureoptionV1TradingInquireUnpdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasFutureoptionV1TradingInquireUnpdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasFutureoptionV1TradingMarginDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasFutureoptionV1TradingMarginDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasFutureoptionV1TradingMarginDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUapiOverseasFutureoptionV1TradingOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUapiOverseasFutureoptionV1TradingOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUapiOverseasFutureoptionV1TradingOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUapiOverseasFutureoptionV1TradingOrderRvsecnclResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUapiOverseasFutureoptionV1TradingOrderRvsecnclResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUapiOverseasFutureoptionV1TradingOrderRvsecnclResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasPriceV1QuotationsBrknewsTitleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasPriceV1QuotationsBrknewsTitleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasPriceV1QuotationsBrknewsTitleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasPriceV1QuotationsColableByCompanyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasPriceV1QuotationsColableByCompanyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasPriceV1QuotationsColableByCompanyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasPriceV1QuotationsDailypriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasPriceV1QuotationsDailypriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasPriceV1QuotationsDailypriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasPriceV1QuotationsInquireAskingPriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasPriceV1QuotationsInquireAskingPriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasPriceV1QuotationsInquireAskingPriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasPriceV1QuotationsInquireDailyChartpriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasPriceV1QuotationsInquireDailyChartpriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasPriceV1QuotationsInquireDailyChartpriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasPriceV1QuotationsInquireSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasPriceV1QuotationsInquireSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasPriceV1QuotationsInquireSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasPriceV1QuotationsInquireTimeIndexchartpriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasPriceV1QuotationsInquireTimeIndexchartpriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasPriceV1QuotationsInquireTimeIndexchartpriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasPriceV1QuotationsInquireTimeItemchartpriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasPriceV1QuotationsInquireTimeItemchartpriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasPriceV1QuotationsInquireTimeItemchartpriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasPriceV1QuotationsNewsTitleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasPriceV1QuotationsNewsTitleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasPriceV1QuotationsNewsTitleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasPriceV1QuotationsPeriodRightsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasPriceV1QuotationsPeriodRightsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasPriceV1QuotationsPeriodRightsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasPriceV1QuotationsPriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasPriceV1QuotationsPriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasPriceV1QuotationsPriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasPriceV1QuotationsPriceDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasPriceV1QuotationsPriceDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasPriceV1QuotationsPriceDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasPriceV1QuotationsRightsByIceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasPriceV1QuotationsRightsByIceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasPriceV1QuotationsRightsByIceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasPriceV1QuotationsSearchInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasPriceV1QuotationsSearchInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasPriceV1QuotationsSearchInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasStockV1QuotationsCountriesHolidayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasStockV1QuotationsCountriesHolidayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasStockV1QuotationsCountriesHolidayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUapiOverseasStockV1TradingDaytimeOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUapiOverseasStockV1TradingDaytimeOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUapiOverseasStockV1TradingDaytimeOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasStockV1TradingForeignMarginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasStockV1TradingForeignMarginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasStockV1TradingForeignMarginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasStockV1TradingInquireBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasStockV1TradingInquireBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasStockV1TradingInquireBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasStockV1TradingInquireCcnlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasStockV1TradingInquireCcnlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasStockV1TradingInquireCcnlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasStockV1TradingInquireNccsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasStockV1TradingInquireNccsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasStockV1TradingInquireNccsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasStockV1TradingInquirePaymtStdrBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasStockV1TradingInquirePaymtStdrBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasStockV1TradingInquirePaymtStdrBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasStockV1TradingInquirePeriodProfitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasStockV1TradingInquirePeriodProfitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasStockV1TradingInquirePeriodProfitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasStockV1TradingInquirePeriodTransResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasStockV1TradingInquirePeriodTransResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasStockV1TradingInquirePeriodTransResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasStockV1TradingInquirePresentBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasStockV1TradingInquirePresentBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasStockV1TradingInquirePresentBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasStockV1TradingInquirePsamountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasStockV1TradingInquirePsamountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasStockV1TradingInquirePsamountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUapiOverseasStockV1TradingOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUapiOverseasStockV1TradingOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUapiOverseasStockV1TradingOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUapiOverseasStockV1TradingOrderResvResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUapiOverseasStockV1TradingOrderResvResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUapiOverseasStockV1TradingOrderResvResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUapiOverseasStockV1TradingOrderResvCcnlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUapiOverseasStockV1TradingOrderResvCcnlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUapiOverseasStockV1TradingOrderResvCcnlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUapiOverseasStockV1TradingOrderResvListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUapiOverseasStockV1TradingOrderResvListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUapiOverseasStockV1TradingOrderResvListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUapiOverseasStockV1TradingOrderRvsecnclResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUapiOverseasStockV1TradingOrderRvsecnclResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUapiOverseasStockV1TradingOrderRvsecnclResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostOauth2ApprovalWithBodyWithResponse request with arbitrary body returning *PostOauth2ApprovalResponse
func (c *ClientWithResponses) PostOauth2ApprovalWithBodyWithResponse(ctx context.Context, params *PostOauth2ApprovalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOauth2ApprovalResponse, error) {
	rsp, err := c.PostOauth2ApprovalWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOauth2ApprovalResponse(rsp)
}

func (c *ClientWithResponses) PostOauth2ApprovalWithResponse(ctx context.Context, params *PostOauth2ApprovalParams, body PostOauth2ApprovalJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOauth2ApprovalResponse, error) {
	rsp, err := c.PostOauth2Approval(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOauth2ApprovalResponse(rsp)
}

// PostOauth2RevokePWithBodyWithResponse request with arbitrary body returning *PostOauth2RevokePResponse
func (c *ClientWithResponses) PostOauth2RevokePWithBodyWithResponse(ctx context.Context, params *PostOauth2RevokePParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOauth2RevokePResponse, error) {
	rsp, err := c.PostOauth2RevokePWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOauth2RevokePResponse(rsp)
}

func (c *ClientWithResponses) PostOauth2RevokePWithResponse(ctx context.Context, params *PostOauth2RevokePParams, body PostOauth2RevokePJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOauth2RevokePResponse, error) {
	rsp, err := c.PostOauth2RevokeP(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOauth2RevokePResponse(rsp)
}

// PostOauth2TokenPWithBodyWithResponse request with arbitrary body returning *PostOauth2TokenPResponse
func (c *ClientWithResponses) PostOauth2TokenPWithBodyWithResponse(ctx context.Context, params *PostOauth2TokenPParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOauth2TokenPResponse, error) {
	rsp, err := c.PostOauth2TokenPWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOauth2TokenPResponse(rsp)
}

func (c *ClientWithResponses) PostOauth2TokenPWithResponse(ctx context.Context, params *PostOauth2TokenPParams, body PostOauth2TokenPJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOauth2TokenPResponse, error) {
	rsp, err := c.PostOauth2TokenP(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOauth2TokenPResponse(rsp)
}

// GetUapiDomesticBondV1QuotationsAvgUnitWithResponse request returning *GetUapiDomesticBondV1QuotationsAvgUnitResponse
func (c *ClientWithResponses) GetUapiDomesticBondV1QuotationsAvgUnitWithResponse(ctx context.Context, params *GetUapiDomesticBondV1QuotationsAvgUnitParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticBondV1QuotationsAvgUnitResponse, error) {
	rsp, err := c.GetUapiDomesticBondV1QuotationsAvgUnit(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticBondV1QuotationsAvgUnitResponse(rsp)
}

// GetUapiDomesticBondV1QuotationsInquireAskingPriceWithResponse request returning *GetUapiDomesticBondV1QuotationsInquireAskingPriceResponse
func (c *ClientWithResponses) GetUapiDomesticBondV1QuotationsInquireAskingPriceWithResponse(ctx context.Context, params *GetUapiDomesticBondV1QuotationsInquireAskingPriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticBondV1QuotationsInquireAskingPriceResponse, error) {
	rsp, err := c.GetUapiDomesticBondV1QuotationsInquireAskingPrice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticBondV1QuotationsInquireAskingPriceResponse(rsp)
}

// GetUapiDomesticBondV1QuotationsInquireCcnlWithResponse request returning *GetUapiDomesticBondV1QuotationsInquireCcnlResponse
func (c *ClientWithResponses) GetUapiDomesticBondV1QuotationsInquireCcnlWithResponse(ctx context.Context, params *GetUapiDomesticBondV1QuotationsInquireCcnlParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticBondV1QuotationsInquireCcnlResponse, error) {
	rsp, err := c.GetUapiDomesticBondV1QuotationsInquireCcnl(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticBondV1QuotationsInquireCcnlResponse(rsp)
}

// GetUapiDomesticBondV1QuotationsInquireDailyItemchartpriceWithResponse request returning *GetUapiDomesticBondV1QuotationsInquireDailyItemchartpriceResponse
func (c *ClientWithResponses) GetUapiDomesticBondV1QuotationsInquireDailyItemchartpriceWithResponse(ctx context.Context, params *GetUapiDomesticBondV1QuotationsInquireDailyItemchartpriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticBondV1QuotationsInquireDailyItemchartpriceResponse, error) {
	rsp, err := c.GetUapiDomesticBondV1QuotationsInquireDailyItemchartprice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticBondV1QuotationsInquireDailyItemchartpriceResponse(rsp)
}

// GetUapiDomesticBondV1QuotationsInquirePriceWithResponse request returning *GetUapiDomesticBondV1QuotationsInquirePriceResponse
func (c *ClientWithResponses) GetUapiDomesticBondV1QuotationsInquirePriceWithResponse(ctx context.Context, params *GetUapiDomesticBondV1QuotationsInquirePriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticBondV1QuotationsInquirePriceResponse, error) {
	rsp, err := c.GetUapiDomesticBondV1QuotationsInquirePrice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticBondV1QuotationsInquirePriceResponse(rsp)
}

// GetUapiDomesticBondV1QuotationsIssueInfoWithResponse request returning *GetUapiDomesticBondV1QuotationsIssueInfoResponse
func (c *ClientWithResponses) GetUapiDomesticBondV1QuotationsIssueInfoWithResponse(ctx context.Context, params *GetUapiDomesticBondV1QuotationsIssueInfoParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticBondV1QuotationsIssueInfoResponse, error) {
	rsp, err := c.GetUapiDomesticBondV1QuotationsIssueInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticBondV1QuotationsIssueInfoResponse(rsp)
}

// GetUapiDomesticBondV1QuotationsSearchBondInfoWithResponse request returning *GetUapiDomesticBondV1QuotationsSearchBondInfoResponse
func (c *ClientWithResponses) GetUapiDomesticBondV1QuotationsSearchBondInfoWithResponse(ctx context.Context, params *GetUapiDomesticBondV1QuotationsSearchBondInfoParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticBondV1QuotationsSearchBondInfoResponse, error) {
	rsp, err := c.GetUapiDomesticBondV1QuotationsSearchBondInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticBondV1QuotationsSearchBondInfoResponse(rsp)
}

// PostUapiDomesticBondV1TradingBuyWithBodyWithResponse request with arbitrary body returning *PostUapiDomesticBondV1TradingBuyResponse
func (c *ClientWithResponses) PostUapiDomesticBondV1TradingBuyWithBodyWithResponse(ctx context.Context, params *PostUapiDomesticBondV1TradingBuyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiDomesticBondV1TradingBuyResponse, error) {
	rsp, err := c.PostUapiDomesticBondV1TradingBuyWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiDomesticBondV1TradingBuyResponse(rsp)
}

func (c *ClientWithResponses) PostUapiDomesticBondV1TradingBuyWithResponse(ctx context.Context, params *PostUapiDomesticBondV1TradingBuyParams, body PostUapiDomesticBondV1TradingBuyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiDomesticBondV1TradingBuyResponse, error) {
	rsp, err := c.PostUapiDomesticBondV1TradingBuy(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiDomesticBondV1TradingBuyResponse(rsp)
}

// GetUapiDomesticBondV1TradingInquireBalanceWithResponse request returning *GetUapiDomesticBondV1TradingInquireBalanceResponse
func (c *ClientWithResponses) GetUapiDomesticBondV1TradingInquireBalanceWithResponse(ctx context.Context, params *GetUapiDomesticBondV1TradingInquireBalanceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticBondV1TradingInquireBalanceResponse, error) {
	rsp, err := c.GetUapiDomesticBondV1TradingInquireBalance(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticBondV1TradingInquireBalanceResponse(rsp)
}

// GetUapiDomesticBondV1TradingInquireDailyCcldWithResponse request returning *GetUapiDomesticBondV1TradingInquireDailyCcldResponse
func (c *ClientWithResponses) GetUapiDomesticBondV1TradingInquireDailyCcldWithResponse(ctx context.Context, params *GetUapiDomesticBondV1TradingInquireDailyCcldParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticBondV1TradingInquireDailyCcldResponse, error) {
	rsp, err := c.GetUapiDomesticBondV1TradingInquireDailyCcld(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticBondV1TradingInquireDailyCcldResponse(rsp)
}

// GetUapiDomesticBondV1TradingInquirePsblOrderWithResponse request returning *GetUapiDomesticBondV1TradingInquirePsblOrderResponse
func (c *ClientWithResponses) GetUapiDomesticBondV1TradingInquirePsblOrderWithResponse(ctx context.Context, params *GetUapiDomesticBondV1TradingInquirePsblOrderParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticBondV1TradingInquirePsblOrderResponse, error) {
	rsp, err := c.GetUapiDomesticBondV1TradingInquirePsblOrder(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticBondV1TradingInquirePsblOrderResponse(rsp)
}

// GetUapiDomesticBondV1TradingInquirePsblRvsecnclWithResponse request returning *GetUapiDomesticBondV1TradingInquirePsblRvsecnclResponse
func (c *ClientWithResponses) GetUapiDomesticBondV1TradingInquirePsblRvsecnclWithResponse(ctx context.Context, params *GetUapiDomesticBondV1TradingInquirePsblRvsecnclParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticBondV1TradingInquirePsblRvsecnclResponse, error) {
	rsp, err := c.GetUapiDomesticBondV1TradingInquirePsblRvsecncl(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticBondV1TradingInquirePsblRvsecnclResponse(rsp)
}

// PostUapiDomesticBondV1TradingOrderRvsecnclWithBodyWithResponse request with arbitrary body returning *PostUapiDomesticBondV1TradingOrderRvsecnclResponse
func (c *ClientWithResponses) PostUapiDomesticBondV1TradingOrderRvsecnclWithBodyWithResponse(ctx context.Context, params *PostUapiDomesticBondV1TradingOrderRvsecnclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiDomesticBondV1TradingOrderRvsecnclResponse, error) {
	rsp, err := c.PostUapiDomesticBondV1TradingOrderRvsecnclWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiDomesticBondV1TradingOrderRvsecnclResponse(rsp)
}

func (c *ClientWithResponses) PostUapiDomesticBondV1TradingOrderRvsecnclWithResponse(ctx context.Context, params *PostUapiDomesticBondV1TradingOrderRvsecnclParams, body PostUapiDomesticBondV1TradingOrderRvsecnclJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiDomesticBondV1TradingOrderRvsecnclResponse, error) {
	rsp, err := c.PostUapiDomesticBondV1TradingOrderRvsecncl(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiDomesticBondV1TradingOrderRvsecnclResponse(rsp)
}

// PostUapiDomesticBondV1TradingSellWithBodyWithResponse request with arbitrary body returning *PostUapiDomesticBondV1TradingSellResponse
func (c *ClientWithResponses) PostUapiDomesticBondV1TradingSellWithBodyWithResponse(ctx context.Context, params *PostUapiDomesticBondV1TradingSellParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiDomesticBondV1TradingSellResponse, error) {
	rsp, err := c.PostUapiDomesticBondV1TradingSellWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiDomesticBondV1TradingSellResponse(rsp)
}

func (c *ClientWithResponses) PostUapiDomesticBondV1TradingSellWithResponse(ctx context.Context, params *PostUapiDomesticBondV1TradingSellParams, body PostUapiDomesticBondV1TradingSellJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiDomesticBondV1TradingSellResponse, error) {
	rsp, err := c.PostUapiDomesticBondV1TradingSell(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiDomesticBondV1TradingSellResponse(rsp)
}

// GetUapiDomesticFutureoptionV1QuotationsDisplayBoardCallputWithResponse request returning *GetUapiDomesticFutureoptionV1QuotationsDisplayBoardCallputResponse
func (c *ClientWithResponses) GetUapiDomesticFutureoptionV1QuotationsDisplayBoardCallputWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsDisplayBoardCallputParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1QuotationsDisplayBoardCallputResponse, error) {
	rsp, err := c.GetUapiDomesticFutureoptionV1QuotationsDisplayBoardCallput(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticFutureoptionV1QuotationsDisplayBoardCallputResponse(rsp)
}

// GetUapiDomesticFutureoptionV1QuotationsDisplayBoardFuturesWithResponse request returning *GetUapiDomesticFutureoptionV1QuotationsDisplayBoardFuturesResponse
func (c *ClientWithResponses) GetUapiDomesticFutureoptionV1QuotationsDisplayBoardFuturesWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsDisplayBoardFuturesParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1QuotationsDisplayBoardFuturesResponse, error) {
	rsp, err := c.GetUapiDomesticFutureoptionV1QuotationsDisplayBoardFutures(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticFutureoptionV1QuotationsDisplayBoardFuturesResponse(rsp)
}

// GetUapiDomesticFutureoptionV1QuotationsDisplayBoardOptionListWithResponse request returning *GetUapiDomesticFutureoptionV1QuotationsDisplayBoardOptionListResponse
func (c *ClientWithResponses) GetUapiDomesticFutureoptionV1QuotationsDisplayBoardOptionListWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsDisplayBoardOptionListParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1QuotationsDisplayBoardOptionListResponse, error) {
	rsp, err := c.GetUapiDomesticFutureoptionV1QuotationsDisplayBoardOptionList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticFutureoptionV1QuotationsDisplayBoardOptionListResponse(rsp)
}

// GetUapiDomesticFutureoptionV1QuotationsDisplayBoardTopWithResponse request returning *GetUapiDomesticFutureoptionV1QuotationsDisplayBoardTopResponse
func (c *ClientWithResponses) GetUapiDomesticFutureoptionV1QuotationsDisplayBoardTopWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsDisplayBoardTopParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1QuotationsDisplayBoardTopResponse, error) {
	rsp, err := c.GetUapiDomesticFutureoptionV1QuotationsDisplayBoardTop(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticFutureoptionV1QuotationsDisplayBoardTopResponse(rsp)
}

// GetUapiDomesticFutureoptionV1QuotationsExpPriceTrendWithResponse request returning *GetUapiDomesticFutureoptionV1QuotationsExpPriceTrendResponse
func (c *ClientWithResponses) GetUapiDomesticFutureoptionV1QuotationsExpPriceTrendWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsExpPriceTrendParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1QuotationsExpPriceTrendResponse, error) {
	rsp, err := c.GetUapiDomesticFutureoptionV1QuotationsExpPriceTrend(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticFutureoptionV1QuotationsExpPriceTrendResponse(rsp)
}

// GetUapiDomesticFutureoptionV1QuotationsInquireAskingPriceWithResponse request returning *GetUapiDomesticFutureoptionV1QuotationsInquireAskingPriceResponse
func (c *ClientWithResponses) GetUapiDomesticFutureoptionV1QuotationsInquireAskingPriceWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsInquireAskingPriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1QuotationsInquireAskingPriceResponse, error) {
	rsp, err := c.GetUapiDomesticFutureoptionV1QuotationsInquireAskingPrice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticFutureoptionV1QuotationsInquireAskingPriceResponse(rsp)
}

// GetUapiDomesticFutureoptionV1QuotationsInquireDailyFuopchartpriceWithResponse request returning *GetUapiDomesticFutureoptionV1QuotationsInquireDailyFuopchartpriceResponse
func (c *ClientWithResponses) GetUapiDomesticFutureoptionV1QuotationsInquireDailyFuopchartpriceWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsInquireDailyFuopchartpriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1QuotationsInquireDailyFuopchartpriceResponse, error) {
	rsp, err := c.GetUapiDomesticFutureoptionV1QuotationsInquireDailyFuopchartprice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticFutureoptionV1QuotationsInquireDailyFuopchartpriceResponse(rsp)
}

// GetUapiDomesticFutureoptionV1QuotationsInquirePriceWithResponse request returning *GetUapiDomesticFutureoptionV1QuotationsInquirePriceResponse
func (c *ClientWithResponses) GetUapiDomesticFutureoptionV1QuotationsInquirePriceWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsInquirePriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1QuotationsInquirePriceResponse, error) {
	rsp, err := c.GetUapiDomesticFutureoptionV1QuotationsInquirePrice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticFutureoptionV1QuotationsInquirePriceResponse(rsp)
}

// GetUapiDomesticFutureoptionV1QuotationsInquireTimeFuopchartpriceWithResponse request returning *GetUapiDomesticFutureoptionV1QuotationsInquireTimeFuopchartpriceResponse
func (c *ClientWithResponses) GetUapiDomesticFutureoptionV1QuotationsInquireTimeFuopchartpriceWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1QuotationsInquireTimeFuopchartpriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1QuotationsInquireTimeFuopchartpriceResponse, error) {
	rsp, err := c.GetUapiDomesticFutureoptionV1QuotationsInquireTimeFuopchartprice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticFutureoptionV1QuotationsInquireTimeFuopchartpriceResponse(rsp)
}

// GetUapiDomesticFutureoptionV1TradingInquireBalanceWithResponse request returning *GetUapiDomesticFutureoptionV1TradingInquireBalanceResponse
func (c *ClientWithResponses) GetUapiDomesticFutureoptionV1TradingInquireBalanceWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireBalanceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1TradingInquireBalanceResponse, error) {
	rsp, err := c.GetUapiDomesticFutureoptionV1TradingInquireBalance(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticFutureoptionV1TradingInquireBalanceResponse(rsp)
}

// GetUapiDomesticFutureoptionV1TradingInquireBalanceSettlementPlWithResponse request returning *GetUapiDomesticFutureoptionV1TradingInquireBalanceSettlementPlResponse
func (c *ClientWithResponses) GetUapiDomesticFutureoptionV1TradingInquireBalanceSettlementPlWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireBalanceSettlementPlParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1TradingInquireBalanceSettlementPlResponse, error) {
	rsp, err := c.GetUapiDomesticFutureoptionV1TradingInquireBalanceSettlementPl(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticFutureoptionV1TradingInquireBalanceSettlementPlResponse(rsp)
}

// GetUapiDomesticFutureoptionV1TradingInquireBalanceValuationPlWithResponse request returning *GetUapiDomesticFutureoptionV1TradingInquireBalanceValuationPlResponse
func (c *ClientWithResponses) GetUapiDomesticFutureoptionV1TradingInquireBalanceValuationPlWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireBalanceValuationPlParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1TradingInquireBalanceValuationPlResponse, error) {
	rsp, err := c.GetUapiDomesticFutureoptionV1TradingInquireBalanceValuationPl(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticFutureoptionV1TradingInquireBalanceValuationPlResponse(rsp)
}

// GetUapiDomesticFutureoptionV1TradingInquireCcnlWithResponse request returning *GetUapiDomesticFutureoptionV1TradingInquireCcnlResponse
func (c *ClientWithResponses) GetUapiDomesticFutureoptionV1TradingInquireCcnlWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireCcnlParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1TradingInquireCcnlResponse, error) {
	rsp, err := c.GetUapiDomesticFutureoptionV1TradingInquireCcnl(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticFutureoptionV1TradingInquireCcnlResponse(rsp)
}

// GetUapiDomesticFutureoptionV1TradingInquireCcnlBstimeWithResponse request returning *GetUapiDomesticFutureoptionV1TradingInquireCcnlBstimeResponse
func (c *ClientWithResponses) GetUapiDomesticFutureoptionV1TradingInquireCcnlBstimeWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireCcnlBstimeParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1TradingInquireCcnlBstimeResponse, error) {
	rsp, err := c.GetUapiDomesticFutureoptionV1TradingInquireCcnlBstime(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticFutureoptionV1TradingInquireCcnlBstimeResponse(rsp)
}

// GetUapiDomesticFutureoptionV1TradingInquireDailyAmountFeeWithResponse request returning *GetUapiDomesticFutureoptionV1TradingInquireDailyAmountFeeResponse
func (c *ClientWithResponses) GetUapiDomesticFutureoptionV1TradingInquireDailyAmountFeeWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireDailyAmountFeeParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1TradingInquireDailyAmountFeeResponse, error) {
	rsp, err := c.GetUapiDomesticFutureoptionV1TradingInquireDailyAmountFee(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticFutureoptionV1TradingInquireDailyAmountFeeResponse(rsp)
}

// GetUapiDomesticFutureoptionV1TradingInquireDepositWithResponse request returning *GetUapiDomesticFutureoptionV1TradingInquireDepositResponse
func (c *ClientWithResponses) GetUapiDomesticFutureoptionV1TradingInquireDepositWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireDepositParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1TradingInquireDepositResponse, error) {
	rsp, err := c.GetUapiDomesticFutureoptionV1TradingInquireDeposit(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticFutureoptionV1TradingInquireDepositResponse(rsp)
}

// GetUapiDomesticFutureoptionV1TradingInquireNgtBalanceWithResponse request returning *GetUapiDomesticFutureoptionV1TradingInquireNgtBalanceResponse
func (c *ClientWithResponses) GetUapiDomesticFutureoptionV1TradingInquireNgtBalanceWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireNgtBalanceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1TradingInquireNgtBalanceResponse, error) {
	rsp, err := c.GetUapiDomesticFutureoptionV1TradingInquireNgtBalance(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticFutureoptionV1TradingInquireNgtBalanceResponse(rsp)
}

// GetUapiDomesticFutureoptionV1TradingInquireNgtCcnlWithResponse request returning *GetUapiDomesticFutureoptionV1TradingInquireNgtCcnlResponse
func (c *ClientWithResponses) GetUapiDomesticFutureoptionV1TradingInquireNgtCcnlWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquireNgtCcnlParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1TradingInquireNgtCcnlResponse, error) {
	rsp, err := c.GetUapiDomesticFutureoptionV1TradingInquireNgtCcnl(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticFutureoptionV1TradingInquireNgtCcnlResponse(rsp)
}

// GetUapiDomesticFutureoptionV1TradingInquirePsblNgtOrderWithResponse request returning *GetUapiDomesticFutureoptionV1TradingInquirePsblNgtOrderResponse
func (c *ClientWithResponses) GetUapiDomesticFutureoptionV1TradingInquirePsblNgtOrderWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquirePsblNgtOrderParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1TradingInquirePsblNgtOrderResponse, error) {
	rsp, err := c.GetUapiDomesticFutureoptionV1TradingInquirePsblNgtOrder(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticFutureoptionV1TradingInquirePsblNgtOrderResponse(rsp)
}

// GetUapiDomesticFutureoptionV1TradingInquirePsblOrderWithResponse request returning *GetUapiDomesticFutureoptionV1TradingInquirePsblOrderResponse
func (c *ClientWithResponses) GetUapiDomesticFutureoptionV1TradingInquirePsblOrderWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingInquirePsblOrderParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1TradingInquirePsblOrderResponse, error) {
	rsp, err := c.GetUapiDomesticFutureoptionV1TradingInquirePsblOrder(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticFutureoptionV1TradingInquirePsblOrderResponse(rsp)
}

// GetUapiDomesticFutureoptionV1TradingNgtMarginDetailWithResponse request returning *GetUapiDomesticFutureoptionV1TradingNgtMarginDetailResponse
func (c *ClientWithResponses) GetUapiDomesticFutureoptionV1TradingNgtMarginDetailWithResponse(ctx context.Context, params *GetUapiDomesticFutureoptionV1TradingNgtMarginDetailParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticFutureoptionV1TradingNgtMarginDetailResponse, error) {
	rsp, err := c.GetUapiDomesticFutureoptionV1TradingNgtMarginDetail(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticFutureoptionV1TradingNgtMarginDetailResponse(rsp)
}

// PostUapiDomesticFutureoptionV1TradingOrderWithBodyWithResponse request with arbitrary body returning *PostUapiDomesticFutureoptionV1TradingOrderResponse
func (c *ClientWithResponses) PostUapiDomesticFutureoptionV1TradingOrderWithBodyWithResponse(ctx context.Context, params *PostUapiDomesticFutureoptionV1TradingOrderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiDomesticFutureoptionV1TradingOrderResponse, error) {
	rsp, err := c.PostUapiDomesticFutureoptionV1TradingOrderWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiDomesticFutureoptionV1TradingOrderResponse(rsp)
}

func (c *ClientWithResponses) PostUapiDomesticFutureoptionV1TradingOrderWithResponse(ctx context.Context, params *PostUapiDomesticFutureoptionV1TradingOrderParams, body PostUapiDomesticFutureoptionV1TradingOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiDomesticFutureoptionV1TradingOrderResponse, error) {
	rsp, err := c.PostUapiDomesticFutureoptionV1TradingOrder(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiDomesticFutureoptionV1TradingOrderResponse(rsp)
}

// PostUapiDomesticFutureoptionV1TradingOrderRvsecnclWithBodyWithResponse request with arbitrary body returning *PostUapiDomesticFutureoptionV1TradingOrderRvsecnclResponse
func (c *ClientWithResponses) PostUapiDomesticFutureoptionV1TradingOrderRvsecnclWithBodyWithResponse(ctx context.Context, params *PostUapiDomesticFutureoptionV1TradingOrderRvsecnclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiDomesticFutureoptionV1TradingOrderRvsecnclResponse, error) {
	rsp, err := c.PostUapiDomesticFutureoptionV1TradingOrderRvsecnclWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiDomesticFutureoptionV1TradingOrderRvsecnclResponse(rsp)
}

func (c *ClientWithResponses) PostUapiDomesticFutureoptionV1TradingOrderRvsecnclWithResponse(ctx context.Context, params *PostUapiDomesticFutureoptionV1TradingOrderRvsecnclParams, body PostUapiDomesticFutureoptionV1TradingOrderRvsecnclJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiDomesticFutureoptionV1TradingOrderRvsecnclResponse, error) {
	rsp, err := c.PostUapiDomesticFutureoptionV1TradingOrderRvsecncl(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiDomesticFutureoptionV1TradingOrderRvsecnclResponse(rsp)
}

// GetUapiDomesticStockV1FinanceBalanceSheetWithResponse request returning *GetUapiDomesticStockV1FinanceBalanceSheetResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1FinanceBalanceSheetWithResponse(ctx context.Context, params *GetUapiDomesticStockV1FinanceBalanceSheetParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1FinanceBalanceSheetResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1FinanceBalanceSheet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1FinanceBalanceSheetResponse(rsp)
}

// GetUapiDomesticStockV1FinanceFinancialRatioWithResponse request returning *GetUapiDomesticStockV1FinanceFinancialRatioResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1FinanceFinancialRatioWithResponse(ctx context.Context, params *GetUapiDomesticStockV1FinanceFinancialRatioParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1FinanceFinancialRatioResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1FinanceFinancialRatio(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1FinanceFinancialRatioResponse(rsp)
}

// GetUapiDomesticStockV1FinanceGrowthRatioWithResponse request returning *GetUapiDomesticStockV1FinanceGrowthRatioResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1FinanceGrowthRatioWithResponse(ctx context.Context, params *GetUapiDomesticStockV1FinanceGrowthRatioParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1FinanceGrowthRatioResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1FinanceGrowthRatio(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1FinanceGrowthRatioResponse(rsp)
}

// GetUapiDomesticStockV1FinanceIncomeStatementWithResponse request returning *GetUapiDomesticStockV1FinanceIncomeStatementResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1FinanceIncomeStatementWithResponse(ctx context.Context, params *GetUapiDomesticStockV1FinanceIncomeStatementParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1FinanceIncomeStatementResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1FinanceIncomeStatement(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1FinanceIncomeStatementResponse(rsp)
}

// GetUapiDomesticStockV1FinanceOtherMajorRatiosWithResponse request returning *GetUapiDomesticStockV1FinanceOtherMajorRatiosResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1FinanceOtherMajorRatiosWithResponse(ctx context.Context, params *GetUapiDomesticStockV1FinanceOtherMajorRatiosParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1FinanceOtherMajorRatiosResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1FinanceOtherMajorRatios(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1FinanceOtherMajorRatiosResponse(rsp)
}

// GetUapiDomesticStockV1FinanceProfitRatioWithResponse request returning *GetUapiDomesticStockV1FinanceProfitRatioResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1FinanceProfitRatioWithResponse(ctx context.Context, params *GetUapiDomesticStockV1FinanceProfitRatioParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1FinanceProfitRatioResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1FinanceProfitRatio(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1FinanceProfitRatioResponse(rsp)
}

// GetUapiDomesticStockV1FinanceStabilityRatioWithResponse request returning *GetUapiDomesticStockV1FinanceStabilityRatioResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1FinanceStabilityRatioWithResponse(ctx context.Context, params *GetUapiDomesticStockV1FinanceStabilityRatioParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1FinanceStabilityRatioResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1FinanceStabilityRatio(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1FinanceStabilityRatioResponse(rsp)
}

// GetUapiDomesticStockV1KsdinfoBonusIssueWithResponse request returning *GetUapiDomesticStockV1KsdinfoBonusIssueResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1KsdinfoBonusIssueWithResponse(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoBonusIssueParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1KsdinfoBonusIssueResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1KsdinfoBonusIssue(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1KsdinfoBonusIssueResponse(rsp)
}

// GetUapiDomesticStockV1KsdinfoCapDcrsWithResponse request returning *GetUapiDomesticStockV1KsdinfoCapDcrsResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1KsdinfoCapDcrsWithResponse(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoCapDcrsParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1KsdinfoCapDcrsResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1KsdinfoCapDcrs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1KsdinfoCapDcrsResponse(rsp)
}

// GetUapiDomesticStockV1KsdinfoDividendWithResponse request returning *GetUapiDomesticStockV1KsdinfoDividendResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1KsdinfoDividendWithResponse(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoDividendParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1KsdinfoDividendResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1KsdinfoDividend(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1KsdinfoDividendResponse(rsp)
}

// GetUapiDomesticStockV1KsdinfoListInfoWithResponse request returning *GetUapiDomesticStockV1KsdinfoListInfoResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1KsdinfoListInfoWithResponse(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoListInfoParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1KsdinfoListInfoResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1KsdinfoListInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1KsdinfoListInfoResponse(rsp)
}

// GetUapiDomesticStockV1KsdinfoMergerSplitWithResponse request returning *GetUapiDomesticStockV1KsdinfoMergerSplitResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1KsdinfoMergerSplitWithResponse(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoMergerSplitParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1KsdinfoMergerSplitResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1KsdinfoMergerSplit(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1KsdinfoMergerSplitResponse(rsp)
}

// GetUapiDomesticStockV1KsdinfoPaidinCapinWithResponse request returning *GetUapiDomesticStockV1KsdinfoPaidinCapinResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1KsdinfoPaidinCapinWithResponse(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoPaidinCapinParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1KsdinfoPaidinCapinResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1KsdinfoPaidinCapin(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1KsdinfoPaidinCapinResponse(rsp)
}

// GetUapiDomesticStockV1KsdinfoPurreqWithResponse request returning *GetUapiDomesticStockV1KsdinfoPurreqResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1KsdinfoPurreqWithResponse(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoPurreqParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1KsdinfoPurreqResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1KsdinfoPurreq(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1KsdinfoPurreqResponse(rsp)
}

// GetUapiDomesticStockV1KsdinfoRevSplitWithResponse request returning *GetUapiDomesticStockV1KsdinfoRevSplitResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1KsdinfoRevSplitWithResponse(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoRevSplitParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1KsdinfoRevSplitResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1KsdinfoRevSplit(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1KsdinfoRevSplitResponse(rsp)
}

// GetUapiDomesticStockV1KsdinfoSharehldMeetWithResponse request returning *GetUapiDomesticStockV1KsdinfoSharehldMeetResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1KsdinfoSharehldMeetWithResponse(ctx context.Context, params *GetUapiDomesticStockV1KsdinfoSharehldMeetParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1KsdinfoSharehldMeetResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1KsdinfoSharehldMeet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1KsdinfoSharehldMeetResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsCaptureUplowpriceWithResponse request returning *GetUapiDomesticStockV1QuotationsCaptureUplowpriceResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsCaptureUplowpriceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsCaptureUplowpriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsCaptureUplowpriceResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsCaptureUplowprice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsCaptureUplowpriceResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsChkHolidayWithResponse request returning *GetUapiDomesticStockV1QuotationsChkHolidayResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsChkHolidayWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsChkHolidayParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsChkHolidayResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsChkHoliday(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsChkHolidayResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsCompInterestWithResponse request returning *GetUapiDomesticStockV1QuotationsCompInterestResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsCompInterestWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsCompInterestParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsCompInterestResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsCompInterest(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsCompInterestResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsCompProgramTradeDailyWithResponse request returning *GetUapiDomesticStockV1QuotationsCompProgramTradeDailyResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsCompProgramTradeDailyWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsCompProgramTradeDailyParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsCompProgramTradeDailyResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsCompProgramTradeDaily(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsCompProgramTradeDailyResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsCompProgramTradeTodayWithResponse request returning *GetUapiDomesticStockV1QuotationsCompProgramTradeTodayResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsCompProgramTradeTodayWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsCompProgramTradeTodayParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsCompProgramTradeTodayResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsCompProgramTradeToday(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsCompProgramTradeTodayResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsCreditByCompanyWithResponse request returning *GetUapiDomesticStockV1QuotationsCreditByCompanyResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsCreditByCompanyWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsCreditByCompanyParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsCreditByCompanyResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsCreditByCompany(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsCreditByCompanyResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsDailyCreditBalanceWithResponse request returning *GetUapiDomesticStockV1QuotationsDailyCreditBalanceResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsDailyCreditBalanceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsDailyCreditBalanceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsDailyCreditBalanceResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsDailyCreditBalance(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsDailyCreditBalanceResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsDailyShortSaleWithResponse request returning *GetUapiDomesticStockV1QuotationsDailyShortSaleResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsDailyShortSaleWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsDailyShortSaleParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsDailyShortSaleResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsDailyShortSale(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsDailyShortSaleResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsEstimatePerformWithResponse request returning *GetUapiDomesticStockV1QuotationsEstimatePerformResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsEstimatePerformWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsEstimatePerformParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsEstimatePerformResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsEstimatePerform(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsEstimatePerformResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsExpClosingPriceWithResponse request returning *GetUapiDomesticStockV1QuotationsExpClosingPriceResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsExpClosingPriceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsExpClosingPriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsExpClosingPriceResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsExpClosingPrice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsExpClosingPriceResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsExpIndexTrendWithResponse request returning *GetUapiDomesticStockV1QuotationsExpIndexTrendResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsExpIndexTrendWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsExpIndexTrendParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsExpIndexTrendResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsExpIndexTrend(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsExpIndexTrendResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsExpPriceTrendWithResponse request returning *GetUapiDomesticStockV1QuotationsExpPriceTrendResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsExpPriceTrendWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsExpPriceTrendParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsExpPriceTrendResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsExpPriceTrend(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsExpPriceTrendResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsForeignInstitutionTotalWithResponse request returning *GetUapiDomesticStockV1QuotationsForeignInstitutionTotalResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsForeignInstitutionTotalWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsForeignInstitutionTotalParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsForeignInstitutionTotalResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsForeignInstitutionTotal(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsForeignInstitutionTotalResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsFrgnmemPchsTrendWithResponse request returning *GetUapiDomesticStockV1QuotationsFrgnmemPchsTrendResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsFrgnmemPchsTrendWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsFrgnmemPchsTrendParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsFrgnmemPchsTrendResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsFrgnmemPchsTrend(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsFrgnmemPchsTrendResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsFrgnmemTradeEstimateWithResponse request returning *GetUapiDomesticStockV1QuotationsFrgnmemTradeEstimateResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsFrgnmemTradeEstimateWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsFrgnmemTradeEstimateParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsFrgnmemTradeEstimateResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsFrgnmemTradeEstimate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsFrgnmemTradeEstimateResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsFrgnmemTradeTrendWithResponse request returning *GetUapiDomesticStockV1QuotationsFrgnmemTradeTrendResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsFrgnmemTradeTrendWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsFrgnmemTradeTrendParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsFrgnmemTradeTrendResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsFrgnmemTradeTrend(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsFrgnmemTradeTrendResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsInquireAskingPriceExpCcnWithResponse request returning *GetUapiDomesticStockV1QuotationsInquireAskingPriceExpCcnResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsInquireAskingPriceExpCcnWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireAskingPriceExpCcnParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireAskingPriceExpCcnResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsInquireAskingPriceExpCcn(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsInquireAskingPriceExpCcnResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsInquireCcnlWithResponse request returning *GetUapiDomesticStockV1QuotationsInquireCcnlResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsInquireCcnlWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireCcnlParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireCcnlResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsInquireCcnl(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsInquireCcnlResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsInquireDailyIndexchartpriceWithResponse request returning *GetUapiDomesticStockV1QuotationsInquireDailyIndexchartpriceResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsInquireDailyIndexchartpriceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireDailyIndexchartpriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireDailyIndexchartpriceResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsInquireDailyIndexchartprice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsInquireDailyIndexchartpriceResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsInquireDailyItemchartpriceWithResponse request returning *GetUapiDomesticStockV1QuotationsInquireDailyItemchartpriceResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsInquireDailyItemchartpriceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireDailyItemchartpriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireDailyItemchartpriceResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsInquireDailyItemchartprice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsInquireDailyItemchartpriceResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsInquireDailyOvertimepriceWithResponse request returning *GetUapiDomesticStockV1QuotationsInquireDailyOvertimepriceResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsInquireDailyOvertimepriceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireDailyOvertimepriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireDailyOvertimepriceResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsInquireDailyOvertimeprice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsInquireDailyOvertimepriceResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsInquireDailyPriceWithResponse request returning *GetUapiDomesticStockV1QuotationsInquireDailyPriceResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsInquireDailyPriceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireDailyPriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireDailyPriceResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsInquireDailyPrice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsInquireDailyPriceResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsInquireDailyTradeVolumeWithResponse request returning *GetUapiDomesticStockV1QuotationsInquireDailyTradeVolumeResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsInquireDailyTradeVolumeWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireDailyTradeVolumeParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireDailyTradeVolumeResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsInquireDailyTradeVolume(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsInquireDailyTradeVolumeResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsInquireElwPriceWithResponse request returning *GetUapiDomesticStockV1QuotationsInquireElwPriceResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsInquireElwPriceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireElwPriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireElwPriceResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsInquireElwPrice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsInquireElwPriceResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsInquireIndexTickpriceWithResponse request returning *GetUapiDomesticStockV1QuotationsInquireIndexTickpriceResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsInquireIndexTickpriceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireIndexTickpriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireIndexTickpriceResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsInquireIndexTickprice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsInquireIndexTickpriceResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsInquireIndexTimepriceWithResponse request returning *GetUapiDomesticStockV1QuotationsInquireIndexTimepriceResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsInquireIndexTimepriceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireIndexTimepriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireIndexTimepriceResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsInquireIndexTimeprice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsInquireIndexTimepriceResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsInquireInvestorWithResponse request returning *GetUapiDomesticStockV1QuotationsInquireInvestorResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsInquireInvestorWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireInvestorParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireInvestorResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsInquireInvestor(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsInquireInvestorResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsInquireInvestorDailyByMarketWithResponse request returning *GetUapiDomesticStockV1QuotationsInquireInvestorDailyByMarketResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsInquireInvestorDailyByMarketWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireInvestorDailyByMarketParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireInvestorDailyByMarketResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsInquireInvestorDailyByMarket(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsInquireInvestorDailyByMarketResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsInquireInvestorTimeByMarketWithResponse request returning *GetUapiDomesticStockV1QuotationsInquireInvestorTimeByMarketResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsInquireInvestorTimeByMarketWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireInvestorTimeByMarketParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireInvestorTimeByMarketResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsInquireInvestorTimeByMarket(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsInquireInvestorTimeByMarketResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsInquireMemberWithResponse request returning *GetUapiDomesticStockV1QuotationsInquireMemberResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsInquireMemberWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireMemberParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireMemberResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsInquireMember(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsInquireMemberResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsInquireMemberDailyWithResponse request returning *GetUapiDomesticStockV1QuotationsInquireMemberDailyResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsInquireMemberDailyWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireMemberDailyParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireMemberDailyResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsInquireMemberDaily(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsInquireMemberDailyResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsInquireOvertimeAskingPriceWithResponse request returning *GetUapiDomesticStockV1QuotationsInquireOvertimeAskingPriceResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsInquireOvertimeAskingPriceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireOvertimeAskingPriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireOvertimeAskingPriceResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsInquireOvertimeAskingPrice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsInquireOvertimeAskingPriceResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsInquireOvertimePriceWithResponse request returning *GetUapiDomesticStockV1QuotationsInquireOvertimePriceResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsInquireOvertimePriceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireOvertimePriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireOvertimePriceResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsInquireOvertimePrice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsInquireOvertimePriceResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsInquirePriceWithResponse request returning *GetUapiDomesticStockV1QuotationsInquirePriceResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsInquirePriceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquirePriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquirePriceResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsInquirePrice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsInquirePriceResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsInquirePrice2WithResponse request returning *GetUapiDomesticStockV1QuotationsInquirePrice2Response
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsInquirePrice2WithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquirePrice2Params, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquirePrice2Response, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsInquirePrice2(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsInquirePrice2Response(rsp)
}

// GetUapiDomesticStockV1QuotationsInquireTimeIndexchartpriceWithResponse request returning *GetUapiDomesticStockV1QuotationsInquireTimeIndexchartpriceResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsInquireTimeIndexchartpriceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireTimeIndexchartpriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireTimeIndexchartpriceResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsInquireTimeIndexchartprice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsInquireTimeIndexchartpriceResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsInquireTimeItemchartpriceWithResponse request returning *GetUapiDomesticStockV1QuotationsInquireTimeItemchartpriceResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsInquireTimeItemchartpriceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireTimeItemchartpriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireTimeItemchartpriceResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsInquireTimeItemchartprice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsInquireTimeItemchartpriceResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsInquireTimeItemconclusionWithResponse request returning *GetUapiDomesticStockV1QuotationsInquireTimeItemconclusionResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsInquireTimeItemconclusionWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireTimeItemconclusionParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireTimeItemconclusionResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsInquireTimeItemconclusion(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsInquireTimeItemconclusionResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsInquireTimeOvertimeconclusionWithResponse request returning *GetUapiDomesticStockV1QuotationsInquireTimeOvertimeconclusionResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsInquireTimeOvertimeconclusionWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireTimeOvertimeconclusionParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireTimeOvertimeconclusionResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsInquireTimeOvertimeconclusion(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsInquireTimeOvertimeconclusionResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsInquireViStatusWithResponse request returning *GetUapiDomesticStockV1QuotationsInquireViStatusResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsInquireViStatusWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInquireViStatusParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInquireViStatusResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsInquireViStatus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsInquireViStatusResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsIntstockGrouplistWithResponse request returning *GetUapiDomesticStockV1QuotationsIntstockGrouplistResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsIntstockGrouplistWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsIntstockGrouplistParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsIntstockGrouplistResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsIntstockGrouplist(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsIntstockGrouplistResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsIntstockMultpriceWithResponse request returning *GetUapiDomesticStockV1QuotationsIntstockMultpriceResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsIntstockMultpriceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsIntstockMultpriceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsIntstockMultpriceResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsIntstockMultprice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsIntstockMultpriceResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsIntstockStocklistByGroupWithResponse request returning *GetUapiDomesticStockV1QuotationsIntstockStocklistByGroupResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsIntstockStocklistByGroupWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsIntstockStocklistByGroupParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsIntstockStocklistByGroupResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsIntstockStocklistByGroup(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsIntstockStocklistByGroupResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsInvestOpbysecWithResponse request returning *GetUapiDomesticStockV1QuotationsInvestOpbysecResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsInvestOpbysecWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInvestOpbysecParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInvestOpbysecResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsInvestOpbysec(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsInvestOpbysecResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsInvestOpinionWithResponse request returning *GetUapiDomesticStockV1QuotationsInvestOpinionResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsInvestOpinionWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInvestOpinionParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInvestOpinionResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsInvestOpinion(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsInvestOpinionResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsInvestorProgramTradeTodayWithResponse request returning *GetUapiDomesticStockV1QuotationsInvestorProgramTradeTodayResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsInvestorProgramTradeTodayWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInvestorProgramTradeTodayParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInvestorProgramTradeTodayResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsInvestorProgramTradeToday(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsInvestorProgramTradeTodayResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsInvestorTrendEstimateWithResponse request returning *GetUapiDomesticStockV1QuotationsInvestorTrendEstimateResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsInvestorTrendEstimateWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsInvestorTrendEstimateParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsInvestorTrendEstimateResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsInvestorTrendEstimate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsInvestorTrendEstimateResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsLendableByCompanyWithResponse request returning *GetUapiDomesticStockV1QuotationsLendableByCompanyResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsLendableByCompanyWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsLendableByCompanyParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsLendableByCompanyResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsLendableByCompany(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsLendableByCompanyResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsMktfundsWithResponse request returning *GetUapiDomesticStockV1QuotationsMktfundsResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsMktfundsWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsMktfundsParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsMktfundsResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsMktfunds(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsMktfundsResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsNewsTitleWithResponse request returning *GetUapiDomesticStockV1QuotationsNewsTitleResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsNewsTitleWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsNewsTitleParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsNewsTitleResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsNewsTitle(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsNewsTitleResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsPbarTratioWithResponse request returning *GetUapiDomesticStockV1QuotationsPbarTratioResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsPbarTratioWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsPbarTratioParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsPbarTratioResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsPbarTratio(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsPbarTratioResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsProgramTradeByStockWithResponse request returning *GetUapiDomesticStockV1QuotationsProgramTradeByStockResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsProgramTradeByStockWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsProgramTradeByStockParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsProgramTradeByStockResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsProgramTradeByStock(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsProgramTradeByStockResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsProgramTradeByStockDailyWithResponse request returning *GetUapiDomesticStockV1QuotationsProgramTradeByStockDailyResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsProgramTradeByStockDailyWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsProgramTradeByStockDailyParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsProgramTradeByStockDailyResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsProgramTradeByStockDaily(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsProgramTradeByStockDailyResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsPsearchResultWithResponse request returning *GetUapiDomesticStockV1QuotationsPsearchResultResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsPsearchResultWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsPsearchResultParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsPsearchResultResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsPsearchResult(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsPsearchResultResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsPsearchTitleWithResponse request returning *GetUapiDomesticStockV1QuotationsPsearchTitleResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsPsearchTitleWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsPsearchTitleParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsPsearchTitleResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsPsearchTitle(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsPsearchTitleResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsSearchInfoWithResponse request returning *GetUapiDomesticStockV1QuotationsSearchInfoResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsSearchInfoWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsSearchInfoParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsSearchInfoResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsSearchInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsSearchInfoResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsSearchStockInfoWithResponse request returning *GetUapiDomesticStockV1QuotationsSearchStockInfoResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsSearchStockInfoWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsSearchStockInfoParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsSearchStockInfoResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsSearchStockInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsSearchStockInfoResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsTradprtByamtWithResponse request returning *GetUapiDomesticStockV1QuotationsTradprtByamtResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsTradprtByamtWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsTradprtByamtParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsTradprtByamtResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsTradprtByamt(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsTradprtByamtResponse(rsp)
}

// GetUapiDomesticStockV1QuotationsVolumeRankWithResponse request returning *GetUapiDomesticStockV1QuotationsVolumeRankResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1QuotationsVolumeRankWithResponse(ctx context.Context, params *GetUapiDomesticStockV1QuotationsVolumeRankParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1QuotationsVolumeRankResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1QuotationsVolumeRank(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1QuotationsVolumeRankResponse(rsp)
}

// GetUapiDomesticStockV1RankingAfterHourBalanceWithResponse request returning *GetUapiDomesticStockV1RankingAfterHourBalanceResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1RankingAfterHourBalanceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingAfterHourBalanceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingAfterHourBalanceResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1RankingAfterHourBalance(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1RankingAfterHourBalanceResponse(rsp)
}

// GetUapiDomesticStockV1RankingBulkTransNumWithResponse request returning *GetUapiDomesticStockV1RankingBulkTransNumResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1RankingBulkTransNumWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingBulkTransNumParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingBulkTransNumResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1RankingBulkTransNum(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1RankingBulkTransNumResponse(rsp)
}

// GetUapiDomesticStockV1RankingCreditBalanceWithResponse request returning *GetUapiDomesticStockV1RankingCreditBalanceResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1RankingCreditBalanceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingCreditBalanceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingCreditBalanceResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1RankingCreditBalance(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1RankingCreditBalanceResponse(rsp)
}

// GetUapiDomesticStockV1RankingDisparityWithResponse request returning *GetUapiDomesticStockV1RankingDisparityResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1RankingDisparityWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingDisparityParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingDisparityResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1RankingDisparity(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1RankingDisparityResponse(rsp)
}

// GetUapiDomesticStockV1RankingDividendRateWithResponse request returning *GetUapiDomesticStockV1RankingDividendRateResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1RankingDividendRateWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingDividendRateParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingDividendRateResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1RankingDividendRate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1RankingDividendRateResponse(rsp)
}

// GetUapiDomesticStockV1RankingExpTransUpdownWithResponse request returning *GetUapiDomesticStockV1RankingExpTransUpdownResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1RankingExpTransUpdownWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingExpTransUpdownParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingExpTransUpdownResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1RankingExpTransUpdown(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1RankingExpTransUpdownResponse(rsp)
}

// GetUapiDomesticStockV1RankingFinanceRatioWithResponse request returning *GetUapiDomesticStockV1RankingFinanceRatioResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1RankingFinanceRatioWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingFinanceRatioParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingFinanceRatioResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1RankingFinanceRatio(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1RankingFinanceRatioResponse(rsp)
}

// GetUapiDomesticStockV1RankingFluctuationWithResponse request returning *GetUapiDomesticStockV1RankingFluctuationResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1RankingFluctuationWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingFluctuationParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingFluctuationResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1RankingFluctuation(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1RankingFluctuationResponse(rsp)
}

// GetUapiDomesticStockV1RankingMarketCapWithResponse request returning *GetUapiDomesticStockV1RankingMarketCapResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1RankingMarketCapWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingMarketCapParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingMarketCapResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1RankingMarketCap(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1RankingMarketCapResponse(rsp)
}

// GetUapiDomesticStockV1RankingMarketValueWithResponse request returning *GetUapiDomesticStockV1RankingMarketValueResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1RankingMarketValueWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingMarketValueParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingMarketValueResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1RankingMarketValue(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1RankingMarketValueResponse(rsp)
}

// GetUapiDomesticStockV1RankingNearNewHighlowWithResponse request returning *GetUapiDomesticStockV1RankingNearNewHighlowResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1RankingNearNewHighlowWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingNearNewHighlowParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingNearNewHighlowResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1RankingNearNewHighlow(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1RankingNearNewHighlowResponse(rsp)
}

// GetUapiDomesticStockV1RankingOvertimeExpTransFluctWithResponse request returning *GetUapiDomesticStockV1RankingOvertimeExpTransFluctResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1RankingOvertimeExpTransFluctWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingOvertimeExpTransFluctParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingOvertimeExpTransFluctResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1RankingOvertimeExpTransFluct(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1RankingOvertimeExpTransFluctResponse(rsp)
}

// GetUapiDomesticStockV1RankingOvertimeFluctuationWithResponse request returning *GetUapiDomesticStockV1RankingOvertimeFluctuationResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1RankingOvertimeFluctuationWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingOvertimeFluctuationParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingOvertimeFluctuationResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1RankingOvertimeFluctuation(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1RankingOvertimeFluctuationResponse(rsp)
}

// GetUapiDomesticStockV1RankingOvertimeVolumeWithResponse request returning *GetUapiDomesticStockV1RankingOvertimeVolumeResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1RankingOvertimeVolumeWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingOvertimeVolumeParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingOvertimeVolumeResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1RankingOvertimeVolume(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1RankingOvertimeVolumeResponse(rsp)
}

// GetUapiDomesticStockV1RankingPreferDisparateRatioWithResponse request returning *GetUapiDomesticStockV1RankingPreferDisparateRatioResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1RankingPreferDisparateRatioWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingPreferDisparateRatioParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingPreferDisparateRatioResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1RankingPreferDisparateRatio(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1RankingPreferDisparateRatioResponse(rsp)
}

// GetUapiDomesticStockV1RankingProfitAssetIndexWithResponse request returning *GetUapiDomesticStockV1RankingProfitAssetIndexResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1RankingProfitAssetIndexWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingProfitAssetIndexParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingProfitAssetIndexResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1RankingProfitAssetIndex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1RankingProfitAssetIndexResponse(rsp)
}

// GetUapiDomesticStockV1RankingQuoteBalanceWithResponse request returning *GetUapiDomesticStockV1RankingQuoteBalanceResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1RankingQuoteBalanceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingQuoteBalanceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingQuoteBalanceResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1RankingQuoteBalance(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1RankingQuoteBalanceResponse(rsp)
}

// GetUapiDomesticStockV1RankingShortSaleWithResponse request returning *GetUapiDomesticStockV1RankingShortSaleResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1RankingShortSaleWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingShortSaleParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingShortSaleResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1RankingShortSale(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1RankingShortSaleResponse(rsp)
}

// GetUapiDomesticStockV1RankingTopInterestStockWithResponse request returning *GetUapiDomesticStockV1RankingTopInterestStockResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1RankingTopInterestStockWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingTopInterestStockParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingTopInterestStockResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1RankingTopInterestStock(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1RankingTopInterestStockResponse(rsp)
}

// GetUapiDomesticStockV1RankingTradedByCompanyWithResponse request returning *GetUapiDomesticStockV1RankingTradedByCompanyResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1RankingTradedByCompanyWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingTradedByCompanyParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingTradedByCompanyResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1RankingTradedByCompany(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1RankingTradedByCompanyResponse(rsp)
}

// GetUapiDomesticStockV1RankingVolumePowerWithResponse request returning *GetUapiDomesticStockV1RankingVolumePowerResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1RankingVolumePowerWithResponse(ctx context.Context, params *GetUapiDomesticStockV1RankingVolumePowerParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1RankingVolumePowerResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1RankingVolumePower(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1RankingVolumePowerResponse(rsp)
}

// GetUapiDomesticStockV1TradingInquireAccountBalanceWithResponse request returning *GetUapiDomesticStockV1TradingInquireAccountBalanceResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1TradingInquireAccountBalanceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1TradingInquireAccountBalanceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1TradingInquireAccountBalanceResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1TradingInquireAccountBalance(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1TradingInquireAccountBalanceResponse(rsp)
}

// GetUapiDomesticStockV1TradingInquireBalanceWithResponse request returning *GetUapiDomesticStockV1TradingInquireBalanceResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1TradingInquireBalanceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1TradingInquireBalanceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1TradingInquireBalanceResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1TradingInquireBalance(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1TradingInquireBalanceResponse(rsp)
}

// GetUapiDomesticStockV1TradingInquireBalanceRlzPlWithResponse request returning *GetUapiDomesticStockV1TradingInquireBalanceRlzPlResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1TradingInquireBalanceRlzPlWithResponse(ctx context.Context, params *GetUapiDomesticStockV1TradingInquireBalanceRlzPlParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1TradingInquireBalanceRlzPlResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1TradingInquireBalanceRlzPl(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1TradingInquireBalanceRlzPlResponse(rsp)
}

// GetUapiDomesticStockV1TradingInquireCreditPsamountWithResponse request returning *GetUapiDomesticStockV1TradingInquireCreditPsamountResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1TradingInquireCreditPsamountWithResponse(ctx context.Context, params *GetUapiDomesticStockV1TradingInquireCreditPsamountParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1TradingInquireCreditPsamountResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1TradingInquireCreditPsamount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1TradingInquireCreditPsamountResponse(rsp)
}

// GetUapiDomesticStockV1TradingInquireDailyCcldWithResponse request returning *GetUapiDomesticStockV1TradingInquireDailyCcldResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1TradingInquireDailyCcldWithResponse(ctx context.Context, params *GetUapiDomesticStockV1TradingInquireDailyCcldParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1TradingInquireDailyCcldResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1TradingInquireDailyCcld(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1TradingInquireDailyCcldResponse(rsp)
}

// GetUapiDomesticStockV1TradingInquirePeriodProfitWithResponse request returning *GetUapiDomesticStockV1TradingInquirePeriodProfitResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1TradingInquirePeriodProfitWithResponse(ctx context.Context, params *GetUapiDomesticStockV1TradingInquirePeriodProfitParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1TradingInquirePeriodProfitResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1TradingInquirePeriodProfit(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1TradingInquirePeriodProfitResponse(rsp)
}

// GetUapiDomesticStockV1TradingInquirePeriodTradeProfitWithResponse request returning *GetUapiDomesticStockV1TradingInquirePeriodTradeProfitResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1TradingInquirePeriodTradeProfitWithResponse(ctx context.Context, params *GetUapiDomesticStockV1TradingInquirePeriodTradeProfitParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1TradingInquirePeriodTradeProfitResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1TradingInquirePeriodTradeProfit(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1TradingInquirePeriodTradeProfitResponse(rsp)
}

// GetUapiDomesticStockV1TradingInquirePsblOrderWithResponse request returning *GetUapiDomesticStockV1TradingInquirePsblOrderResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1TradingInquirePsblOrderWithResponse(ctx context.Context, params *GetUapiDomesticStockV1TradingInquirePsblOrderParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1TradingInquirePsblOrderResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1TradingInquirePsblOrder(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1TradingInquirePsblOrderResponse(rsp)
}

// GetUapiDomesticStockV1TradingInquirePsblRvsecnclWithResponse request returning *GetUapiDomesticStockV1TradingInquirePsblRvsecnclResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1TradingInquirePsblRvsecnclWithResponse(ctx context.Context, params *GetUapiDomesticStockV1TradingInquirePsblRvsecnclParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1TradingInquirePsblRvsecnclResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1TradingInquirePsblRvsecncl(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1TradingInquirePsblRvsecnclResponse(rsp)
}

// GetUapiDomesticStockV1TradingInquirePsblSellWithResponse request returning *GetUapiDomesticStockV1TradingInquirePsblSellResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1TradingInquirePsblSellWithResponse(ctx context.Context, params *GetUapiDomesticStockV1TradingInquirePsblSellParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1TradingInquirePsblSellResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1TradingInquirePsblSell(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1TradingInquirePsblSellResponse(rsp)
}

// PostUapiDomesticStockV1TradingOrderCashWithBodyWithResponse request with arbitrary body returning *PostUapiDomesticStockV1TradingOrderCashResponse
func (c *ClientWithResponses) PostUapiDomesticStockV1TradingOrderCashWithBodyWithResponse(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderCashParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiDomesticStockV1TradingOrderCashResponse, error) {
	rsp, err := c.PostUapiDomesticStockV1TradingOrderCashWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiDomesticStockV1TradingOrderCashResponse(rsp)
}

func (c *ClientWithResponses) PostUapiDomesticStockV1TradingOrderCashWithResponse(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderCashParams, body PostUapiDomesticStockV1TradingOrderCashJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiDomesticStockV1TradingOrderCashResponse, error) {
	rsp, err := c.PostUapiDomesticStockV1TradingOrderCash(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiDomesticStockV1TradingOrderCashResponse(rsp)
}

// PostUapiDomesticStockV1TradingOrderCreditWithBodyWithResponse request with arbitrary body returning *PostUapiDomesticStockV1TradingOrderCreditResponse
func (c *ClientWithResponses) PostUapiDomesticStockV1TradingOrderCreditWithBodyWithResponse(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderCreditParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiDomesticStockV1TradingOrderCreditResponse, error) {
	rsp, err := c.PostUapiDomesticStockV1TradingOrderCreditWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiDomesticStockV1TradingOrderCreditResponse(rsp)
}

func (c *ClientWithResponses) PostUapiDomesticStockV1TradingOrderCreditWithResponse(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderCreditParams, body PostUapiDomesticStockV1TradingOrderCreditJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiDomesticStockV1TradingOrderCreditResponse, error) {
	rsp, err := c.PostUapiDomesticStockV1TradingOrderCredit(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiDomesticStockV1TradingOrderCreditResponse(rsp)
}

// PostUapiDomesticStockV1TradingOrderResvWithBodyWithResponse request with arbitrary body returning *PostUapiDomesticStockV1TradingOrderResvResponse
func (c *ClientWithResponses) PostUapiDomesticStockV1TradingOrderResvWithBodyWithResponse(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderResvParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiDomesticStockV1TradingOrderResvResponse, error) {
	rsp, err := c.PostUapiDomesticStockV1TradingOrderResvWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiDomesticStockV1TradingOrderResvResponse(rsp)
}

func (c *ClientWithResponses) PostUapiDomesticStockV1TradingOrderResvWithResponse(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderResvParams, body PostUapiDomesticStockV1TradingOrderResvJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiDomesticStockV1TradingOrderResvResponse, error) {
	rsp, err := c.PostUapiDomesticStockV1TradingOrderResv(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiDomesticStockV1TradingOrderResvResponse(rsp)
}

// GetUapiDomesticStockV1TradingOrderResvCcnlWithResponse request returning *GetUapiDomesticStockV1TradingOrderResvCcnlResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1TradingOrderResvCcnlWithResponse(ctx context.Context, params *GetUapiDomesticStockV1TradingOrderResvCcnlParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1TradingOrderResvCcnlResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1TradingOrderResvCcnl(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1TradingOrderResvCcnlResponse(rsp)
}

// PostUapiDomesticStockV1TradingOrderResvRvsecnclWithBodyWithResponse request with arbitrary body returning *PostUapiDomesticStockV1TradingOrderResvRvsecnclResponse
func (c *ClientWithResponses) PostUapiDomesticStockV1TradingOrderResvRvsecnclWithBodyWithResponse(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderResvRvsecnclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiDomesticStockV1TradingOrderResvRvsecnclResponse, error) {
	rsp, err := c.PostUapiDomesticStockV1TradingOrderResvRvsecnclWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiDomesticStockV1TradingOrderResvRvsecnclResponse(rsp)
}

func (c *ClientWithResponses) PostUapiDomesticStockV1TradingOrderResvRvsecnclWithResponse(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderResvRvsecnclParams, body PostUapiDomesticStockV1TradingOrderResvRvsecnclJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiDomesticStockV1TradingOrderResvRvsecnclResponse, error) {
	rsp, err := c.PostUapiDomesticStockV1TradingOrderResvRvsecncl(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiDomesticStockV1TradingOrderResvRvsecnclResponse(rsp)
}

// PostUapiDomesticStockV1TradingOrderRvsecnclWithBodyWithResponse request with arbitrary body returning *PostUapiDomesticStockV1TradingOrderRvsecnclResponse
func (c *ClientWithResponses) PostUapiDomesticStockV1TradingOrderRvsecnclWithBodyWithResponse(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderRvsecnclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiDomesticStockV1TradingOrderRvsecnclResponse, error) {
	rsp, err := c.PostUapiDomesticStockV1TradingOrderRvsecnclWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiDomesticStockV1TradingOrderRvsecnclResponse(rsp)
}

func (c *ClientWithResponses) PostUapiDomesticStockV1TradingOrderRvsecnclWithResponse(ctx context.Context, params *PostUapiDomesticStockV1TradingOrderRvsecnclParams, body PostUapiDomesticStockV1TradingOrderRvsecnclJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiDomesticStockV1TradingOrderRvsecnclResponse, error) {
	rsp, err := c.PostUapiDomesticStockV1TradingOrderRvsecncl(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiDomesticStockV1TradingOrderRvsecnclResponse(rsp)
}

// GetUapiDomesticStockV1TradingPensionInquireBalanceWithResponse request returning *GetUapiDomesticStockV1TradingPensionInquireBalanceResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1TradingPensionInquireBalanceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1TradingPensionInquireBalanceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1TradingPensionInquireBalanceResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1TradingPensionInquireBalance(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1TradingPensionInquireBalanceResponse(rsp)
}

// GetUapiDomesticStockV1TradingPensionInquireDailyCcldWithResponse request returning *GetUapiDomesticStockV1TradingPensionInquireDailyCcldResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1TradingPensionInquireDailyCcldWithResponse(ctx context.Context, params *GetUapiDomesticStockV1TradingPensionInquireDailyCcldParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1TradingPensionInquireDailyCcldResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1TradingPensionInquireDailyCcld(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1TradingPensionInquireDailyCcldResponse(rsp)
}

// GetUapiDomesticStockV1TradingPensionInquireDepositWithResponse request returning *GetUapiDomesticStockV1TradingPensionInquireDepositResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1TradingPensionInquireDepositWithResponse(ctx context.Context, params *GetUapiDomesticStockV1TradingPensionInquireDepositParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1TradingPensionInquireDepositResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1TradingPensionInquireDeposit(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1TradingPensionInquireDepositResponse(rsp)
}

// GetUapiDomesticStockV1TradingPensionInquirePresentBalanceWithResponse request returning *GetUapiDomesticStockV1TradingPensionInquirePresentBalanceResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1TradingPensionInquirePresentBalanceWithResponse(ctx context.Context, params *GetUapiDomesticStockV1TradingPensionInquirePresentBalanceParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1TradingPensionInquirePresentBalanceResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1TradingPensionInquirePresentBalance(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1TradingPensionInquirePresentBalanceResponse(rsp)
}

// GetUapiDomesticStockV1TradingPensionInquirePsblOrderWithResponse request returning *GetUapiDomesticStockV1TradingPensionInquirePsblOrderResponse
func (c *ClientWithResponses) GetUapiDomesticStockV1TradingPensionInquirePsblOrderWithResponse(ctx context.Context, params *GetUapiDomesticStockV1TradingPensionInquirePsblOrderParams, reqEditors ...RequestEditorFn) (*GetUapiDomesticStockV1TradingPensionInquirePsblOrderResponse, error) {
	rsp, err := c.GetUapiDomesticStockV1TradingPensionInquirePsblOrder(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiDomesticStockV1TradingPensionInquirePsblOrderResponse(rsp)
}

// GetUapiElwV1QuotationsCompareStocksWithResponse request returning *GetUapiElwV1QuotationsCompareStocksResponse
func (c *ClientWithResponses) GetUapiElwV1QuotationsCompareStocksWithResponse(ctx context.Context, params *GetUapiElwV1QuotationsCompareStocksParams, reqEditors ...RequestEditorFn) (*GetUapiElwV1QuotationsCompareStocksResponse, error) {
	rsp, err := c.GetUapiElwV1QuotationsCompareStocks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiElwV1QuotationsCompareStocksResponse(rsp)
}

// GetUapiElwV1QuotationsCondSearchWithResponse request returning *GetUapiElwV1QuotationsCondSearchResponse
func (c *ClientWithResponses) GetUapiElwV1QuotationsCondSearchWithResponse(ctx context.Context, params *GetUapiElwV1QuotationsCondSearchParams, reqEditors ...RequestEditorFn) (*GetUapiElwV1QuotationsCondSearchResponse, error) {
	rsp, err := c.GetUapiElwV1QuotationsCondSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiElwV1QuotationsCondSearchResponse(rsp)
}

// GetUapiElwV1QuotationsExpirationStocksWithResponse request returning *GetUapiElwV1QuotationsExpirationStocksResponse
func (c *ClientWithResponses) GetUapiElwV1QuotationsExpirationStocksWithResponse(ctx context.Context, params *GetUapiElwV1QuotationsExpirationStocksParams, reqEditors ...RequestEditorFn) (*GetUapiElwV1QuotationsExpirationStocksResponse, error) {
	rsp, err := c.GetUapiElwV1QuotationsExpirationStocks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiElwV1QuotationsExpirationStocksResponse(rsp)
}

// GetUapiElwV1QuotationsIndicatorTrendCcnlWithResponse request returning *GetUapiElwV1QuotationsIndicatorTrendCcnlResponse
func (c *ClientWithResponses) GetUapiElwV1QuotationsIndicatorTrendCcnlWithResponse(ctx context.Context, params *GetUapiElwV1QuotationsIndicatorTrendCcnlParams, reqEditors ...RequestEditorFn) (*GetUapiElwV1QuotationsIndicatorTrendCcnlResponse, error) {
	rsp, err := c.GetUapiElwV1QuotationsIndicatorTrendCcnl(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiElwV1QuotationsIndicatorTrendCcnlResponse(rsp)
}

// GetUapiElwV1QuotationsIndicatorTrendDailyWithResponse request returning *GetUapiElwV1QuotationsIndicatorTrendDailyResponse
func (c *ClientWithResponses) GetUapiElwV1QuotationsIndicatorTrendDailyWithResponse(ctx context.Context, params *GetUapiElwV1QuotationsIndicatorTrendDailyParams, reqEditors ...RequestEditorFn) (*GetUapiElwV1QuotationsIndicatorTrendDailyResponse, error) {
	rsp, err := c.GetUapiElwV1QuotationsIndicatorTrendDaily(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiElwV1QuotationsIndicatorTrendDailyResponse(rsp)
}

// GetUapiElwV1QuotationsIndicatorTrendMinuteWithResponse request returning *GetUapiElwV1QuotationsIndicatorTrendMinuteResponse
func (c *ClientWithResponses) GetUapiElwV1QuotationsIndicatorTrendMinuteWithResponse(ctx context.Context, params *GetUapiElwV1QuotationsIndicatorTrendMinuteParams, reqEditors ...RequestEditorFn) (*GetUapiElwV1QuotationsIndicatorTrendMinuteResponse, error) {
	rsp, err := c.GetUapiElwV1QuotationsIndicatorTrendMinute(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiElwV1QuotationsIndicatorTrendMinuteResponse(rsp)
}

// GetUapiElwV1QuotationsLpTradeTrendWithResponse request returning *GetUapiElwV1QuotationsLpTradeTrendResponse
func (c *ClientWithResponses) GetUapiElwV1QuotationsLpTradeTrendWithResponse(ctx context.Context, params *GetUapiElwV1QuotationsLpTradeTrendParams, reqEditors ...RequestEditorFn) (*GetUapiElwV1QuotationsLpTradeTrendResponse, error) {
	rsp, err := c.GetUapiElwV1QuotationsLpTradeTrend(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiElwV1QuotationsLpTradeTrendResponse(rsp)
}

// GetUapiElwV1QuotationsNewlyListedWithResponse request returning *GetUapiElwV1QuotationsNewlyListedResponse
func (c *ClientWithResponses) GetUapiElwV1QuotationsNewlyListedWithResponse(ctx context.Context, params *GetUapiElwV1QuotationsNewlyListedParams, reqEditors ...RequestEditorFn) (*GetUapiElwV1QuotationsNewlyListedResponse, error) {
	rsp, err := c.GetUapiElwV1QuotationsNewlyListed(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiElwV1QuotationsNewlyListedResponse(rsp)
}

// GetUapiElwV1QuotationsSensitivityTrendCcnlWithResponse request returning *GetUapiElwV1QuotationsSensitivityTrendCcnlResponse
func (c *ClientWithResponses) GetUapiElwV1QuotationsSensitivityTrendCcnlWithResponse(ctx context.Context, params *GetUapiElwV1QuotationsSensitivityTrendCcnlParams, reqEditors ...RequestEditorFn) (*GetUapiElwV1QuotationsSensitivityTrendCcnlResponse, error) {
	rsp, err := c.GetUapiElwV1QuotationsSensitivityTrendCcnl(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiElwV1QuotationsSensitivityTrendCcnlResponse(rsp)
}

// GetUapiElwV1QuotationsSensitivityTrendDailyWithResponse request returning *GetUapiElwV1QuotationsSensitivityTrendDailyResponse
func (c *ClientWithResponses) GetUapiElwV1QuotationsSensitivityTrendDailyWithResponse(ctx context.Context, params *GetUapiElwV1QuotationsSensitivityTrendDailyParams, reqEditors ...RequestEditorFn) (*GetUapiElwV1QuotationsSensitivityTrendDailyResponse, error) {
	rsp, err := c.GetUapiElwV1QuotationsSensitivityTrendDaily(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiElwV1QuotationsSensitivityTrendDailyResponse(rsp)
}

// GetUapiElwV1QuotationsUdrlAssetListWithResponse request returning *GetUapiElwV1QuotationsUdrlAssetListResponse
func (c *ClientWithResponses) GetUapiElwV1QuotationsUdrlAssetListWithResponse(ctx context.Context, params *GetUapiElwV1QuotationsUdrlAssetListParams, reqEditors ...RequestEditorFn) (*GetUapiElwV1QuotationsUdrlAssetListResponse, error) {
	rsp, err := c.GetUapiElwV1QuotationsUdrlAssetList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiElwV1QuotationsUdrlAssetListResponse(rsp)
}

// GetUapiElwV1QuotationsVolatilityTrendCcnlWithResponse request returning *GetUapiElwV1QuotationsVolatilityTrendCcnlResponse
func (c *ClientWithResponses) GetUapiElwV1QuotationsVolatilityTrendCcnlWithResponse(ctx context.Context, params *GetUapiElwV1QuotationsVolatilityTrendCcnlParams, reqEditors ...RequestEditorFn) (*GetUapiElwV1QuotationsVolatilityTrendCcnlResponse, error) {
	rsp, err := c.GetUapiElwV1QuotationsVolatilityTrendCcnl(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiElwV1QuotationsVolatilityTrendCcnlResponse(rsp)
}

// GetUapiElwV1QuotationsVolatilityTrendDailyWithResponse request returning *GetUapiElwV1QuotationsVolatilityTrendDailyResponse
func (c *ClientWithResponses) GetUapiElwV1QuotationsVolatilityTrendDailyWithResponse(ctx context.Context, params *GetUapiElwV1QuotationsVolatilityTrendDailyParams, reqEditors ...RequestEditorFn) (*GetUapiElwV1QuotationsVolatilityTrendDailyResponse, error) {
	rsp, err := c.GetUapiElwV1QuotationsVolatilityTrendDaily(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiElwV1QuotationsVolatilityTrendDailyResponse(rsp)
}

// GetUapiElwV1QuotationsVolatilityTrendMinuteWithResponse request returning *GetUapiElwV1QuotationsVolatilityTrendMinuteResponse
func (c *ClientWithResponses) GetUapiElwV1QuotationsVolatilityTrendMinuteWithResponse(ctx context.Context, params *GetUapiElwV1QuotationsVolatilityTrendMinuteParams, reqEditors ...RequestEditorFn) (*GetUapiElwV1QuotationsVolatilityTrendMinuteResponse, error) {
	rsp, err := c.GetUapiElwV1QuotationsVolatilityTrendMinute(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiElwV1QuotationsVolatilityTrendMinuteResponse(rsp)
}

// GetUapiElwV1QuotationsVolatilityTrendTickWithResponse request returning *GetUapiElwV1QuotationsVolatilityTrendTickResponse
func (c *ClientWithResponses) GetUapiElwV1QuotationsVolatilityTrendTickWithResponse(ctx context.Context, params *GetUapiElwV1QuotationsVolatilityTrendTickParams, reqEditors ...RequestEditorFn) (*GetUapiElwV1QuotationsVolatilityTrendTickResponse, error) {
	rsp, err := c.GetUapiElwV1QuotationsVolatilityTrendTick(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiElwV1QuotationsVolatilityTrendTickResponse(rsp)
}

// GetUapiElwV1RankingUpdownRateWithResponse request returning *GetUapiElwV1RankingUpdownRateResponse
func (c *ClientWithResponses) GetUapiElwV1RankingUpdownRateWithResponse(ctx context.Context, params *GetUapiElwV1RankingUpdownRateParams, reqEditors ...RequestEditorFn) (*GetUapiElwV1RankingUpdownRateResponse, error) {
	rsp, err := c.GetUapiElwV1RankingUpdownRate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiElwV1RankingUpdownRateResponse(rsp)
}

// GetUapiEtfetnV1QuotationsInquireComponentStockPriceWithResponse request returning *GetUapiEtfetnV1QuotationsInquireComponentStockPriceResponse
func (c *ClientWithResponses) GetUapiEtfetnV1QuotationsInquireComponentStockPriceWithResponse(ctx context.Context, params *GetUapiEtfetnV1QuotationsInquireComponentStockPriceParams, reqEditors ...RequestEditorFn) (*GetUapiEtfetnV1QuotationsInquireComponentStockPriceResponse, error) {
	rsp, err := c.GetUapiEtfetnV1QuotationsInquireComponentStockPrice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiEtfetnV1QuotationsInquireComponentStockPriceResponse(rsp)
}

// GetUapiEtfetnV1QuotationsInquirePriceWithResponse request returning *GetUapiEtfetnV1QuotationsInquirePriceResponse
func (c *ClientWithResponses) GetUapiEtfetnV1QuotationsInquirePriceWithResponse(ctx context.Context, params *GetUapiEtfetnV1QuotationsInquirePriceParams, reqEditors ...RequestEditorFn) (*GetUapiEtfetnV1QuotationsInquirePriceResponse, error) {
	rsp, err := c.GetUapiEtfetnV1QuotationsInquirePrice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiEtfetnV1QuotationsInquirePriceResponse(rsp)
}

// GetUapiEtfetnV1QuotationsNavComparisonDailyTrendWithResponse request returning *GetUapiEtfetnV1QuotationsNavComparisonDailyTrendResponse
func (c *ClientWithResponses) GetUapiEtfetnV1QuotationsNavComparisonDailyTrendWithResponse(ctx context.Context, params *GetUapiEtfetnV1QuotationsNavComparisonDailyTrendParams, reqEditors ...RequestEditorFn) (*GetUapiEtfetnV1QuotationsNavComparisonDailyTrendResponse, error) {
	rsp, err := c.GetUapiEtfetnV1QuotationsNavComparisonDailyTrend(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiEtfetnV1QuotationsNavComparisonDailyTrendResponse(rsp)
}

// GetUapiEtfetnV1QuotationsNavComparisonTimeTrendWithResponse request returning *GetUapiEtfetnV1QuotationsNavComparisonTimeTrendResponse
func (c *ClientWithResponses) GetUapiEtfetnV1QuotationsNavComparisonTimeTrendWithResponse(ctx context.Context, params *GetUapiEtfetnV1QuotationsNavComparisonTimeTrendParams, reqEditors ...RequestEditorFn) (*GetUapiEtfetnV1QuotationsNavComparisonTimeTrendResponse, error) {
	rsp, err := c.GetUapiEtfetnV1QuotationsNavComparisonTimeTrend(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiEtfetnV1QuotationsNavComparisonTimeTrendResponse(rsp)
}

// GetUapiEtfetnV1QuotationsNavComparisonTrendWithResponse request returning *GetUapiEtfetnV1QuotationsNavComparisonTrendResponse
func (c *ClientWithResponses) GetUapiEtfetnV1QuotationsNavComparisonTrendWithResponse(ctx context.Context, params *GetUapiEtfetnV1QuotationsNavComparisonTrendParams, reqEditors ...RequestEditorFn) (*GetUapiEtfetnV1QuotationsNavComparisonTrendResponse, error) {
	rsp, err := c.GetUapiEtfetnV1QuotationsNavComparisonTrend(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiEtfetnV1QuotationsNavComparisonTrendResponse(rsp)
}

// PostUapiHashkeyWithBodyWithResponse request with arbitrary body returning *PostUapiHashkeyResponse
func (c *ClientWithResponses) PostUapiHashkeyWithBodyWithResponse(ctx context.Context, params *PostUapiHashkeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiHashkeyResponse, error) {
	rsp, err := c.PostUapiHashkeyWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiHashkeyResponse(rsp)
}

func (c *ClientWithResponses) PostUapiHashkeyWithResponse(ctx context.Context, params *PostUapiHashkeyParams, body PostUapiHashkeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiHashkeyResponse, error) {
	rsp, err := c.PostUapiHashkey(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiHashkeyResponse(rsp)
}

// GetUapiOverseasFutureoptionV1QuotationsDailyCcnlWithResponse request returning *GetUapiOverseasFutureoptionV1QuotationsDailyCcnlResponse
func (c *ClientWithResponses) GetUapiOverseasFutureoptionV1QuotationsDailyCcnlWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsDailyCcnlParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1QuotationsDailyCcnlResponse, error) {
	rsp, err := c.GetUapiOverseasFutureoptionV1QuotationsDailyCcnl(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasFutureoptionV1QuotationsDailyCcnlResponse(rsp)
}

// GetUapiOverseasFutureoptionV1QuotationsInquireAskingPriceWithResponse request returning *GetUapiOverseasFutureoptionV1QuotationsInquireAskingPriceResponse
func (c *ClientWithResponses) GetUapiOverseasFutureoptionV1QuotationsInquireAskingPriceWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsInquireAskingPriceParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1QuotationsInquireAskingPriceResponse, error) {
	rsp, err := c.GetUapiOverseasFutureoptionV1QuotationsInquireAskingPrice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasFutureoptionV1QuotationsInquireAskingPriceResponse(rsp)
}

// GetUapiOverseasFutureoptionV1QuotationsInquirePriceWithResponse request returning *GetUapiOverseasFutureoptionV1QuotationsInquirePriceResponse
func (c *ClientWithResponses) GetUapiOverseasFutureoptionV1QuotationsInquirePriceWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsInquirePriceParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1QuotationsInquirePriceResponse, error) {
	rsp, err := c.GetUapiOverseasFutureoptionV1QuotationsInquirePrice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasFutureoptionV1QuotationsInquirePriceResponse(rsp)
}

// GetUapiOverseasFutureoptionV1QuotationsInquireTimeFuturechartpriceWithResponse request returning *GetUapiOverseasFutureoptionV1QuotationsInquireTimeFuturechartpriceResponse
func (c *ClientWithResponses) GetUapiOverseasFutureoptionV1QuotationsInquireTimeFuturechartpriceWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsInquireTimeFuturechartpriceParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1QuotationsInquireTimeFuturechartpriceResponse, error) {
	rsp, err := c.GetUapiOverseasFutureoptionV1QuotationsInquireTimeFuturechartprice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasFutureoptionV1QuotationsInquireTimeFuturechartpriceResponse(rsp)
}

// GetUapiOverseasFutureoptionV1QuotationsInvestorUnpdTrendWithResponse request returning *GetUapiOverseasFutureoptionV1QuotationsInvestorUnpdTrendResponse
func (c *ClientWithResponses) GetUapiOverseasFutureoptionV1QuotationsInvestorUnpdTrendWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsInvestorUnpdTrendParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1QuotationsInvestorUnpdTrendResponse, error) {
	rsp, err := c.GetUapiOverseasFutureoptionV1QuotationsInvestorUnpdTrend(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasFutureoptionV1QuotationsInvestorUnpdTrendResponse(rsp)
}

// GetUapiOverseasFutureoptionV1QuotationsMarketTimeWithResponse request returning *GetUapiOverseasFutureoptionV1QuotationsMarketTimeResponse
func (c *ClientWithResponses) GetUapiOverseasFutureoptionV1QuotationsMarketTimeWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsMarketTimeParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1QuotationsMarketTimeResponse, error) {
	rsp, err := c.GetUapiOverseasFutureoptionV1QuotationsMarketTime(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasFutureoptionV1QuotationsMarketTimeResponse(rsp)
}

// GetUapiOverseasFutureoptionV1QuotationsMonthlyCcnlWithResponse request returning *GetUapiOverseasFutureoptionV1QuotationsMonthlyCcnlResponse
func (c *ClientWithResponses) GetUapiOverseasFutureoptionV1QuotationsMonthlyCcnlWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsMonthlyCcnlParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1QuotationsMonthlyCcnlResponse, error) {
	rsp, err := c.GetUapiOverseasFutureoptionV1QuotationsMonthlyCcnl(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasFutureoptionV1QuotationsMonthlyCcnlResponse(rsp)
}

// GetUapiOverseasFutureoptionV1QuotationsOptAskingPriceWithResponse request returning *GetUapiOverseasFutureoptionV1QuotationsOptAskingPriceResponse
func (c *ClientWithResponses) GetUapiOverseasFutureoptionV1QuotationsOptAskingPriceWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsOptAskingPriceParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1QuotationsOptAskingPriceResponse, error) {
	rsp, err := c.GetUapiOverseasFutureoptionV1QuotationsOptAskingPrice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasFutureoptionV1QuotationsOptAskingPriceResponse(rsp)
}

// GetUapiOverseasFutureoptionV1QuotationsSearchContractDetailWithResponse request returning *GetUapiOverseasFutureoptionV1QuotationsSearchContractDetailResponse
func (c *ClientWithResponses) GetUapiOverseasFutureoptionV1QuotationsSearchContractDetailWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsSearchContractDetailParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1QuotationsSearchContractDetailResponse, error) {
	rsp, err := c.GetUapiOverseasFutureoptionV1QuotationsSearchContractDetail(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasFutureoptionV1QuotationsSearchContractDetailResponse(rsp)
}

// GetUapiOverseasFutureoptionV1QuotationsStockDetailWithResponse request returning *GetUapiOverseasFutureoptionV1QuotationsStockDetailResponse
func (c *ClientWithResponses) GetUapiOverseasFutureoptionV1QuotationsStockDetailWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsStockDetailParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1QuotationsStockDetailResponse, error) {
	rsp, err := c.GetUapiOverseasFutureoptionV1QuotationsStockDetail(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasFutureoptionV1QuotationsStockDetailResponse(rsp)
}

// GetUapiOverseasFutureoptionV1QuotationsTickCcnlWithResponse request returning *GetUapiOverseasFutureoptionV1QuotationsTickCcnlResponse
func (c *ClientWithResponses) GetUapiOverseasFutureoptionV1QuotationsTickCcnlWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsTickCcnlParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1QuotationsTickCcnlResponse, error) {
	rsp, err := c.GetUapiOverseasFutureoptionV1QuotationsTickCcnl(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasFutureoptionV1QuotationsTickCcnlResponse(rsp)
}

// GetUapiOverseasFutureoptionV1QuotationsWeeklyCcnlWithResponse request returning *GetUapiOverseasFutureoptionV1QuotationsWeeklyCcnlResponse
func (c *ClientWithResponses) GetUapiOverseasFutureoptionV1QuotationsWeeklyCcnlWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1QuotationsWeeklyCcnlParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1QuotationsWeeklyCcnlResponse, error) {
	rsp, err := c.GetUapiOverseasFutureoptionV1QuotationsWeeklyCcnl(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasFutureoptionV1QuotationsWeeklyCcnlResponse(rsp)
}

// GetUapiOverseasFutureoptionV1TradingInquireCcldWithResponse request returning *GetUapiOverseasFutureoptionV1TradingInquireCcldResponse
func (c *ClientWithResponses) GetUapiOverseasFutureoptionV1TradingInquireCcldWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingInquireCcldParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1TradingInquireCcldResponse, error) {
	rsp, err := c.GetUapiOverseasFutureoptionV1TradingInquireCcld(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasFutureoptionV1TradingInquireCcldResponse(rsp)
}

// GetUapiOverseasFutureoptionV1TradingInquireDailyCcldWithResponse request returning *GetUapiOverseasFutureoptionV1TradingInquireDailyCcldResponse
func (c *ClientWithResponses) GetUapiOverseasFutureoptionV1TradingInquireDailyCcldWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingInquireDailyCcldParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1TradingInquireDailyCcldResponse, error) {
	rsp, err := c.GetUapiOverseasFutureoptionV1TradingInquireDailyCcld(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasFutureoptionV1TradingInquireDailyCcldResponse(rsp)
}

// GetUapiOverseasFutureoptionV1TradingInquireDailyOrderWithResponse request returning *GetUapiOverseasFutureoptionV1TradingInquireDailyOrderResponse
func (c *ClientWithResponses) GetUapiOverseasFutureoptionV1TradingInquireDailyOrderWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingInquireDailyOrderParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1TradingInquireDailyOrderResponse, error) {
	rsp, err := c.GetUapiOverseasFutureoptionV1TradingInquireDailyOrder(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasFutureoptionV1TradingInquireDailyOrderResponse(rsp)
}

// GetUapiOverseasFutureoptionV1TradingInquireDepositWithResponse request returning *GetUapiOverseasFutureoptionV1TradingInquireDepositResponse
func (c *ClientWithResponses) GetUapiOverseasFutureoptionV1TradingInquireDepositWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingInquireDepositParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1TradingInquireDepositResponse, error) {
	rsp, err := c.GetUapiOverseasFutureoptionV1TradingInquireDeposit(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasFutureoptionV1TradingInquireDepositResponse(rsp)
}

// GetUapiOverseasFutureoptionV1TradingInquirePeriodCcldWithResponse request returning *GetUapiOverseasFutureoptionV1TradingInquirePeriodCcldResponse
func (c *ClientWithResponses) GetUapiOverseasFutureoptionV1TradingInquirePeriodCcldWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingInquirePeriodCcldParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1TradingInquirePeriodCcldResponse, error) {
	rsp, err := c.GetUapiOverseasFutureoptionV1TradingInquirePeriodCcld(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasFutureoptionV1TradingInquirePeriodCcldResponse(rsp)
}

// GetUapiOverseasFutureoptionV1TradingInquirePeriodTransWithResponse request returning *GetUapiOverseasFutureoptionV1TradingInquirePeriodTransResponse
func (c *ClientWithResponses) GetUapiOverseasFutureoptionV1TradingInquirePeriodTransWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingInquirePeriodTransParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1TradingInquirePeriodTransResponse, error) {
	rsp, err := c.GetUapiOverseasFutureoptionV1TradingInquirePeriodTrans(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasFutureoptionV1TradingInquirePeriodTransResponse(rsp)
}

// GetUapiOverseasFutureoptionV1TradingInquirePsamountWithResponse request returning *GetUapiOverseasFutureoptionV1TradingInquirePsamountResponse
func (c *ClientWithResponses) GetUapiOverseasFutureoptionV1TradingInquirePsamountWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingInquirePsamountParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1TradingInquirePsamountResponse, error) {
	rsp, err := c.GetUapiOverseasFutureoptionV1TradingInquirePsamount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasFutureoptionV1TradingInquirePsamountResponse(rsp)
}

// GetUapiOverseasFutureoptionV1TradingInquireUnpdWithResponse request returning *GetUapiOverseasFutureoptionV1TradingInquireUnpdResponse
func (c *ClientWithResponses) GetUapiOverseasFutureoptionV1TradingInquireUnpdWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingInquireUnpdParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1TradingInquireUnpdResponse, error) {
	rsp, err := c.GetUapiOverseasFutureoptionV1TradingInquireUnpd(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasFutureoptionV1TradingInquireUnpdResponse(rsp)
}

// GetUapiOverseasFutureoptionV1TradingMarginDetailWithResponse request returning *GetUapiOverseasFutureoptionV1TradingMarginDetailResponse
func (c *ClientWithResponses) GetUapiOverseasFutureoptionV1TradingMarginDetailWithResponse(ctx context.Context, params *GetUapiOverseasFutureoptionV1TradingMarginDetailParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasFutureoptionV1TradingMarginDetailResponse, error) {
	rsp, err := c.GetUapiOverseasFutureoptionV1TradingMarginDetail(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasFutureoptionV1TradingMarginDetailResponse(rsp)
}

// PostUapiOverseasFutureoptionV1TradingOrderWithBodyWithResponse request with arbitrary body returning *PostUapiOverseasFutureoptionV1TradingOrderResponse
func (c *ClientWithResponses) PostUapiOverseasFutureoptionV1TradingOrderWithBodyWithResponse(ctx context.Context, params *PostUapiOverseasFutureoptionV1TradingOrderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiOverseasFutureoptionV1TradingOrderResponse, error) {
	rsp, err := c.PostUapiOverseasFutureoptionV1TradingOrderWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiOverseasFutureoptionV1TradingOrderResponse(rsp)
}

func (c *ClientWithResponses) PostUapiOverseasFutureoptionV1TradingOrderWithResponse(ctx context.Context, params *PostUapiOverseasFutureoptionV1TradingOrderParams, body PostUapiOverseasFutureoptionV1TradingOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiOverseasFutureoptionV1TradingOrderResponse, error) {
	rsp, err := c.PostUapiOverseasFutureoptionV1TradingOrder(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiOverseasFutureoptionV1TradingOrderResponse(rsp)
}

// PostUapiOverseasFutureoptionV1TradingOrderRvsecnclWithBodyWithResponse request with arbitrary body returning *PostUapiOverseasFutureoptionV1TradingOrderRvsecnclResponse
func (c *ClientWithResponses) PostUapiOverseasFutureoptionV1TradingOrderRvsecnclWithBodyWithResponse(ctx context.Context, params *PostUapiOverseasFutureoptionV1TradingOrderRvsecnclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiOverseasFutureoptionV1TradingOrderRvsecnclResponse, error) {
	rsp, err := c.PostUapiOverseasFutureoptionV1TradingOrderRvsecnclWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiOverseasFutureoptionV1TradingOrderRvsecnclResponse(rsp)
}

func (c *ClientWithResponses) PostUapiOverseasFutureoptionV1TradingOrderRvsecnclWithResponse(ctx context.Context, params *PostUapiOverseasFutureoptionV1TradingOrderRvsecnclParams, body PostUapiOverseasFutureoptionV1TradingOrderRvsecnclJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiOverseasFutureoptionV1TradingOrderRvsecnclResponse, error) {
	rsp, err := c.PostUapiOverseasFutureoptionV1TradingOrderRvsecncl(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiOverseasFutureoptionV1TradingOrderRvsecnclResponse(rsp)
}

// GetUapiOverseasPriceV1QuotationsBrknewsTitleWithResponse request returning *GetUapiOverseasPriceV1QuotationsBrknewsTitleResponse
func (c *ClientWithResponses) GetUapiOverseasPriceV1QuotationsBrknewsTitleWithResponse(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsBrknewsTitleParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasPriceV1QuotationsBrknewsTitleResponse, error) {
	rsp, err := c.GetUapiOverseasPriceV1QuotationsBrknewsTitle(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasPriceV1QuotationsBrknewsTitleResponse(rsp)
}

// GetUapiOverseasPriceV1QuotationsColableByCompanyWithResponse request returning *GetUapiOverseasPriceV1QuotationsColableByCompanyResponse
func (c *ClientWithResponses) GetUapiOverseasPriceV1QuotationsColableByCompanyWithResponse(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsColableByCompanyParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasPriceV1QuotationsColableByCompanyResponse, error) {
	rsp, err := c.GetUapiOverseasPriceV1QuotationsColableByCompany(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasPriceV1QuotationsColableByCompanyResponse(rsp)
}

// GetUapiOverseasPriceV1QuotationsDailypriceWithResponse request returning *GetUapiOverseasPriceV1QuotationsDailypriceResponse
func (c *ClientWithResponses) GetUapiOverseasPriceV1QuotationsDailypriceWithResponse(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsDailypriceParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasPriceV1QuotationsDailypriceResponse, error) {
	rsp, err := c.GetUapiOverseasPriceV1QuotationsDailyprice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasPriceV1QuotationsDailypriceResponse(rsp)
}

// GetUapiOverseasPriceV1QuotationsInquireAskingPriceWithResponse request returning *GetUapiOverseasPriceV1QuotationsInquireAskingPriceResponse
func (c *ClientWithResponses) GetUapiOverseasPriceV1QuotationsInquireAskingPriceWithResponse(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsInquireAskingPriceParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasPriceV1QuotationsInquireAskingPriceResponse, error) {
	rsp, err := c.GetUapiOverseasPriceV1QuotationsInquireAskingPrice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasPriceV1QuotationsInquireAskingPriceResponse(rsp)
}

// GetUapiOverseasPriceV1QuotationsInquireDailyChartpriceWithResponse request returning *GetUapiOverseasPriceV1QuotationsInquireDailyChartpriceResponse
func (c *ClientWithResponses) GetUapiOverseasPriceV1QuotationsInquireDailyChartpriceWithResponse(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsInquireDailyChartpriceParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasPriceV1QuotationsInquireDailyChartpriceResponse, error) {
	rsp, err := c.GetUapiOverseasPriceV1QuotationsInquireDailyChartprice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasPriceV1QuotationsInquireDailyChartpriceResponse(rsp)
}

// GetUapiOverseasPriceV1QuotationsInquireSearchWithResponse request returning *GetUapiOverseasPriceV1QuotationsInquireSearchResponse
func (c *ClientWithResponses) GetUapiOverseasPriceV1QuotationsInquireSearchWithResponse(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsInquireSearchParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasPriceV1QuotationsInquireSearchResponse, error) {
	rsp, err := c.GetUapiOverseasPriceV1QuotationsInquireSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasPriceV1QuotationsInquireSearchResponse(rsp)
}

// GetUapiOverseasPriceV1QuotationsInquireTimeIndexchartpriceWithResponse request returning *GetUapiOverseasPriceV1QuotationsInquireTimeIndexchartpriceResponse
func (c *ClientWithResponses) GetUapiOverseasPriceV1QuotationsInquireTimeIndexchartpriceWithResponse(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsInquireTimeIndexchartpriceParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasPriceV1QuotationsInquireTimeIndexchartpriceResponse, error) {
	rsp, err := c.GetUapiOverseasPriceV1QuotationsInquireTimeIndexchartprice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasPriceV1QuotationsInquireTimeIndexchartpriceResponse(rsp)
}

// GetUapiOverseasPriceV1QuotationsInquireTimeItemchartpriceWithResponse request returning *GetUapiOverseasPriceV1QuotationsInquireTimeItemchartpriceResponse
func (c *ClientWithResponses) GetUapiOverseasPriceV1QuotationsInquireTimeItemchartpriceWithResponse(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsInquireTimeItemchartpriceParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasPriceV1QuotationsInquireTimeItemchartpriceResponse, error) {
	rsp, err := c.GetUapiOverseasPriceV1QuotationsInquireTimeItemchartprice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasPriceV1QuotationsInquireTimeItemchartpriceResponse(rsp)
}

// GetUapiOverseasPriceV1QuotationsNewsTitleWithResponse request returning *GetUapiOverseasPriceV1QuotationsNewsTitleResponse
func (c *ClientWithResponses) GetUapiOverseasPriceV1QuotationsNewsTitleWithResponse(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsNewsTitleParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasPriceV1QuotationsNewsTitleResponse, error) {
	rsp, err := c.GetUapiOverseasPriceV1QuotationsNewsTitle(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasPriceV1QuotationsNewsTitleResponse(rsp)
}

// GetUapiOverseasPriceV1QuotationsPeriodRightsWithResponse request returning *GetUapiOverseasPriceV1QuotationsPeriodRightsResponse
func (c *ClientWithResponses) GetUapiOverseasPriceV1QuotationsPeriodRightsWithResponse(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsPeriodRightsParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasPriceV1QuotationsPeriodRightsResponse, error) {
	rsp, err := c.GetUapiOverseasPriceV1QuotationsPeriodRights(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasPriceV1QuotationsPeriodRightsResponse(rsp)
}

// GetUapiOverseasPriceV1QuotationsPriceWithResponse request returning *GetUapiOverseasPriceV1QuotationsPriceResponse
func (c *ClientWithResponses) GetUapiOverseasPriceV1QuotationsPriceWithResponse(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsPriceParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasPriceV1QuotationsPriceResponse, error) {
	rsp, err := c.GetUapiOverseasPriceV1QuotationsPrice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasPriceV1QuotationsPriceResponse(rsp)
}

// GetUapiOverseasPriceV1QuotationsPriceDetailWithResponse request returning *GetUapiOverseasPriceV1QuotationsPriceDetailResponse
func (c *ClientWithResponses) GetUapiOverseasPriceV1QuotationsPriceDetailWithResponse(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsPriceDetailParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasPriceV1QuotationsPriceDetailResponse, error) {
	rsp, err := c.GetUapiOverseasPriceV1QuotationsPriceDetail(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasPriceV1QuotationsPriceDetailResponse(rsp)
}

// GetUapiOverseasPriceV1QuotationsRightsByIceWithResponse request returning *GetUapiOverseasPriceV1QuotationsRightsByIceResponse
func (c *ClientWithResponses) GetUapiOverseasPriceV1QuotationsRightsByIceWithResponse(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsRightsByIceParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasPriceV1QuotationsRightsByIceResponse, error) {
	rsp, err := c.GetUapiOverseasPriceV1QuotationsRightsByIce(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasPriceV1QuotationsRightsByIceResponse(rsp)
}

// GetUapiOverseasPriceV1QuotationsSearchInfoWithResponse request returning *GetUapiOverseasPriceV1QuotationsSearchInfoResponse
func (c *ClientWithResponses) GetUapiOverseasPriceV1QuotationsSearchInfoWithResponse(ctx context.Context, params *GetUapiOverseasPriceV1QuotationsSearchInfoParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasPriceV1QuotationsSearchInfoResponse, error) {
	rsp, err := c.GetUapiOverseasPriceV1QuotationsSearchInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasPriceV1QuotationsSearchInfoResponse(rsp)
}

// GetUapiOverseasStockV1QuotationsCountriesHolidayWithResponse request returning *GetUapiOverseasStockV1QuotationsCountriesHolidayResponse
func (c *ClientWithResponses) GetUapiOverseasStockV1QuotationsCountriesHolidayWithResponse(ctx context.Context, params *GetUapiOverseasStockV1QuotationsCountriesHolidayParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasStockV1QuotationsCountriesHolidayResponse, error) {
	rsp, err := c.GetUapiOverseasStockV1QuotationsCountriesHoliday(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasStockV1QuotationsCountriesHolidayResponse(rsp)
}

// PostUapiOverseasStockV1TradingDaytimeOrderWithBodyWithResponse request with arbitrary body returning *PostUapiOverseasStockV1TradingDaytimeOrderResponse
func (c *ClientWithResponses) PostUapiOverseasStockV1TradingDaytimeOrderWithBodyWithResponse(ctx context.Context, params *PostUapiOverseasStockV1TradingDaytimeOrderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiOverseasStockV1TradingDaytimeOrderResponse, error) {
	rsp, err := c.PostUapiOverseasStockV1TradingDaytimeOrderWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiOverseasStockV1TradingDaytimeOrderResponse(rsp)
}

func (c *ClientWithResponses) PostUapiOverseasStockV1TradingDaytimeOrderWithResponse(ctx context.Context, params *PostUapiOverseasStockV1TradingDaytimeOrderParams, body PostUapiOverseasStockV1TradingDaytimeOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiOverseasStockV1TradingDaytimeOrderResponse, error) {
	rsp, err := c.PostUapiOverseasStockV1TradingDaytimeOrder(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiOverseasStockV1TradingDaytimeOrderResponse(rsp)
}

// PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclWithBodyWithResponse request with arbitrary body returning *PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclResponse
func (c *ClientWithResponses) PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclWithBodyWithResponse(ctx context.Context, params *PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclResponse, error) {
	rsp, err := c.PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiOverseasStockV1TradingDaytimeOrderRvsecnclResponse(rsp)
}

func (c *ClientWithResponses) PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclWithResponse(ctx context.Context, params *PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclParams, body PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclResponse, error) {
	rsp, err := c.PostUapiOverseasStockV1TradingDaytimeOrderRvsecncl(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiOverseasStockV1TradingDaytimeOrderRvsecnclResponse(rsp)
}

// GetUapiOverseasStockV1TradingForeignMarginWithResponse request returning *GetUapiOverseasStockV1TradingForeignMarginResponse
func (c *ClientWithResponses) GetUapiOverseasStockV1TradingForeignMarginWithResponse(ctx context.Context, params *GetUapiOverseasStockV1TradingForeignMarginParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasStockV1TradingForeignMarginResponse, error) {
	rsp, err := c.GetUapiOverseasStockV1TradingForeignMargin(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasStockV1TradingForeignMarginResponse(rsp)
}

// GetUapiOverseasStockV1TradingInquireBalanceWithResponse request returning *GetUapiOverseasStockV1TradingInquireBalanceResponse
func (c *ClientWithResponses) GetUapiOverseasStockV1TradingInquireBalanceWithResponse(ctx context.Context, params *GetUapiOverseasStockV1TradingInquireBalanceParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasStockV1TradingInquireBalanceResponse, error) {
	rsp, err := c.GetUapiOverseasStockV1TradingInquireBalance(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasStockV1TradingInquireBalanceResponse(rsp)
}

// GetUapiOverseasStockV1TradingInquireCcnlWithResponse request returning *GetUapiOverseasStockV1TradingInquireCcnlResponse
func (c *ClientWithResponses) GetUapiOverseasStockV1TradingInquireCcnlWithResponse(ctx context.Context, params *GetUapiOverseasStockV1TradingInquireCcnlParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasStockV1TradingInquireCcnlResponse, error) {
	rsp, err := c.GetUapiOverseasStockV1TradingInquireCcnl(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasStockV1TradingInquireCcnlResponse(rsp)
}

// GetUapiOverseasStockV1TradingInquireNccsWithResponse request returning *GetUapiOverseasStockV1TradingInquireNccsResponse
func (c *ClientWithResponses) GetUapiOverseasStockV1TradingInquireNccsWithResponse(ctx context.Context, params *GetUapiOverseasStockV1TradingInquireNccsParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasStockV1TradingInquireNccsResponse, error) {
	rsp, err := c.GetUapiOverseasStockV1TradingInquireNccs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasStockV1TradingInquireNccsResponse(rsp)
}

// GetUapiOverseasStockV1TradingInquirePaymtStdrBalanceWithResponse request returning *GetUapiOverseasStockV1TradingInquirePaymtStdrBalanceResponse
func (c *ClientWithResponses) GetUapiOverseasStockV1TradingInquirePaymtStdrBalanceWithResponse(ctx context.Context, params *GetUapiOverseasStockV1TradingInquirePaymtStdrBalanceParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasStockV1TradingInquirePaymtStdrBalanceResponse, error) {
	rsp, err := c.GetUapiOverseasStockV1TradingInquirePaymtStdrBalance(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasStockV1TradingInquirePaymtStdrBalanceResponse(rsp)
}

// GetUapiOverseasStockV1TradingInquirePeriodProfitWithResponse request returning *GetUapiOverseasStockV1TradingInquirePeriodProfitResponse
func (c *ClientWithResponses) GetUapiOverseasStockV1TradingInquirePeriodProfitWithResponse(ctx context.Context, params *GetUapiOverseasStockV1TradingInquirePeriodProfitParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasStockV1TradingInquirePeriodProfitResponse, error) {
	rsp, err := c.GetUapiOverseasStockV1TradingInquirePeriodProfit(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasStockV1TradingInquirePeriodProfitResponse(rsp)
}

// GetUapiOverseasStockV1TradingInquirePeriodTransWithResponse request returning *GetUapiOverseasStockV1TradingInquirePeriodTransResponse
func (c *ClientWithResponses) GetUapiOverseasStockV1TradingInquirePeriodTransWithResponse(ctx context.Context, params *GetUapiOverseasStockV1TradingInquirePeriodTransParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasStockV1TradingInquirePeriodTransResponse, error) {
	rsp, err := c.GetUapiOverseasStockV1TradingInquirePeriodTrans(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasStockV1TradingInquirePeriodTransResponse(rsp)
}

// GetUapiOverseasStockV1TradingInquirePresentBalanceWithResponse request returning *GetUapiOverseasStockV1TradingInquirePresentBalanceResponse
func (c *ClientWithResponses) GetUapiOverseasStockV1TradingInquirePresentBalanceWithResponse(ctx context.Context, params *GetUapiOverseasStockV1TradingInquirePresentBalanceParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasStockV1TradingInquirePresentBalanceResponse, error) {
	rsp, err := c.GetUapiOverseasStockV1TradingInquirePresentBalance(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasStockV1TradingInquirePresentBalanceResponse(rsp)
}

// GetUapiOverseasStockV1TradingInquirePsamountWithResponse request returning *GetUapiOverseasStockV1TradingInquirePsamountResponse
func (c *ClientWithResponses) GetUapiOverseasStockV1TradingInquirePsamountWithResponse(ctx context.Context, params *GetUapiOverseasStockV1TradingInquirePsamountParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasStockV1TradingInquirePsamountResponse, error) {
	rsp, err := c.GetUapiOverseasStockV1TradingInquirePsamount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasStockV1TradingInquirePsamountResponse(rsp)
}

// PostUapiOverseasStockV1TradingOrderWithBodyWithResponse request with arbitrary body returning *PostUapiOverseasStockV1TradingOrderResponse
func (c *ClientWithResponses) PostUapiOverseasStockV1TradingOrderWithBodyWithResponse(ctx context.Context, params *PostUapiOverseasStockV1TradingOrderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiOverseasStockV1TradingOrderResponse, error) {
	rsp, err := c.PostUapiOverseasStockV1TradingOrderWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiOverseasStockV1TradingOrderResponse(rsp)
}

func (c *ClientWithResponses) PostUapiOverseasStockV1TradingOrderWithResponse(ctx context.Context, params *PostUapiOverseasStockV1TradingOrderParams, body PostUapiOverseasStockV1TradingOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiOverseasStockV1TradingOrderResponse, error) {
	rsp, err := c.PostUapiOverseasStockV1TradingOrder(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiOverseasStockV1TradingOrderResponse(rsp)
}

// PostUapiOverseasStockV1TradingOrderResvWithBodyWithResponse request with arbitrary body returning *PostUapiOverseasStockV1TradingOrderResvResponse
func (c *ClientWithResponses) PostUapiOverseasStockV1TradingOrderResvWithBodyWithResponse(ctx context.Context, params *PostUapiOverseasStockV1TradingOrderResvParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiOverseasStockV1TradingOrderResvResponse, error) {
	rsp, err := c.PostUapiOverseasStockV1TradingOrderResvWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiOverseasStockV1TradingOrderResvResponse(rsp)
}

func (c *ClientWithResponses) PostUapiOverseasStockV1TradingOrderResvWithResponse(ctx context.Context, params *PostUapiOverseasStockV1TradingOrderResvParams, body PostUapiOverseasStockV1TradingOrderResvJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiOverseasStockV1TradingOrderResvResponse, error) {
	rsp, err := c.PostUapiOverseasStockV1TradingOrderResv(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiOverseasStockV1TradingOrderResvResponse(rsp)
}

// PostUapiOverseasStockV1TradingOrderResvCcnlWithBodyWithResponse request with arbitrary body returning *PostUapiOverseasStockV1TradingOrderResvCcnlResponse
func (c *ClientWithResponses) PostUapiOverseasStockV1TradingOrderResvCcnlWithBodyWithResponse(ctx context.Context, params *PostUapiOverseasStockV1TradingOrderResvCcnlParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiOverseasStockV1TradingOrderResvCcnlResponse, error) {
	rsp, err := c.PostUapiOverseasStockV1TradingOrderResvCcnlWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiOverseasStockV1TradingOrderResvCcnlResponse(rsp)
}

func (c *ClientWithResponses) PostUapiOverseasStockV1TradingOrderResvCcnlWithResponse(ctx context.Context, params *PostUapiOverseasStockV1TradingOrderResvCcnlParams, body PostUapiOverseasStockV1TradingOrderResvCcnlJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiOverseasStockV1TradingOrderResvCcnlResponse, error) {
	rsp, err := c.PostUapiOverseasStockV1TradingOrderResvCcnl(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiOverseasStockV1TradingOrderResvCcnlResponse(rsp)
}

// GetUapiOverseasStockV1TradingOrderResvListWithResponse request returning *GetUapiOverseasStockV1TradingOrderResvListResponse
func (c *ClientWithResponses) GetUapiOverseasStockV1TradingOrderResvListWithResponse(ctx context.Context, params *GetUapiOverseasStockV1TradingOrderResvListParams, reqEditors ...RequestEditorFn) (*GetUapiOverseasStockV1TradingOrderResvListResponse, error) {
	rsp, err := c.GetUapiOverseasStockV1TradingOrderResvList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUapiOverseasStockV1TradingOrderResvListResponse(rsp)
}

// PostUapiOverseasStockV1TradingOrderRvsecnclWithBodyWithResponse request with arbitrary body returning *PostUapiOverseasStockV1TradingOrderRvsecnclResponse
func (c *ClientWithResponses) PostUapiOverseasStockV1TradingOrderRvsecnclWithBodyWithResponse(ctx context.Context, params *PostUapiOverseasStockV1TradingOrderRvsecnclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUapiOverseasStockV1TradingOrderRvsecnclResponse, error) {
	rsp, err := c.PostUapiOverseasStockV1TradingOrderRvsecnclWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiOverseasStockV1TradingOrderRvsecnclResponse(rsp)
}

func (c *ClientWithResponses) PostUapiOverseasStockV1TradingOrderRvsecnclWithResponse(ctx context.Context, params *PostUapiOverseasStockV1TradingOrderRvsecnclParams, body PostUapiOverseasStockV1TradingOrderRvsecnclJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUapiOverseasStockV1TradingOrderRvsecnclResponse, error) {
	rsp, err := c.PostUapiOverseasStockV1TradingOrderRvsecncl(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUapiOverseasStockV1TradingOrderRvsecnclResponse(rsp)
}

// ParsePostOauth2ApprovalResponse parses an HTTP response from a PostOauth2ApprovalWithResponse call
func ParsePostOauth2ApprovalResponse(rsp *http.Response) (*PostOauth2ApprovalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOauth2ApprovalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostOauth2RevokePResponse parses an HTTP response from a PostOauth2RevokePWithResponse call
func ParsePostOauth2RevokePResponse(rsp *http.Response) (*PostOauth2RevokePResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOauth2RevokePResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostOauth2TokenPResponse parses an HTTP response from a PostOauth2TokenPWithResponse call
func ParsePostOauth2TokenPResponse(rsp *http.Response) (*PostOauth2TokenPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOauth2TokenPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticBondV1QuotationsAvgUnitResponse parses an HTTP response from a GetUapiDomesticBondV1QuotationsAvgUnitWithResponse call
func ParseGetUapiDomesticBondV1QuotationsAvgUnitResponse(rsp *http.Response) (*GetUapiDomesticBondV1QuotationsAvgUnitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticBondV1QuotationsAvgUnitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticBondV1QuotationsInquireAskingPriceResponse parses an HTTP response from a GetUapiDomesticBondV1QuotationsInquireAskingPriceWithResponse call
func ParseGetUapiDomesticBondV1QuotationsInquireAskingPriceResponse(rsp *http.Response) (*GetUapiDomesticBondV1QuotationsInquireAskingPriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticBondV1QuotationsInquireAskingPriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticBondV1QuotationsInquireCcnlResponse parses an HTTP response from a GetUapiDomesticBondV1QuotationsInquireCcnlWithResponse call
func ParseGetUapiDomesticBondV1QuotationsInquireCcnlResponse(rsp *http.Response) (*GetUapiDomesticBondV1QuotationsInquireCcnlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticBondV1QuotationsInquireCcnlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticBondV1QuotationsInquireDailyItemchartpriceResponse parses an HTTP response from a GetUapiDomesticBondV1QuotationsInquireDailyItemchartpriceWithResponse call
func ParseGetUapiDomesticBondV1QuotationsInquireDailyItemchartpriceResponse(rsp *http.Response) (*GetUapiDomesticBondV1QuotationsInquireDailyItemchartpriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticBondV1QuotationsInquireDailyItemchartpriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticBondV1QuotationsInquirePriceResponse parses an HTTP response from a GetUapiDomesticBondV1QuotationsInquirePriceWithResponse call
func ParseGetUapiDomesticBondV1QuotationsInquirePriceResponse(rsp *http.Response) (*GetUapiDomesticBondV1QuotationsInquirePriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticBondV1QuotationsInquirePriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticBondV1QuotationsIssueInfoResponse parses an HTTP response from a GetUapiDomesticBondV1QuotationsIssueInfoWithResponse call
func ParseGetUapiDomesticBondV1QuotationsIssueInfoResponse(rsp *http.Response) (*GetUapiDomesticBondV1QuotationsIssueInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticBondV1QuotationsIssueInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticBondV1QuotationsSearchBondInfoResponse parses an HTTP response from a GetUapiDomesticBondV1QuotationsSearchBondInfoWithResponse call
func ParseGetUapiDomesticBondV1QuotationsSearchBondInfoResponse(rsp *http.Response) (*GetUapiDomesticBondV1QuotationsSearchBondInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticBondV1QuotationsSearchBondInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUapiDomesticBondV1TradingBuyResponse parses an HTTP response from a PostUapiDomesticBondV1TradingBuyWithResponse call
func ParsePostUapiDomesticBondV1TradingBuyResponse(rsp *http.Response) (*PostUapiDomesticBondV1TradingBuyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUapiDomesticBondV1TradingBuyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticBondV1TradingInquireBalanceResponse parses an HTTP response from a GetUapiDomesticBondV1TradingInquireBalanceWithResponse call
func ParseGetUapiDomesticBondV1TradingInquireBalanceResponse(rsp *http.Response) (*GetUapiDomesticBondV1TradingInquireBalanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticBondV1TradingInquireBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticBondV1TradingInquireDailyCcldResponse parses an HTTP response from a GetUapiDomesticBondV1TradingInquireDailyCcldWithResponse call
func ParseGetUapiDomesticBondV1TradingInquireDailyCcldResponse(rsp *http.Response) (*GetUapiDomesticBondV1TradingInquireDailyCcldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticBondV1TradingInquireDailyCcldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticBondV1TradingInquirePsblOrderResponse parses an HTTP response from a GetUapiDomesticBondV1TradingInquirePsblOrderWithResponse call
func ParseGetUapiDomesticBondV1TradingInquirePsblOrderResponse(rsp *http.Response) (*GetUapiDomesticBondV1TradingInquirePsblOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticBondV1TradingInquirePsblOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticBondV1TradingInquirePsblRvsecnclResponse parses an HTTP response from a GetUapiDomesticBondV1TradingInquirePsblRvsecnclWithResponse call
func ParseGetUapiDomesticBondV1TradingInquirePsblRvsecnclResponse(rsp *http.Response) (*GetUapiDomesticBondV1TradingInquirePsblRvsecnclResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticBondV1TradingInquirePsblRvsecnclResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUapiDomesticBondV1TradingOrderRvsecnclResponse parses an HTTP response from a PostUapiDomesticBondV1TradingOrderRvsecnclWithResponse call
func ParsePostUapiDomesticBondV1TradingOrderRvsecnclResponse(rsp *http.Response) (*PostUapiDomesticBondV1TradingOrderRvsecnclResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUapiDomesticBondV1TradingOrderRvsecnclResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUapiDomesticBondV1TradingSellResponse parses an HTTP response from a PostUapiDomesticBondV1TradingSellWithResponse call
func ParsePostUapiDomesticBondV1TradingSellResponse(rsp *http.Response) (*PostUapiDomesticBondV1TradingSellResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUapiDomesticBondV1TradingSellResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticFutureoptionV1QuotationsDisplayBoardCallputResponse parses an HTTP response from a GetUapiDomesticFutureoptionV1QuotationsDisplayBoardCallputWithResponse call
func ParseGetUapiDomesticFutureoptionV1QuotationsDisplayBoardCallputResponse(rsp *http.Response) (*GetUapiDomesticFutureoptionV1QuotationsDisplayBoardCallputResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticFutureoptionV1QuotationsDisplayBoardCallputResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticFutureoptionV1QuotationsDisplayBoardFuturesResponse parses an HTTP response from a GetUapiDomesticFutureoptionV1QuotationsDisplayBoardFuturesWithResponse call
func ParseGetUapiDomesticFutureoptionV1QuotationsDisplayBoardFuturesResponse(rsp *http.Response) (*GetUapiDomesticFutureoptionV1QuotationsDisplayBoardFuturesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticFutureoptionV1QuotationsDisplayBoardFuturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticFutureoptionV1QuotationsDisplayBoardOptionListResponse parses an HTTP response from a GetUapiDomesticFutureoptionV1QuotationsDisplayBoardOptionListWithResponse call
func ParseGetUapiDomesticFutureoptionV1QuotationsDisplayBoardOptionListResponse(rsp *http.Response) (*GetUapiDomesticFutureoptionV1QuotationsDisplayBoardOptionListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticFutureoptionV1QuotationsDisplayBoardOptionListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticFutureoptionV1QuotationsDisplayBoardTopResponse parses an HTTP response from a GetUapiDomesticFutureoptionV1QuotationsDisplayBoardTopWithResponse call
func ParseGetUapiDomesticFutureoptionV1QuotationsDisplayBoardTopResponse(rsp *http.Response) (*GetUapiDomesticFutureoptionV1QuotationsDisplayBoardTopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticFutureoptionV1QuotationsDisplayBoardTopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticFutureoptionV1QuotationsExpPriceTrendResponse parses an HTTP response from a GetUapiDomesticFutureoptionV1QuotationsExpPriceTrendWithResponse call
func ParseGetUapiDomesticFutureoptionV1QuotationsExpPriceTrendResponse(rsp *http.Response) (*GetUapiDomesticFutureoptionV1QuotationsExpPriceTrendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticFutureoptionV1QuotationsExpPriceTrendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticFutureoptionV1QuotationsInquireAskingPriceResponse parses an HTTP response from a GetUapiDomesticFutureoptionV1QuotationsInquireAskingPriceWithResponse call
func ParseGetUapiDomesticFutureoptionV1QuotationsInquireAskingPriceResponse(rsp *http.Response) (*GetUapiDomesticFutureoptionV1QuotationsInquireAskingPriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticFutureoptionV1QuotationsInquireAskingPriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticFutureoptionV1QuotationsInquireDailyFuopchartpriceResponse parses an HTTP response from a GetUapiDomesticFutureoptionV1QuotationsInquireDailyFuopchartpriceWithResponse call
func ParseGetUapiDomesticFutureoptionV1QuotationsInquireDailyFuopchartpriceResponse(rsp *http.Response) (*GetUapiDomesticFutureoptionV1QuotationsInquireDailyFuopchartpriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticFutureoptionV1QuotationsInquireDailyFuopchartpriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticFutureoptionV1QuotationsInquirePriceResponse parses an HTTP response from a GetUapiDomesticFutureoptionV1QuotationsInquirePriceWithResponse call
func ParseGetUapiDomesticFutureoptionV1QuotationsInquirePriceResponse(rsp *http.Response) (*GetUapiDomesticFutureoptionV1QuotationsInquirePriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticFutureoptionV1QuotationsInquirePriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticFutureoptionV1QuotationsInquireTimeFuopchartpriceResponse parses an HTTP response from a GetUapiDomesticFutureoptionV1QuotationsInquireTimeFuopchartpriceWithResponse call
func ParseGetUapiDomesticFutureoptionV1QuotationsInquireTimeFuopchartpriceResponse(rsp *http.Response) (*GetUapiDomesticFutureoptionV1QuotationsInquireTimeFuopchartpriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticFutureoptionV1QuotationsInquireTimeFuopchartpriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticFutureoptionV1TradingInquireBalanceResponse parses an HTTP response from a GetUapiDomesticFutureoptionV1TradingInquireBalanceWithResponse call
func ParseGetUapiDomesticFutureoptionV1TradingInquireBalanceResponse(rsp *http.Response) (*GetUapiDomesticFutureoptionV1TradingInquireBalanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticFutureoptionV1TradingInquireBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticFutureoptionV1TradingInquireBalanceSettlementPlResponse parses an HTTP response from a GetUapiDomesticFutureoptionV1TradingInquireBalanceSettlementPlWithResponse call
func ParseGetUapiDomesticFutureoptionV1TradingInquireBalanceSettlementPlResponse(rsp *http.Response) (*GetUapiDomesticFutureoptionV1TradingInquireBalanceSettlementPlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticFutureoptionV1TradingInquireBalanceSettlementPlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticFutureoptionV1TradingInquireBalanceValuationPlResponse parses an HTTP response from a GetUapiDomesticFutureoptionV1TradingInquireBalanceValuationPlWithResponse call
func ParseGetUapiDomesticFutureoptionV1TradingInquireBalanceValuationPlResponse(rsp *http.Response) (*GetUapiDomesticFutureoptionV1TradingInquireBalanceValuationPlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticFutureoptionV1TradingInquireBalanceValuationPlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticFutureoptionV1TradingInquireCcnlResponse parses an HTTP response from a GetUapiDomesticFutureoptionV1TradingInquireCcnlWithResponse call
func ParseGetUapiDomesticFutureoptionV1TradingInquireCcnlResponse(rsp *http.Response) (*GetUapiDomesticFutureoptionV1TradingInquireCcnlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticFutureoptionV1TradingInquireCcnlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticFutureoptionV1TradingInquireCcnlBstimeResponse parses an HTTP response from a GetUapiDomesticFutureoptionV1TradingInquireCcnlBstimeWithResponse call
func ParseGetUapiDomesticFutureoptionV1TradingInquireCcnlBstimeResponse(rsp *http.Response) (*GetUapiDomesticFutureoptionV1TradingInquireCcnlBstimeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticFutureoptionV1TradingInquireCcnlBstimeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticFutureoptionV1TradingInquireDailyAmountFeeResponse parses an HTTP response from a GetUapiDomesticFutureoptionV1TradingInquireDailyAmountFeeWithResponse call
func ParseGetUapiDomesticFutureoptionV1TradingInquireDailyAmountFeeResponse(rsp *http.Response) (*GetUapiDomesticFutureoptionV1TradingInquireDailyAmountFeeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticFutureoptionV1TradingInquireDailyAmountFeeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticFutureoptionV1TradingInquireDepositResponse parses an HTTP response from a GetUapiDomesticFutureoptionV1TradingInquireDepositWithResponse call
func ParseGetUapiDomesticFutureoptionV1TradingInquireDepositResponse(rsp *http.Response) (*GetUapiDomesticFutureoptionV1TradingInquireDepositResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticFutureoptionV1TradingInquireDepositResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticFutureoptionV1TradingInquireNgtBalanceResponse parses an HTTP response from a GetUapiDomesticFutureoptionV1TradingInquireNgtBalanceWithResponse call
func ParseGetUapiDomesticFutureoptionV1TradingInquireNgtBalanceResponse(rsp *http.Response) (*GetUapiDomesticFutureoptionV1TradingInquireNgtBalanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticFutureoptionV1TradingInquireNgtBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticFutureoptionV1TradingInquireNgtCcnlResponse parses an HTTP response from a GetUapiDomesticFutureoptionV1TradingInquireNgtCcnlWithResponse call
func ParseGetUapiDomesticFutureoptionV1TradingInquireNgtCcnlResponse(rsp *http.Response) (*GetUapiDomesticFutureoptionV1TradingInquireNgtCcnlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticFutureoptionV1TradingInquireNgtCcnlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticFutureoptionV1TradingInquirePsblNgtOrderResponse parses an HTTP response from a GetUapiDomesticFutureoptionV1TradingInquirePsblNgtOrderWithResponse call
func ParseGetUapiDomesticFutureoptionV1TradingInquirePsblNgtOrderResponse(rsp *http.Response) (*GetUapiDomesticFutureoptionV1TradingInquirePsblNgtOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticFutureoptionV1TradingInquirePsblNgtOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticFutureoptionV1TradingInquirePsblOrderResponse parses an HTTP response from a GetUapiDomesticFutureoptionV1TradingInquirePsblOrderWithResponse call
func ParseGetUapiDomesticFutureoptionV1TradingInquirePsblOrderResponse(rsp *http.Response) (*GetUapiDomesticFutureoptionV1TradingInquirePsblOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticFutureoptionV1TradingInquirePsblOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticFutureoptionV1TradingNgtMarginDetailResponse parses an HTTP response from a GetUapiDomesticFutureoptionV1TradingNgtMarginDetailWithResponse call
func ParseGetUapiDomesticFutureoptionV1TradingNgtMarginDetailResponse(rsp *http.Response) (*GetUapiDomesticFutureoptionV1TradingNgtMarginDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticFutureoptionV1TradingNgtMarginDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUapiDomesticFutureoptionV1TradingOrderResponse parses an HTTP response from a PostUapiDomesticFutureoptionV1TradingOrderWithResponse call
func ParsePostUapiDomesticFutureoptionV1TradingOrderResponse(rsp *http.Response) (*PostUapiDomesticFutureoptionV1TradingOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUapiDomesticFutureoptionV1TradingOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUapiDomesticFutureoptionV1TradingOrderRvsecnclResponse parses an HTTP response from a PostUapiDomesticFutureoptionV1TradingOrderRvsecnclWithResponse call
func ParsePostUapiDomesticFutureoptionV1TradingOrderRvsecnclResponse(rsp *http.Response) (*PostUapiDomesticFutureoptionV1TradingOrderRvsecnclResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUapiDomesticFutureoptionV1TradingOrderRvsecnclResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1FinanceBalanceSheetResponse parses an HTTP response from a GetUapiDomesticStockV1FinanceBalanceSheetWithResponse call
func ParseGetUapiDomesticStockV1FinanceBalanceSheetResponse(rsp *http.Response) (*GetUapiDomesticStockV1FinanceBalanceSheetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1FinanceBalanceSheetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1FinanceFinancialRatioResponse parses an HTTP response from a GetUapiDomesticStockV1FinanceFinancialRatioWithResponse call
func ParseGetUapiDomesticStockV1FinanceFinancialRatioResponse(rsp *http.Response) (*GetUapiDomesticStockV1FinanceFinancialRatioResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1FinanceFinancialRatioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1FinanceGrowthRatioResponse parses an HTTP response from a GetUapiDomesticStockV1FinanceGrowthRatioWithResponse call
func ParseGetUapiDomesticStockV1FinanceGrowthRatioResponse(rsp *http.Response) (*GetUapiDomesticStockV1FinanceGrowthRatioResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1FinanceGrowthRatioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1FinanceIncomeStatementResponse parses an HTTP response from a GetUapiDomesticStockV1FinanceIncomeStatementWithResponse call
func ParseGetUapiDomesticStockV1FinanceIncomeStatementResponse(rsp *http.Response) (*GetUapiDomesticStockV1FinanceIncomeStatementResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1FinanceIncomeStatementResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1FinanceOtherMajorRatiosResponse parses an HTTP response from a GetUapiDomesticStockV1FinanceOtherMajorRatiosWithResponse call
func ParseGetUapiDomesticStockV1FinanceOtherMajorRatiosResponse(rsp *http.Response) (*GetUapiDomesticStockV1FinanceOtherMajorRatiosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1FinanceOtherMajorRatiosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1FinanceProfitRatioResponse parses an HTTP response from a GetUapiDomesticStockV1FinanceProfitRatioWithResponse call
func ParseGetUapiDomesticStockV1FinanceProfitRatioResponse(rsp *http.Response) (*GetUapiDomesticStockV1FinanceProfitRatioResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1FinanceProfitRatioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1FinanceStabilityRatioResponse parses an HTTP response from a GetUapiDomesticStockV1FinanceStabilityRatioWithResponse call
func ParseGetUapiDomesticStockV1FinanceStabilityRatioResponse(rsp *http.Response) (*GetUapiDomesticStockV1FinanceStabilityRatioResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1FinanceStabilityRatioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1KsdinfoBonusIssueResponse parses an HTTP response from a GetUapiDomesticStockV1KsdinfoBonusIssueWithResponse call
func ParseGetUapiDomesticStockV1KsdinfoBonusIssueResponse(rsp *http.Response) (*GetUapiDomesticStockV1KsdinfoBonusIssueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1KsdinfoBonusIssueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1KsdinfoCapDcrsResponse parses an HTTP response from a GetUapiDomesticStockV1KsdinfoCapDcrsWithResponse call
func ParseGetUapiDomesticStockV1KsdinfoCapDcrsResponse(rsp *http.Response) (*GetUapiDomesticStockV1KsdinfoCapDcrsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1KsdinfoCapDcrsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1KsdinfoDividendResponse parses an HTTP response from a GetUapiDomesticStockV1KsdinfoDividendWithResponse call
func ParseGetUapiDomesticStockV1KsdinfoDividendResponse(rsp *http.Response) (*GetUapiDomesticStockV1KsdinfoDividendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1KsdinfoDividendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1KsdinfoListInfoResponse parses an HTTP response from a GetUapiDomesticStockV1KsdinfoListInfoWithResponse call
func ParseGetUapiDomesticStockV1KsdinfoListInfoResponse(rsp *http.Response) (*GetUapiDomesticStockV1KsdinfoListInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1KsdinfoListInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1KsdinfoMergerSplitResponse parses an HTTP response from a GetUapiDomesticStockV1KsdinfoMergerSplitWithResponse call
func ParseGetUapiDomesticStockV1KsdinfoMergerSplitResponse(rsp *http.Response) (*GetUapiDomesticStockV1KsdinfoMergerSplitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1KsdinfoMergerSplitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1KsdinfoPaidinCapinResponse parses an HTTP response from a GetUapiDomesticStockV1KsdinfoPaidinCapinWithResponse call
func ParseGetUapiDomesticStockV1KsdinfoPaidinCapinResponse(rsp *http.Response) (*GetUapiDomesticStockV1KsdinfoPaidinCapinResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1KsdinfoPaidinCapinResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1KsdinfoPurreqResponse parses an HTTP response from a GetUapiDomesticStockV1KsdinfoPurreqWithResponse call
func ParseGetUapiDomesticStockV1KsdinfoPurreqResponse(rsp *http.Response) (*GetUapiDomesticStockV1KsdinfoPurreqResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1KsdinfoPurreqResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1KsdinfoRevSplitResponse parses an HTTP response from a GetUapiDomesticStockV1KsdinfoRevSplitWithResponse call
func ParseGetUapiDomesticStockV1KsdinfoRevSplitResponse(rsp *http.Response) (*GetUapiDomesticStockV1KsdinfoRevSplitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1KsdinfoRevSplitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1KsdinfoSharehldMeetResponse parses an HTTP response from a GetUapiDomesticStockV1KsdinfoSharehldMeetWithResponse call
func ParseGetUapiDomesticStockV1KsdinfoSharehldMeetResponse(rsp *http.Response) (*GetUapiDomesticStockV1KsdinfoSharehldMeetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1KsdinfoSharehldMeetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsCaptureUplowpriceResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsCaptureUplowpriceWithResponse call
func ParseGetUapiDomesticStockV1QuotationsCaptureUplowpriceResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsCaptureUplowpriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsCaptureUplowpriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsChkHolidayResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsChkHolidayWithResponse call
func ParseGetUapiDomesticStockV1QuotationsChkHolidayResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsChkHolidayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsChkHolidayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsCompInterestResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsCompInterestWithResponse call
func ParseGetUapiDomesticStockV1QuotationsCompInterestResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsCompInterestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsCompInterestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsCompProgramTradeDailyResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsCompProgramTradeDailyWithResponse call
func ParseGetUapiDomesticStockV1QuotationsCompProgramTradeDailyResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsCompProgramTradeDailyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsCompProgramTradeDailyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsCompProgramTradeTodayResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsCompProgramTradeTodayWithResponse call
func ParseGetUapiDomesticStockV1QuotationsCompProgramTradeTodayResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsCompProgramTradeTodayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsCompProgramTradeTodayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsCreditByCompanyResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsCreditByCompanyWithResponse call
func ParseGetUapiDomesticStockV1QuotationsCreditByCompanyResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsCreditByCompanyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsCreditByCompanyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsDailyCreditBalanceResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsDailyCreditBalanceWithResponse call
func ParseGetUapiDomesticStockV1QuotationsDailyCreditBalanceResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsDailyCreditBalanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsDailyCreditBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsDailyShortSaleResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsDailyShortSaleWithResponse call
func ParseGetUapiDomesticStockV1QuotationsDailyShortSaleResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsDailyShortSaleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsDailyShortSaleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsEstimatePerformResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsEstimatePerformWithResponse call
func ParseGetUapiDomesticStockV1QuotationsEstimatePerformResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsEstimatePerformResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsEstimatePerformResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsExpClosingPriceResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsExpClosingPriceWithResponse call
func ParseGetUapiDomesticStockV1QuotationsExpClosingPriceResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsExpClosingPriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsExpClosingPriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsExpIndexTrendResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsExpIndexTrendWithResponse call
func ParseGetUapiDomesticStockV1QuotationsExpIndexTrendResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsExpIndexTrendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsExpIndexTrendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsExpPriceTrendResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsExpPriceTrendWithResponse call
func ParseGetUapiDomesticStockV1QuotationsExpPriceTrendResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsExpPriceTrendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsExpPriceTrendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsForeignInstitutionTotalResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsForeignInstitutionTotalWithResponse call
func ParseGetUapiDomesticStockV1QuotationsForeignInstitutionTotalResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsForeignInstitutionTotalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsForeignInstitutionTotalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsFrgnmemPchsTrendResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsFrgnmemPchsTrendWithResponse call
func ParseGetUapiDomesticStockV1QuotationsFrgnmemPchsTrendResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsFrgnmemPchsTrendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsFrgnmemPchsTrendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsFrgnmemTradeEstimateResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsFrgnmemTradeEstimateWithResponse call
func ParseGetUapiDomesticStockV1QuotationsFrgnmemTradeEstimateResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsFrgnmemTradeEstimateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsFrgnmemTradeEstimateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsFrgnmemTradeTrendResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsFrgnmemTradeTrendWithResponse call
func ParseGetUapiDomesticStockV1QuotationsFrgnmemTradeTrendResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsFrgnmemTradeTrendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsFrgnmemTradeTrendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsInquireAskingPriceExpCcnResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsInquireAskingPriceExpCcnWithResponse call
func ParseGetUapiDomesticStockV1QuotationsInquireAskingPriceExpCcnResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsInquireAskingPriceExpCcnResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsInquireAskingPriceExpCcnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsInquireCcnlResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsInquireCcnlWithResponse call
func ParseGetUapiDomesticStockV1QuotationsInquireCcnlResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsInquireCcnlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsInquireCcnlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsInquireDailyIndexchartpriceResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsInquireDailyIndexchartpriceWithResponse call
func ParseGetUapiDomesticStockV1QuotationsInquireDailyIndexchartpriceResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsInquireDailyIndexchartpriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsInquireDailyIndexchartpriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsInquireDailyItemchartpriceResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsInquireDailyItemchartpriceWithResponse call
func ParseGetUapiDomesticStockV1QuotationsInquireDailyItemchartpriceResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsInquireDailyItemchartpriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsInquireDailyItemchartpriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsInquireDailyOvertimepriceResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsInquireDailyOvertimepriceWithResponse call
func ParseGetUapiDomesticStockV1QuotationsInquireDailyOvertimepriceResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsInquireDailyOvertimepriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsInquireDailyOvertimepriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsInquireDailyPriceResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsInquireDailyPriceWithResponse call
func ParseGetUapiDomesticStockV1QuotationsInquireDailyPriceResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsInquireDailyPriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsInquireDailyPriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsInquireDailyTradeVolumeResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsInquireDailyTradeVolumeWithResponse call
func ParseGetUapiDomesticStockV1QuotationsInquireDailyTradeVolumeResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsInquireDailyTradeVolumeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsInquireDailyTradeVolumeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsInquireElwPriceResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsInquireElwPriceWithResponse call
func ParseGetUapiDomesticStockV1QuotationsInquireElwPriceResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsInquireElwPriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsInquireElwPriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsInquireIndexTickpriceResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsInquireIndexTickpriceWithResponse call
func ParseGetUapiDomesticStockV1QuotationsInquireIndexTickpriceResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsInquireIndexTickpriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsInquireIndexTickpriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsInquireIndexTimepriceResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsInquireIndexTimepriceWithResponse call
func ParseGetUapiDomesticStockV1QuotationsInquireIndexTimepriceResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsInquireIndexTimepriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsInquireIndexTimepriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsInquireInvestorResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsInquireInvestorWithResponse call
func ParseGetUapiDomesticStockV1QuotationsInquireInvestorResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsInquireInvestorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsInquireInvestorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsInquireInvestorDailyByMarketResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsInquireInvestorDailyByMarketWithResponse call
func ParseGetUapiDomesticStockV1QuotationsInquireInvestorDailyByMarketResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsInquireInvestorDailyByMarketResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsInquireInvestorDailyByMarketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsInquireInvestorTimeByMarketResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsInquireInvestorTimeByMarketWithResponse call
func ParseGetUapiDomesticStockV1QuotationsInquireInvestorTimeByMarketResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsInquireInvestorTimeByMarketResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsInquireInvestorTimeByMarketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsInquireMemberResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsInquireMemberWithResponse call
func ParseGetUapiDomesticStockV1QuotationsInquireMemberResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsInquireMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsInquireMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsInquireMemberDailyResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsInquireMemberDailyWithResponse call
func ParseGetUapiDomesticStockV1QuotationsInquireMemberDailyResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsInquireMemberDailyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsInquireMemberDailyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsInquireOvertimeAskingPriceResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsInquireOvertimeAskingPriceWithResponse call
func ParseGetUapiDomesticStockV1QuotationsInquireOvertimeAskingPriceResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsInquireOvertimeAskingPriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsInquireOvertimeAskingPriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsInquireOvertimePriceResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsInquireOvertimePriceWithResponse call
func ParseGetUapiDomesticStockV1QuotationsInquireOvertimePriceResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsInquireOvertimePriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsInquireOvertimePriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsInquirePriceResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsInquirePriceWithResponse call
func ParseGetUapiDomesticStockV1QuotationsInquirePriceResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsInquirePriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsInquirePriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsInquirePrice2Response parses an HTTP response from a GetUapiDomesticStockV1QuotationsInquirePrice2WithResponse call
func ParseGetUapiDomesticStockV1QuotationsInquirePrice2Response(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsInquirePrice2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsInquirePrice2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsInquireTimeIndexchartpriceResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsInquireTimeIndexchartpriceWithResponse call
func ParseGetUapiDomesticStockV1QuotationsInquireTimeIndexchartpriceResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsInquireTimeIndexchartpriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsInquireTimeIndexchartpriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsInquireTimeItemchartpriceResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsInquireTimeItemchartpriceWithResponse call
func ParseGetUapiDomesticStockV1QuotationsInquireTimeItemchartpriceResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsInquireTimeItemchartpriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsInquireTimeItemchartpriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsInquireTimeItemconclusionResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsInquireTimeItemconclusionWithResponse call
func ParseGetUapiDomesticStockV1QuotationsInquireTimeItemconclusionResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsInquireTimeItemconclusionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsInquireTimeItemconclusionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsInquireTimeOvertimeconclusionResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsInquireTimeOvertimeconclusionWithResponse call
func ParseGetUapiDomesticStockV1QuotationsInquireTimeOvertimeconclusionResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsInquireTimeOvertimeconclusionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsInquireTimeOvertimeconclusionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsInquireViStatusResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsInquireViStatusWithResponse call
func ParseGetUapiDomesticStockV1QuotationsInquireViStatusResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsInquireViStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsInquireViStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsIntstockGrouplistResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsIntstockGrouplistWithResponse call
func ParseGetUapiDomesticStockV1QuotationsIntstockGrouplistResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsIntstockGrouplistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsIntstockGrouplistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsIntstockMultpriceResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsIntstockMultpriceWithResponse call
func ParseGetUapiDomesticStockV1QuotationsIntstockMultpriceResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsIntstockMultpriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsIntstockMultpriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsIntstockStocklistByGroupResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsIntstockStocklistByGroupWithResponse call
func ParseGetUapiDomesticStockV1QuotationsIntstockStocklistByGroupResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsIntstockStocklistByGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsIntstockStocklistByGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsInvestOpbysecResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsInvestOpbysecWithResponse call
func ParseGetUapiDomesticStockV1QuotationsInvestOpbysecResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsInvestOpbysecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsInvestOpbysecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsInvestOpinionResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsInvestOpinionWithResponse call
func ParseGetUapiDomesticStockV1QuotationsInvestOpinionResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsInvestOpinionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsInvestOpinionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsInvestorProgramTradeTodayResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsInvestorProgramTradeTodayWithResponse call
func ParseGetUapiDomesticStockV1QuotationsInvestorProgramTradeTodayResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsInvestorProgramTradeTodayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsInvestorProgramTradeTodayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsInvestorTrendEstimateResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsInvestorTrendEstimateWithResponse call
func ParseGetUapiDomesticStockV1QuotationsInvestorTrendEstimateResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsInvestorTrendEstimateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsInvestorTrendEstimateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsLendableByCompanyResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsLendableByCompanyWithResponse call
func ParseGetUapiDomesticStockV1QuotationsLendableByCompanyResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsLendableByCompanyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsLendableByCompanyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsMktfundsResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsMktfundsWithResponse call
func ParseGetUapiDomesticStockV1QuotationsMktfundsResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsMktfundsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsMktfundsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsNewsTitleResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsNewsTitleWithResponse call
func ParseGetUapiDomesticStockV1QuotationsNewsTitleResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsNewsTitleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsNewsTitleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsPbarTratioResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsPbarTratioWithResponse call
func ParseGetUapiDomesticStockV1QuotationsPbarTratioResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsPbarTratioResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsPbarTratioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsProgramTradeByStockResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsProgramTradeByStockWithResponse call
func ParseGetUapiDomesticStockV1QuotationsProgramTradeByStockResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsProgramTradeByStockResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsProgramTradeByStockResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsProgramTradeByStockDailyResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsProgramTradeByStockDailyWithResponse call
func ParseGetUapiDomesticStockV1QuotationsProgramTradeByStockDailyResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsProgramTradeByStockDailyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsProgramTradeByStockDailyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsPsearchResultResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsPsearchResultWithResponse call
func ParseGetUapiDomesticStockV1QuotationsPsearchResultResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsPsearchResultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsPsearchResultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsPsearchTitleResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsPsearchTitleWithResponse call
func ParseGetUapiDomesticStockV1QuotationsPsearchTitleResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsPsearchTitleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsPsearchTitleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsSearchInfoResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsSearchInfoWithResponse call
func ParseGetUapiDomesticStockV1QuotationsSearchInfoResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsSearchInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsSearchInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsSearchStockInfoResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsSearchStockInfoWithResponse call
func ParseGetUapiDomesticStockV1QuotationsSearchStockInfoResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsSearchStockInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsSearchStockInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsTradprtByamtResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsTradprtByamtWithResponse call
func ParseGetUapiDomesticStockV1QuotationsTradprtByamtResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsTradprtByamtResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsTradprtByamtResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1QuotationsVolumeRankResponse parses an HTTP response from a GetUapiDomesticStockV1QuotationsVolumeRankWithResponse call
func ParseGetUapiDomesticStockV1QuotationsVolumeRankResponse(rsp *http.Response) (*GetUapiDomesticStockV1QuotationsVolumeRankResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1QuotationsVolumeRankResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1RankingAfterHourBalanceResponse parses an HTTP response from a GetUapiDomesticStockV1RankingAfterHourBalanceWithResponse call
func ParseGetUapiDomesticStockV1RankingAfterHourBalanceResponse(rsp *http.Response) (*GetUapiDomesticStockV1RankingAfterHourBalanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1RankingAfterHourBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1RankingBulkTransNumResponse parses an HTTP response from a GetUapiDomesticStockV1RankingBulkTransNumWithResponse call
func ParseGetUapiDomesticStockV1RankingBulkTransNumResponse(rsp *http.Response) (*GetUapiDomesticStockV1RankingBulkTransNumResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1RankingBulkTransNumResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1RankingCreditBalanceResponse parses an HTTP response from a GetUapiDomesticStockV1RankingCreditBalanceWithResponse call
func ParseGetUapiDomesticStockV1RankingCreditBalanceResponse(rsp *http.Response) (*GetUapiDomesticStockV1RankingCreditBalanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1RankingCreditBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1RankingDisparityResponse parses an HTTP response from a GetUapiDomesticStockV1RankingDisparityWithResponse call
func ParseGetUapiDomesticStockV1RankingDisparityResponse(rsp *http.Response) (*GetUapiDomesticStockV1RankingDisparityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1RankingDisparityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1RankingDividendRateResponse parses an HTTP response from a GetUapiDomesticStockV1RankingDividendRateWithResponse call
func ParseGetUapiDomesticStockV1RankingDividendRateResponse(rsp *http.Response) (*GetUapiDomesticStockV1RankingDividendRateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1RankingDividendRateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1RankingExpTransUpdownResponse parses an HTTP response from a GetUapiDomesticStockV1RankingExpTransUpdownWithResponse call
func ParseGetUapiDomesticStockV1RankingExpTransUpdownResponse(rsp *http.Response) (*GetUapiDomesticStockV1RankingExpTransUpdownResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1RankingExpTransUpdownResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1RankingFinanceRatioResponse parses an HTTP response from a GetUapiDomesticStockV1RankingFinanceRatioWithResponse call
func ParseGetUapiDomesticStockV1RankingFinanceRatioResponse(rsp *http.Response) (*GetUapiDomesticStockV1RankingFinanceRatioResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1RankingFinanceRatioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1RankingFluctuationResponse parses an HTTP response from a GetUapiDomesticStockV1RankingFluctuationWithResponse call
func ParseGetUapiDomesticStockV1RankingFluctuationResponse(rsp *http.Response) (*GetUapiDomesticStockV1RankingFluctuationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1RankingFluctuationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1RankingMarketCapResponse parses an HTTP response from a GetUapiDomesticStockV1RankingMarketCapWithResponse call
func ParseGetUapiDomesticStockV1RankingMarketCapResponse(rsp *http.Response) (*GetUapiDomesticStockV1RankingMarketCapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1RankingMarketCapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1RankingMarketValueResponse parses an HTTP response from a GetUapiDomesticStockV1RankingMarketValueWithResponse call
func ParseGetUapiDomesticStockV1RankingMarketValueResponse(rsp *http.Response) (*GetUapiDomesticStockV1RankingMarketValueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1RankingMarketValueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1RankingNearNewHighlowResponse parses an HTTP response from a GetUapiDomesticStockV1RankingNearNewHighlowWithResponse call
func ParseGetUapiDomesticStockV1RankingNearNewHighlowResponse(rsp *http.Response) (*GetUapiDomesticStockV1RankingNearNewHighlowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1RankingNearNewHighlowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1RankingOvertimeExpTransFluctResponse parses an HTTP response from a GetUapiDomesticStockV1RankingOvertimeExpTransFluctWithResponse call
func ParseGetUapiDomesticStockV1RankingOvertimeExpTransFluctResponse(rsp *http.Response) (*GetUapiDomesticStockV1RankingOvertimeExpTransFluctResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1RankingOvertimeExpTransFluctResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1RankingOvertimeFluctuationResponse parses an HTTP response from a GetUapiDomesticStockV1RankingOvertimeFluctuationWithResponse call
func ParseGetUapiDomesticStockV1RankingOvertimeFluctuationResponse(rsp *http.Response) (*GetUapiDomesticStockV1RankingOvertimeFluctuationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1RankingOvertimeFluctuationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1RankingOvertimeVolumeResponse parses an HTTP response from a GetUapiDomesticStockV1RankingOvertimeVolumeWithResponse call
func ParseGetUapiDomesticStockV1RankingOvertimeVolumeResponse(rsp *http.Response) (*GetUapiDomesticStockV1RankingOvertimeVolumeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1RankingOvertimeVolumeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1RankingPreferDisparateRatioResponse parses an HTTP response from a GetUapiDomesticStockV1RankingPreferDisparateRatioWithResponse call
func ParseGetUapiDomesticStockV1RankingPreferDisparateRatioResponse(rsp *http.Response) (*GetUapiDomesticStockV1RankingPreferDisparateRatioResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1RankingPreferDisparateRatioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1RankingProfitAssetIndexResponse parses an HTTP response from a GetUapiDomesticStockV1RankingProfitAssetIndexWithResponse call
func ParseGetUapiDomesticStockV1RankingProfitAssetIndexResponse(rsp *http.Response) (*GetUapiDomesticStockV1RankingProfitAssetIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1RankingProfitAssetIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1RankingQuoteBalanceResponse parses an HTTP response from a GetUapiDomesticStockV1RankingQuoteBalanceWithResponse call
func ParseGetUapiDomesticStockV1RankingQuoteBalanceResponse(rsp *http.Response) (*GetUapiDomesticStockV1RankingQuoteBalanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1RankingQuoteBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1RankingShortSaleResponse parses an HTTP response from a GetUapiDomesticStockV1RankingShortSaleWithResponse call
func ParseGetUapiDomesticStockV1RankingShortSaleResponse(rsp *http.Response) (*GetUapiDomesticStockV1RankingShortSaleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1RankingShortSaleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1RankingTopInterestStockResponse parses an HTTP response from a GetUapiDomesticStockV1RankingTopInterestStockWithResponse call
func ParseGetUapiDomesticStockV1RankingTopInterestStockResponse(rsp *http.Response) (*GetUapiDomesticStockV1RankingTopInterestStockResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1RankingTopInterestStockResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1RankingTradedByCompanyResponse parses an HTTP response from a GetUapiDomesticStockV1RankingTradedByCompanyWithResponse call
func ParseGetUapiDomesticStockV1RankingTradedByCompanyResponse(rsp *http.Response) (*GetUapiDomesticStockV1RankingTradedByCompanyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1RankingTradedByCompanyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1RankingVolumePowerResponse parses an HTTP response from a GetUapiDomesticStockV1RankingVolumePowerWithResponse call
func ParseGetUapiDomesticStockV1RankingVolumePowerResponse(rsp *http.Response) (*GetUapiDomesticStockV1RankingVolumePowerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1RankingVolumePowerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1TradingInquireAccountBalanceResponse parses an HTTP response from a GetUapiDomesticStockV1TradingInquireAccountBalanceWithResponse call
func ParseGetUapiDomesticStockV1TradingInquireAccountBalanceResponse(rsp *http.Response) (*GetUapiDomesticStockV1TradingInquireAccountBalanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1TradingInquireAccountBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1TradingInquireBalanceResponse parses an HTTP response from a GetUapiDomesticStockV1TradingInquireBalanceWithResponse call
func ParseGetUapiDomesticStockV1TradingInquireBalanceResponse(rsp *http.Response) (*GetUapiDomesticStockV1TradingInquireBalanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1TradingInquireBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1TradingInquireBalanceRlzPlResponse parses an HTTP response from a GetUapiDomesticStockV1TradingInquireBalanceRlzPlWithResponse call
func ParseGetUapiDomesticStockV1TradingInquireBalanceRlzPlResponse(rsp *http.Response) (*GetUapiDomesticStockV1TradingInquireBalanceRlzPlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1TradingInquireBalanceRlzPlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1TradingInquireCreditPsamountResponse parses an HTTP response from a GetUapiDomesticStockV1TradingInquireCreditPsamountWithResponse call
func ParseGetUapiDomesticStockV1TradingInquireCreditPsamountResponse(rsp *http.Response) (*GetUapiDomesticStockV1TradingInquireCreditPsamountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1TradingInquireCreditPsamountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1TradingInquireDailyCcldResponse parses an HTTP response from a GetUapiDomesticStockV1TradingInquireDailyCcldWithResponse call
func ParseGetUapiDomesticStockV1TradingInquireDailyCcldResponse(rsp *http.Response) (*GetUapiDomesticStockV1TradingInquireDailyCcldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1TradingInquireDailyCcldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1TradingInquirePeriodProfitResponse parses an HTTP response from a GetUapiDomesticStockV1TradingInquirePeriodProfitWithResponse call
func ParseGetUapiDomesticStockV1TradingInquirePeriodProfitResponse(rsp *http.Response) (*GetUapiDomesticStockV1TradingInquirePeriodProfitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1TradingInquirePeriodProfitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1TradingInquirePeriodTradeProfitResponse parses an HTTP response from a GetUapiDomesticStockV1TradingInquirePeriodTradeProfitWithResponse call
func ParseGetUapiDomesticStockV1TradingInquirePeriodTradeProfitResponse(rsp *http.Response) (*GetUapiDomesticStockV1TradingInquirePeriodTradeProfitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1TradingInquirePeriodTradeProfitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1TradingInquirePsblOrderResponse parses an HTTP response from a GetUapiDomesticStockV1TradingInquirePsblOrderWithResponse call
func ParseGetUapiDomesticStockV1TradingInquirePsblOrderResponse(rsp *http.Response) (*GetUapiDomesticStockV1TradingInquirePsblOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1TradingInquirePsblOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1TradingInquirePsblRvsecnclResponse parses an HTTP response from a GetUapiDomesticStockV1TradingInquirePsblRvsecnclWithResponse call
func ParseGetUapiDomesticStockV1TradingInquirePsblRvsecnclResponse(rsp *http.Response) (*GetUapiDomesticStockV1TradingInquirePsblRvsecnclResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1TradingInquirePsblRvsecnclResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1TradingInquirePsblSellResponse parses an HTTP response from a GetUapiDomesticStockV1TradingInquirePsblSellWithResponse call
func ParseGetUapiDomesticStockV1TradingInquirePsblSellResponse(rsp *http.Response) (*GetUapiDomesticStockV1TradingInquirePsblSellResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1TradingInquirePsblSellResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUapiDomesticStockV1TradingOrderCashResponse parses an HTTP response from a PostUapiDomesticStockV1TradingOrderCashWithResponse call
func ParsePostUapiDomesticStockV1TradingOrderCashResponse(rsp *http.Response) (*PostUapiDomesticStockV1TradingOrderCashResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUapiDomesticStockV1TradingOrderCashResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUapiDomesticStockV1TradingOrderCreditResponse parses an HTTP response from a PostUapiDomesticStockV1TradingOrderCreditWithResponse call
func ParsePostUapiDomesticStockV1TradingOrderCreditResponse(rsp *http.Response) (*PostUapiDomesticStockV1TradingOrderCreditResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUapiDomesticStockV1TradingOrderCreditResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUapiDomesticStockV1TradingOrderResvResponse parses an HTTP response from a PostUapiDomesticStockV1TradingOrderResvWithResponse call
func ParsePostUapiDomesticStockV1TradingOrderResvResponse(rsp *http.Response) (*PostUapiDomesticStockV1TradingOrderResvResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUapiDomesticStockV1TradingOrderResvResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1TradingOrderResvCcnlResponse parses an HTTP response from a GetUapiDomesticStockV1TradingOrderResvCcnlWithResponse call
func ParseGetUapiDomesticStockV1TradingOrderResvCcnlResponse(rsp *http.Response) (*GetUapiDomesticStockV1TradingOrderResvCcnlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1TradingOrderResvCcnlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUapiDomesticStockV1TradingOrderResvRvsecnclResponse parses an HTTP response from a PostUapiDomesticStockV1TradingOrderResvRvsecnclWithResponse call
func ParsePostUapiDomesticStockV1TradingOrderResvRvsecnclResponse(rsp *http.Response) (*PostUapiDomesticStockV1TradingOrderResvRvsecnclResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUapiDomesticStockV1TradingOrderResvRvsecnclResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUapiDomesticStockV1TradingOrderRvsecnclResponse parses an HTTP response from a PostUapiDomesticStockV1TradingOrderRvsecnclWithResponse call
func ParsePostUapiDomesticStockV1TradingOrderRvsecnclResponse(rsp *http.Response) (*PostUapiDomesticStockV1TradingOrderRvsecnclResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUapiDomesticStockV1TradingOrderRvsecnclResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1TradingPensionInquireBalanceResponse parses an HTTP response from a GetUapiDomesticStockV1TradingPensionInquireBalanceWithResponse call
func ParseGetUapiDomesticStockV1TradingPensionInquireBalanceResponse(rsp *http.Response) (*GetUapiDomesticStockV1TradingPensionInquireBalanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1TradingPensionInquireBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1TradingPensionInquireDailyCcldResponse parses an HTTP response from a GetUapiDomesticStockV1TradingPensionInquireDailyCcldWithResponse call
func ParseGetUapiDomesticStockV1TradingPensionInquireDailyCcldResponse(rsp *http.Response) (*GetUapiDomesticStockV1TradingPensionInquireDailyCcldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1TradingPensionInquireDailyCcldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1TradingPensionInquireDepositResponse parses an HTTP response from a GetUapiDomesticStockV1TradingPensionInquireDepositWithResponse call
func ParseGetUapiDomesticStockV1TradingPensionInquireDepositResponse(rsp *http.Response) (*GetUapiDomesticStockV1TradingPensionInquireDepositResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1TradingPensionInquireDepositResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1TradingPensionInquirePresentBalanceResponse parses an HTTP response from a GetUapiDomesticStockV1TradingPensionInquirePresentBalanceWithResponse call
func ParseGetUapiDomesticStockV1TradingPensionInquirePresentBalanceResponse(rsp *http.Response) (*GetUapiDomesticStockV1TradingPensionInquirePresentBalanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1TradingPensionInquirePresentBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiDomesticStockV1TradingPensionInquirePsblOrderResponse parses an HTTP response from a GetUapiDomesticStockV1TradingPensionInquirePsblOrderWithResponse call
func ParseGetUapiDomesticStockV1TradingPensionInquirePsblOrderResponse(rsp *http.Response) (*GetUapiDomesticStockV1TradingPensionInquirePsblOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiDomesticStockV1TradingPensionInquirePsblOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiElwV1QuotationsCompareStocksResponse parses an HTTP response from a GetUapiElwV1QuotationsCompareStocksWithResponse call
func ParseGetUapiElwV1QuotationsCompareStocksResponse(rsp *http.Response) (*GetUapiElwV1QuotationsCompareStocksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiElwV1QuotationsCompareStocksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiElwV1QuotationsCondSearchResponse parses an HTTP response from a GetUapiElwV1QuotationsCondSearchWithResponse call
func ParseGetUapiElwV1QuotationsCondSearchResponse(rsp *http.Response) (*GetUapiElwV1QuotationsCondSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiElwV1QuotationsCondSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiElwV1QuotationsExpirationStocksResponse parses an HTTP response from a GetUapiElwV1QuotationsExpirationStocksWithResponse call
func ParseGetUapiElwV1QuotationsExpirationStocksResponse(rsp *http.Response) (*GetUapiElwV1QuotationsExpirationStocksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiElwV1QuotationsExpirationStocksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiElwV1QuotationsIndicatorTrendCcnlResponse parses an HTTP response from a GetUapiElwV1QuotationsIndicatorTrendCcnlWithResponse call
func ParseGetUapiElwV1QuotationsIndicatorTrendCcnlResponse(rsp *http.Response) (*GetUapiElwV1QuotationsIndicatorTrendCcnlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiElwV1QuotationsIndicatorTrendCcnlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiElwV1QuotationsIndicatorTrendDailyResponse parses an HTTP response from a GetUapiElwV1QuotationsIndicatorTrendDailyWithResponse call
func ParseGetUapiElwV1QuotationsIndicatorTrendDailyResponse(rsp *http.Response) (*GetUapiElwV1QuotationsIndicatorTrendDailyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiElwV1QuotationsIndicatorTrendDailyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiElwV1QuotationsIndicatorTrendMinuteResponse parses an HTTP response from a GetUapiElwV1QuotationsIndicatorTrendMinuteWithResponse call
func ParseGetUapiElwV1QuotationsIndicatorTrendMinuteResponse(rsp *http.Response) (*GetUapiElwV1QuotationsIndicatorTrendMinuteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiElwV1QuotationsIndicatorTrendMinuteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiElwV1QuotationsLpTradeTrendResponse parses an HTTP response from a GetUapiElwV1QuotationsLpTradeTrendWithResponse call
func ParseGetUapiElwV1QuotationsLpTradeTrendResponse(rsp *http.Response) (*GetUapiElwV1QuotationsLpTradeTrendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiElwV1QuotationsLpTradeTrendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiElwV1QuotationsNewlyListedResponse parses an HTTP response from a GetUapiElwV1QuotationsNewlyListedWithResponse call
func ParseGetUapiElwV1QuotationsNewlyListedResponse(rsp *http.Response) (*GetUapiElwV1QuotationsNewlyListedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiElwV1QuotationsNewlyListedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiElwV1QuotationsSensitivityTrendCcnlResponse parses an HTTP response from a GetUapiElwV1QuotationsSensitivityTrendCcnlWithResponse call
func ParseGetUapiElwV1QuotationsSensitivityTrendCcnlResponse(rsp *http.Response) (*GetUapiElwV1QuotationsSensitivityTrendCcnlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiElwV1QuotationsSensitivityTrendCcnlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiElwV1QuotationsSensitivityTrendDailyResponse parses an HTTP response from a GetUapiElwV1QuotationsSensitivityTrendDailyWithResponse call
func ParseGetUapiElwV1QuotationsSensitivityTrendDailyResponse(rsp *http.Response) (*GetUapiElwV1QuotationsSensitivityTrendDailyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiElwV1QuotationsSensitivityTrendDailyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiElwV1QuotationsUdrlAssetListResponse parses an HTTP response from a GetUapiElwV1QuotationsUdrlAssetListWithResponse call
func ParseGetUapiElwV1QuotationsUdrlAssetListResponse(rsp *http.Response) (*GetUapiElwV1QuotationsUdrlAssetListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiElwV1QuotationsUdrlAssetListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiElwV1QuotationsVolatilityTrendCcnlResponse parses an HTTP response from a GetUapiElwV1QuotationsVolatilityTrendCcnlWithResponse call
func ParseGetUapiElwV1QuotationsVolatilityTrendCcnlResponse(rsp *http.Response) (*GetUapiElwV1QuotationsVolatilityTrendCcnlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiElwV1QuotationsVolatilityTrendCcnlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiElwV1QuotationsVolatilityTrendDailyResponse parses an HTTP response from a GetUapiElwV1QuotationsVolatilityTrendDailyWithResponse call
func ParseGetUapiElwV1QuotationsVolatilityTrendDailyResponse(rsp *http.Response) (*GetUapiElwV1QuotationsVolatilityTrendDailyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiElwV1QuotationsVolatilityTrendDailyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiElwV1QuotationsVolatilityTrendMinuteResponse parses an HTTP response from a GetUapiElwV1QuotationsVolatilityTrendMinuteWithResponse call
func ParseGetUapiElwV1QuotationsVolatilityTrendMinuteResponse(rsp *http.Response) (*GetUapiElwV1QuotationsVolatilityTrendMinuteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiElwV1QuotationsVolatilityTrendMinuteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiElwV1QuotationsVolatilityTrendTickResponse parses an HTTP response from a GetUapiElwV1QuotationsVolatilityTrendTickWithResponse call
func ParseGetUapiElwV1QuotationsVolatilityTrendTickResponse(rsp *http.Response) (*GetUapiElwV1QuotationsVolatilityTrendTickResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiElwV1QuotationsVolatilityTrendTickResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiElwV1RankingUpdownRateResponse parses an HTTP response from a GetUapiElwV1RankingUpdownRateWithResponse call
func ParseGetUapiElwV1RankingUpdownRateResponse(rsp *http.Response) (*GetUapiElwV1RankingUpdownRateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiElwV1RankingUpdownRateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiEtfetnV1QuotationsInquireComponentStockPriceResponse parses an HTTP response from a GetUapiEtfetnV1QuotationsInquireComponentStockPriceWithResponse call
func ParseGetUapiEtfetnV1QuotationsInquireComponentStockPriceResponse(rsp *http.Response) (*GetUapiEtfetnV1QuotationsInquireComponentStockPriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiEtfetnV1QuotationsInquireComponentStockPriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiEtfetnV1QuotationsInquirePriceResponse parses an HTTP response from a GetUapiEtfetnV1QuotationsInquirePriceWithResponse call
func ParseGetUapiEtfetnV1QuotationsInquirePriceResponse(rsp *http.Response) (*GetUapiEtfetnV1QuotationsInquirePriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiEtfetnV1QuotationsInquirePriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiEtfetnV1QuotationsNavComparisonDailyTrendResponse parses an HTTP response from a GetUapiEtfetnV1QuotationsNavComparisonDailyTrendWithResponse call
func ParseGetUapiEtfetnV1QuotationsNavComparisonDailyTrendResponse(rsp *http.Response) (*GetUapiEtfetnV1QuotationsNavComparisonDailyTrendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiEtfetnV1QuotationsNavComparisonDailyTrendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiEtfetnV1QuotationsNavComparisonTimeTrendResponse parses an HTTP response from a GetUapiEtfetnV1QuotationsNavComparisonTimeTrendWithResponse call
func ParseGetUapiEtfetnV1QuotationsNavComparisonTimeTrendResponse(rsp *http.Response) (*GetUapiEtfetnV1QuotationsNavComparisonTimeTrendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiEtfetnV1QuotationsNavComparisonTimeTrendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiEtfetnV1QuotationsNavComparisonTrendResponse parses an HTTP response from a GetUapiEtfetnV1QuotationsNavComparisonTrendWithResponse call
func ParseGetUapiEtfetnV1QuotationsNavComparisonTrendResponse(rsp *http.Response) (*GetUapiEtfetnV1QuotationsNavComparisonTrendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiEtfetnV1QuotationsNavComparisonTrendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUapiHashkeyResponse parses an HTTP response from a PostUapiHashkeyWithResponse call
func ParsePostUapiHashkeyResponse(rsp *http.Response) (*PostUapiHashkeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUapiHashkeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasFutureoptionV1QuotationsDailyCcnlResponse parses an HTTP response from a GetUapiOverseasFutureoptionV1QuotationsDailyCcnlWithResponse call
func ParseGetUapiOverseasFutureoptionV1QuotationsDailyCcnlResponse(rsp *http.Response) (*GetUapiOverseasFutureoptionV1QuotationsDailyCcnlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasFutureoptionV1QuotationsDailyCcnlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasFutureoptionV1QuotationsInquireAskingPriceResponse parses an HTTP response from a GetUapiOverseasFutureoptionV1QuotationsInquireAskingPriceWithResponse call
func ParseGetUapiOverseasFutureoptionV1QuotationsInquireAskingPriceResponse(rsp *http.Response) (*GetUapiOverseasFutureoptionV1QuotationsInquireAskingPriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasFutureoptionV1QuotationsInquireAskingPriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasFutureoptionV1QuotationsInquirePriceResponse parses an HTTP response from a GetUapiOverseasFutureoptionV1QuotationsInquirePriceWithResponse call
func ParseGetUapiOverseasFutureoptionV1QuotationsInquirePriceResponse(rsp *http.Response) (*GetUapiOverseasFutureoptionV1QuotationsInquirePriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasFutureoptionV1QuotationsInquirePriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasFutureoptionV1QuotationsInquireTimeFuturechartpriceResponse parses an HTTP response from a GetUapiOverseasFutureoptionV1QuotationsInquireTimeFuturechartpriceWithResponse call
func ParseGetUapiOverseasFutureoptionV1QuotationsInquireTimeFuturechartpriceResponse(rsp *http.Response) (*GetUapiOverseasFutureoptionV1QuotationsInquireTimeFuturechartpriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasFutureoptionV1QuotationsInquireTimeFuturechartpriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasFutureoptionV1QuotationsInvestorUnpdTrendResponse parses an HTTP response from a GetUapiOverseasFutureoptionV1QuotationsInvestorUnpdTrendWithResponse call
func ParseGetUapiOverseasFutureoptionV1QuotationsInvestorUnpdTrendResponse(rsp *http.Response) (*GetUapiOverseasFutureoptionV1QuotationsInvestorUnpdTrendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasFutureoptionV1QuotationsInvestorUnpdTrendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasFutureoptionV1QuotationsMarketTimeResponse parses an HTTP response from a GetUapiOverseasFutureoptionV1QuotationsMarketTimeWithResponse call
func ParseGetUapiOverseasFutureoptionV1QuotationsMarketTimeResponse(rsp *http.Response) (*GetUapiOverseasFutureoptionV1QuotationsMarketTimeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasFutureoptionV1QuotationsMarketTimeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasFutureoptionV1QuotationsMonthlyCcnlResponse parses an HTTP response from a GetUapiOverseasFutureoptionV1QuotationsMonthlyCcnlWithResponse call
func ParseGetUapiOverseasFutureoptionV1QuotationsMonthlyCcnlResponse(rsp *http.Response) (*GetUapiOverseasFutureoptionV1QuotationsMonthlyCcnlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasFutureoptionV1QuotationsMonthlyCcnlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasFutureoptionV1QuotationsOptAskingPriceResponse parses an HTTP response from a GetUapiOverseasFutureoptionV1QuotationsOptAskingPriceWithResponse call
func ParseGetUapiOverseasFutureoptionV1QuotationsOptAskingPriceResponse(rsp *http.Response) (*GetUapiOverseasFutureoptionV1QuotationsOptAskingPriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasFutureoptionV1QuotationsOptAskingPriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasFutureoptionV1QuotationsSearchContractDetailResponse parses an HTTP response from a GetUapiOverseasFutureoptionV1QuotationsSearchContractDetailWithResponse call
func ParseGetUapiOverseasFutureoptionV1QuotationsSearchContractDetailResponse(rsp *http.Response) (*GetUapiOverseasFutureoptionV1QuotationsSearchContractDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasFutureoptionV1QuotationsSearchContractDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasFutureoptionV1QuotationsStockDetailResponse parses an HTTP response from a GetUapiOverseasFutureoptionV1QuotationsStockDetailWithResponse call
func ParseGetUapiOverseasFutureoptionV1QuotationsStockDetailResponse(rsp *http.Response) (*GetUapiOverseasFutureoptionV1QuotationsStockDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasFutureoptionV1QuotationsStockDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasFutureoptionV1QuotationsTickCcnlResponse parses an HTTP response from a GetUapiOverseasFutureoptionV1QuotationsTickCcnlWithResponse call
func ParseGetUapiOverseasFutureoptionV1QuotationsTickCcnlResponse(rsp *http.Response) (*GetUapiOverseasFutureoptionV1QuotationsTickCcnlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasFutureoptionV1QuotationsTickCcnlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasFutureoptionV1QuotationsWeeklyCcnlResponse parses an HTTP response from a GetUapiOverseasFutureoptionV1QuotationsWeeklyCcnlWithResponse call
func ParseGetUapiOverseasFutureoptionV1QuotationsWeeklyCcnlResponse(rsp *http.Response) (*GetUapiOverseasFutureoptionV1QuotationsWeeklyCcnlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasFutureoptionV1QuotationsWeeklyCcnlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasFutureoptionV1TradingInquireCcldResponse parses an HTTP response from a GetUapiOverseasFutureoptionV1TradingInquireCcldWithResponse call
func ParseGetUapiOverseasFutureoptionV1TradingInquireCcldResponse(rsp *http.Response) (*GetUapiOverseasFutureoptionV1TradingInquireCcldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasFutureoptionV1TradingInquireCcldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasFutureoptionV1TradingInquireDailyCcldResponse parses an HTTP response from a GetUapiOverseasFutureoptionV1TradingInquireDailyCcldWithResponse call
func ParseGetUapiOverseasFutureoptionV1TradingInquireDailyCcldResponse(rsp *http.Response) (*GetUapiOverseasFutureoptionV1TradingInquireDailyCcldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasFutureoptionV1TradingInquireDailyCcldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasFutureoptionV1TradingInquireDailyOrderResponse parses an HTTP response from a GetUapiOverseasFutureoptionV1TradingInquireDailyOrderWithResponse call
func ParseGetUapiOverseasFutureoptionV1TradingInquireDailyOrderResponse(rsp *http.Response) (*GetUapiOverseasFutureoptionV1TradingInquireDailyOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasFutureoptionV1TradingInquireDailyOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasFutureoptionV1TradingInquireDepositResponse parses an HTTP response from a GetUapiOverseasFutureoptionV1TradingInquireDepositWithResponse call
func ParseGetUapiOverseasFutureoptionV1TradingInquireDepositResponse(rsp *http.Response) (*GetUapiOverseasFutureoptionV1TradingInquireDepositResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasFutureoptionV1TradingInquireDepositResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasFutureoptionV1TradingInquirePeriodCcldResponse parses an HTTP response from a GetUapiOverseasFutureoptionV1TradingInquirePeriodCcldWithResponse call
func ParseGetUapiOverseasFutureoptionV1TradingInquirePeriodCcldResponse(rsp *http.Response) (*GetUapiOverseasFutureoptionV1TradingInquirePeriodCcldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasFutureoptionV1TradingInquirePeriodCcldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasFutureoptionV1TradingInquirePeriodTransResponse parses an HTTP response from a GetUapiOverseasFutureoptionV1TradingInquirePeriodTransWithResponse call
func ParseGetUapiOverseasFutureoptionV1TradingInquirePeriodTransResponse(rsp *http.Response) (*GetUapiOverseasFutureoptionV1TradingInquirePeriodTransResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasFutureoptionV1TradingInquirePeriodTransResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasFutureoptionV1TradingInquirePsamountResponse parses an HTTP response from a GetUapiOverseasFutureoptionV1TradingInquirePsamountWithResponse call
func ParseGetUapiOverseasFutureoptionV1TradingInquirePsamountResponse(rsp *http.Response) (*GetUapiOverseasFutureoptionV1TradingInquirePsamountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasFutureoptionV1TradingInquirePsamountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasFutureoptionV1TradingInquireUnpdResponse parses an HTTP response from a GetUapiOverseasFutureoptionV1TradingInquireUnpdWithResponse call
func ParseGetUapiOverseasFutureoptionV1TradingInquireUnpdResponse(rsp *http.Response) (*GetUapiOverseasFutureoptionV1TradingInquireUnpdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasFutureoptionV1TradingInquireUnpdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasFutureoptionV1TradingMarginDetailResponse parses an HTTP response from a GetUapiOverseasFutureoptionV1TradingMarginDetailWithResponse call
func ParseGetUapiOverseasFutureoptionV1TradingMarginDetailResponse(rsp *http.Response) (*GetUapiOverseasFutureoptionV1TradingMarginDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasFutureoptionV1TradingMarginDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUapiOverseasFutureoptionV1TradingOrderResponse parses an HTTP response from a PostUapiOverseasFutureoptionV1TradingOrderWithResponse call
func ParsePostUapiOverseasFutureoptionV1TradingOrderResponse(rsp *http.Response) (*PostUapiOverseasFutureoptionV1TradingOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUapiOverseasFutureoptionV1TradingOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUapiOverseasFutureoptionV1TradingOrderRvsecnclResponse parses an HTTP response from a PostUapiOverseasFutureoptionV1TradingOrderRvsecnclWithResponse call
func ParsePostUapiOverseasFutureoptionV1TradingOrderRvsecnclResponse(rsp *http.Response) (*PostUapiOverseasFutureoptionV1TradingOrderRvsecnclResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUapiOverseasFutureoptionV1TradingOrderRvsecnclResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasPriceV1QuotationsBrknewsTitleResponse parses an HTTP response from a GetUapiOverseasPriceV1QuotationsBrknewsTitleWithResponse call
func ParseGetUapiOverseasPriceV1QuotationsBrknewsTitleResponse(rsp *http.Response) (*GetUapiOverseasPriceV1QuotationsBrknewsTitleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasPriceV1QuotationsBrknewsTitleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasPriceV1QuotationsColableByCompanyResponse parses an HTTP response from a GetUapiOverseasPriceV1QuotationsColableByCompanyWithResponse call
func ParseGetUapiOverseasPriceV1QuotationsColableByCompanyResponse(rsp *http.Response) (*GetUapiOverseasPriceV1QuotationsColableByCompanyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasPriceV1QuotationsColableByCompanyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasPriceV1QuotationsDailypriceResponse parses an HTTP response from a GetUapiOverseasPriceV1QuotationsDailypriceWithResponse call
func ParseGetUapiOverseasPriceV1QuotationsDailypriceResponse(rsp *http.Response) (*GetUapiOverseasPriceV1QuotationsDailypriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasPriceV1QuotationsDailypriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasPriceV1QuotationsInquireAskingPriceResponse parses an HTTP response from a GetUapiOverseasPriceV1QuotationsInquireAskingPriceWithResponse call
func ParseGetUapiOverseasPriceV1QuotationsInquireAskingPriceResponse(rsp *http.Response) (*GetUapiOverseasPriceV1QuotationsInquireAskingPriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasPriceV1QuotationsInquireAskingPriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasPriceV1QuotationsInquireDailyChartpriceResponse parses an HTTP response from a GetUapiOverseasPriceV1QuotationsInquireDailyChartpriceWithResponse call
func ParseGetUapiOverseasPriceV1QuotationsInquireDailyChartpriceResponse(rsp *http.Response) (*GetUapiOverseasPriceV1QuotationsInquireDailyChartpriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasPriceV1QuotationsInquireDailyChartpriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasPriceV1QuotationsInquireSearchResponse parses an HTTP response from a GetUapiOverseasPriceV1QuotationsInquireSearchWithResponse call
func ParseGetUapiOverseasPriceV1QuotationsInquireSearchResponse(rsp *http.Response) (*GetUapiOverseasPriceV1QuotationsInquireSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasPriceV1QuotationsInquireSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasPriceV1QuotationsInquireTimeIndexchartpriceResponse parses an HTTP response from a GetUapiOverseasPriceV1QuotationsInquireTimeIndexchartpriceWithResponse call
func ParseGetUapiOverseasPriceV1QuotationsInquireTimeIndexchartpriceResponse(rsp *http.Response) (*GetUapiOverseasPriceV1QuotationsInquireTimeIndexchartpriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasPriceV1QuotationsInquireTimeIndexchartpriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasPriceV1QuotationsInquireTimeItemchartpriceResponse parses an HTTP response from a GetUapiOverseasPriceV1QuotationsInquireTimeItemchartpriceWithResponse call
func ParseGetUapiOverseasPriceV1QuotationsInquireTimeItemchartpriceResponse(rsp *http.Response) (*GetUapiOverseasPriceV1QuotationsInquireTimeItemchartpriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasPriceV1QuotationsInquireTimeItemchartpriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasPriceV1QuotationsNewsTitleResponse parses an HTTP response from a GetUapiOverseasPriceV1QuotationsNewsTitleWithResponse call
func ParseGetUapiOverseasPriceV1QuotationsNewsTitleResponse(rsp *http.Response) (*GetUapiOverseasPriceV1QuotationsNewsTitleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasPriceV1QuotationsNewsTitleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasPriceV1QuotationsPeriodRightsResponse parses an HTTP response from a GetUapiOverseasPriceV1QuotationsPeriodRightsWithResponse call
func ParseGetUapiOverseasPriceV1QuotationsPeriodRightsResponse(rsp *http.Response) (*GetUapiOverseasPriceV1QuotationsPeriodRightsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasPriceV1QuotationsPeriodRightsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasPriceV1QuotationsPriceResponse parses an HTTP response from a GetUapiOverseasPriceV1QuotationsPriceWithResponse call
func ParseGetUapiOverseasPriceV1QuotationsPriceResponse(rsp *http.Response) (*GetUapiOverseasPriceV1QuotationsPriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasPriceV1QuotationsPriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasPriceV1QuotationsPriceDetailResponse parses an HTTP response from a GetUapiOverseasPriceV1QuotationsPriceDetailWithResponse call
func ParseGetUapiOverseasPriceV1QuotationsPriceDetailResponse(rsp *http.Response) (*GetUapiOverseasPriceV1QuotationsPriceDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasPriceV1QuotationsPriceDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasPriceV1QuotationsRightsByIceResponse parses an HTTP response from a GetUapiOverseasPriceV1QuotationsRightsByIceWithResponse call
func ParseGetUapiOverseasPriceV1QuotationsRightsByIceResponse(rsp *http.Response) (*GetUapiOverseasPriceV1QuotationsRightsByIceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasPriceV1QuotationsRightsByIceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasPriceV1QuotationsSearchInfoResponse parses an HTTP response from a GetUapiOverseasPriceV1QuotationsSearchInfoWithResponse call
func ParseGetUapiOverseasPriceV1QuotationsSearchInfoResponse(rsp *http.Response) (*GetUapiOverseasPriceV1QuotationsSearchInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasPriceV1QuotationsSearchInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasStockV1QuotationsCountriesHolidayResponse parses an HTTP response from a GetUapiOverseasStockV1QuotationsCountriesHolidayWithResponse call
func ParseGetUapiOverseasStockV1QuotationsCountriesHolidayResponse(rsp *http.Response) (*GetUapiOverseasStockV1QuotationsCountriesHolidayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasStockV1QuotationsCountriesHolidayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUapiOverseasStockV1TradingDaytimeOrderResponse parses an HTTP response from a PostUapiOverseasStockV1TradingDaytimeOrderWithResponse call
func ParsePostUapiOverseasStockV1TradingDaytimeOrderResponse(rsp *http.Response) (*PostUapiOverseasStockV1TradingDaytimeOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUapiOverseasStockV1TradingDaytimeOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUapiOverseasStockV1TradingDaytimeOrderRvsecnclResponse parses an HTTP response from a PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclWithResponse call
func ParsePostUapiOverseasStockV1TradingDaytimeOrderRvsecnclResponse(rsp *http.Response) (*PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUapiOverseasStockV1TradingDaytimeOrderRvsecnclResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasStockV1TradingForeignMarginResponse parses an HTTP response from a GetUapiOverseasStockV1TradingForeignMarginWithResponse call
func ParseGetUapiOverseasStockV1TradingForeignMarginResponse(rsp *http.Response) (*GetUapiOverseasStockV1TradingForeignMarginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasStockV1TradingForeignMarginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasStockV1TradingInquireBalanceResponse parses an HTTP response from a GetUapiOverseasStockV1TradingInquireBalanceWithResponse call
func ParseGetUapiOverseasStockV1TradingInquireBalanceResponse(rsp *http.Response) (*GetUapiOverseasStockV1TradingInquireBalanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasStockV1TradingInquireBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasStockV1TradingInquireCcnlResponse parses an HTTP response from a GetUapiOverseasStockV1TradingInquireCcnlWithResponse call
func ParseGetUapiOverseasStockV1TradingInquireCcnlResponse(rsp *http.Response) (*GetUapiOverseasStockV1TradingInquireCcnlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasStockV1TradingInquireCcnlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasStockV1TradingInquireNccsResponse parses an HTTP response from a GetUapiOverseasStockV1TradingInquireNccsWithResponse call
func ParseGetUapiOverseasStockV1TradingInquireNccsResponse(rsp *http.Response) (*GetUapiOverseasStockV1TradingInquireNccsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasStockV1TradingInquireNccsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasStockV1TradingInquirePaymtStdrBalanceResponse parses an HTTP response from a GetUapiOverseasStockV1TradingInquirePaymtStdrBalanceWithResponse call
func ParseGetUapiOverseasStockV1TradingInquirePaymtStdrBalanceResponse(rsp *http.Response) (*GetUapiOverseasStockV1TradingInquirePaymtStdrBalanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasStockV1TradingInquirePaymtStdrBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasStockV1TradingInquirePeriodProfitResponse parses an HTTP response from a GetUapiOverseasStockV1TradingInquirePeriodProfitWithResponse call
func ParseGetUapiOverseasStockV1TradingInquirePeriodProfitResponse(rsp *http.Response) (*GetUapiOverseasStockV1TradingInquirePeriodProfitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasStockV1TradingInquirePeriodProfitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasStockV1TradingInquirePeriodTransResponse parses an HTTP response from a GetUapiOverseasStockV1TradingInquirePeriodTransWithResponse call
func ParseGetUapiOverseasStockV1TradingInquirePeriodTransResponse(rsp *http.Response) (*GetUapiOverseasStockV1TradingInquirePeriodTransResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasStockV1TradingInquirePeriodTransResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasStockV1TradingInquirePresentBalanceResponse parses an HTTP response from a GetUapiOverseasStockV1TradingInquirePresentBalanceWithResponse call
func ParseGetUapiOverseasStockV1TradingInquirePresentBalanceResponse(rsp *http.Response) (*GetUapiOverseasStockV1TradingInquirePresentBalanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasStockV1TradingInquirePresentBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasStockV1TradingInquirePsamountResponse parses an HTTP response from a GetUapiOverseasStockV1TradingInquirePsamountWithResponse call
func ParseGetUapiOverseasStockV1TradingInquirePsamountResponse(rsp *http.Response) (*GetUapiOverseasStockV1TradingInquirePsamountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasStockV1TradingInquirePsamountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUapiOverseasStockV1TradingOrderResponse parses an HTTP response from a PostUapiOverseasStockV1TradingOrderWithResponse call
func ParsePostUapiOverseasStockV1TradingOrderResponse(rsp *http.Response) (*PostUapiOverseasStockV1TradingOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUapiOverseasStockV1TradingOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUapiOverseasStockV1TradingOrderResvResponse parses an HTTP response from a PostUapiOverseasStockV1TradingOrderResvWithResponse call
func ParsePostUapiOverseasStockV1TradingOrderResvResponse(rsp *http.Response) (*PostUapiOverseasStockV1TradingOrderResvResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUapiOverseasStockV1TradingOrderResvResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUapiOverseasStockV1TradingOrderResvCcnlResponse parses an HTTP response from a PostUapiOverseasStockV1TradingOrderResvCcnlWithResponse call
func ParsePostUapiOverseasStockV1TradingOrderResvCcnlResponse(rsp *http.Response) (*PostUapiOverseasStockV1TradingOrderResvCcnlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUapiOverseasStockV1TradingOrderResvCcnlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUapiOverseasStockV1TradingOrderResvListResponse parses an HTTP response from a GetUapiOverseasStockV1TradingOrderResvListWithResponse call
func ParseGetUapiOverseasStockV1TradingOrderResvListResponse(rsp *http.Response) (*GetUapiOverseasStockV1TradingOrderResvListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUapiOverseasStockV1TradingOrderResvListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUapiOverseasStockV1TradingOrderRvsecnclResponse parses an HTTP response from a PostUapiOverseasStockV1TradingOrderRvsecnclWithResponse call
func ParsePostUapiOverseasStockV1TradingOrderRvsecnclResponse(rsp *http.Response) (*PostUapiOverseasStockV1TradingOrderRvsecnclResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUapiOverseasStockV1TradingOrderRvsecnclResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
